{
  "version": "2",
  "toolVersion": "1.54.0",
  "snippets": {
    "f4925b22dbbfb735961c87e223f4073779a60029a56274f30eba0095bc097fa0": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 16
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "8e4f99451290515f623373ae0f959b3f463b7e080d34a11c1f21c3093e3471fb"
    },
    "956a5491479f307809150bcef5a697bd2c328809fc658ca8037c97e4d0b37dfb": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"MyLambda\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"my-lambda-handler\")),\n    handler=\"index.main\",\n    runtime=lambda_.Runtime.PYTHON_3_6\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Function(this, \"MyLambda\", new FunctionProps {\n    Code = Code.FromAsset(Join(__dirname, \"my-lambda-handler\")),\n    Handler = \"index.main\",\n    Runtime = Runtime.PYTHON_3_6\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"MyLambda\")\n        .code(Code.fromAsset(join(__dirname, \"my-lambda-handler\")))\n        .handler(\"index.main\")\n        .runtime(Runtime.PYTHON_3_6)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'MyLambda', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),\n  handler: 'index.main',\n  runtime: lambda.Runtime.PYTHON_3_6,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 43
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_6",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    /// !show\n    new lambda.Function(this, 'MyLambda', {\n      code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),\n      handler: 'index.main',\n      runtime: lambda.Runtime.PYTHON_3_6,\n    });\n    /// !hide\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'lambda-test-assets');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "9b83181c44d1acb8cc5512d3384caf733869b1f0c39c5922afb4ed9343444c9e"
    },
    "7748f4af8fd67a5b77e92a0ddec70e0961daf728bf9fb2f8ab1fe168edea17fa": {
      "translations": {
        "python": {
          "source": "lambda_.DockerImageFunction(self, \"AssetFunction\",\n    code=lambda_.DockerImageCode.from_image_asset(path.join(__dirname, \"docker-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new DockerImageFunction(this, \"AssetFunction\", new DockerImageFunctionProps {\n    Code = DockerImageCode.FromImageAsset(Join(__dirname, \"docker-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "DockerImageFunction.Builder.create(this, \"AssetFunction\")\n        .code(DockerImageCode.fromImageAsset(join(__dirname, \"docker-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 70
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DockerImageCode",
        "@aws-cdk/aws-lambda.DockerImageCode#fromImageAsset",
        "@aws-cdk/aws-lambda.DockerImageFunction",
        "@aws-cdk/aws-lambda.DockerImageFunctionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "7a76a568d022e02a53b73950470b6494dd47ba0de44fa34e2cdda62ce1fb09e6"
    },
    "b24cf7b88b324429253bbade38ef24fc8463e433b84361792b498fd355f08828": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr as ecr\n\nrepo = ecr.Repository(self, \"Repository\")\n\nlambda_.DockerImageFunction(self, \"ECRFunction\",\n    code=lambda_.DockerImageCode.from_ecr(repo)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECR;\n\nRepository repo = new Repository(this, \"Repository\");\n\nnew DockerImageFunction(this, \"ECRFunction\", new DockerImageFunctionProps {\n    Code = DockerImageCode.FromEcr(repo)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.*;\n\nRepository repo = new Repository(this, \"Repository\");\n\nDockerImageFunction.Builder.create(this, \"ECRFunction\")\n        .code(DockerImageCode.fromEcr(repo))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ecr from '@aws-cdk/aws-ecr';\nconst repo = new ecr.Repository(this, 'Repository');\n\nnew lambda.DockerImageFunction(this, 'ECRFunction', {\n  code: lambda.DockerImageCode.fromEcr(repo),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 78
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-lambda.DockerImageCode",
        "@aws-cdk/aws-lambda.DockerImageCode#fromEcr",
        "@aws-cdk/aws-lambda.DockerImageFunction",
        "@aws-cdk/aws-lambda.DockerImageFunctionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecr from '@aws-cdk/aws-ecr';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst repo = new ecr.Repository(this, 'Repository');\n\nnew lambda.DockerImageFunction(this, 'ECRFunction', {\n  code: lambda.DockerImageCode.fromEcr(repo),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "26ec16e117315a6c379477340d70dbcd64d5d4d3fee7f046bbd4f25f0e74033c"
    },
    "d3707865c9ee954d9bcabc52f452ffa4f994ba2bbcf7f38fbd043710c0b5c39d": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n\nrole = fn.role",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});\n\nIRole? role = fn.Role;",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();\n\nIRole role = fn.getRole();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nconst role = fn.role; // the Role",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 98
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#role",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nconst role = fn.role;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "193": 1,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "eb93c9fd778e0fc0a7e55cd5840845008fd02720d34c3c51b0ce4e91afa049dc"
    },
    "4b9974a6dbfe00af8e55da9485b24b7045a94af169b299f901282b5d2f65e68f": {
      "translations": {
        "python": {
          "source": "my_role = iam.Role(self, \"My Role\",\n    assumed_by=iam.ServicePrincipal(\"sns.amazonaws.com\")\n)\n\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    role=my_role\n)\n\nmy_role.add_managed_policy(iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AWSLambdaBasicExecutionRole\"))\nmy_role.add_managed_policy(iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AWSLambdaVPCAccessExecutionRole\"))",
          "version": "2"
        },
        "csharp": {
          "source": "Role myRole = new Role(this, \"My Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"sns.amazonaws.com\")\n});\n\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Role = myRole\n});\n\nmyRole.AddManagedPolicy(ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AWSLambdaBasicExecutionRole\"));\nmyRole.AddManagedPolicy(ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AWSLambdaVPCAccessExecutionRole\"));",
          "version": "1"
        },
        "java": {
          "source": "Role myRole = Role.Builder.create(this, \"My Role\")\n        .assumedBy(new ServicePrincipal(\"sns.amazonaws.com\"))\n        .build();\n\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .role(myRole)\n        .build();\n\nmyRole.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaBasicExecutionRole\"));\nmyRole.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaVPCAccessExecutionRole\"));",
          "version": "1"
        },
        "$": {
          "source": "const myRole = new iam.Role(this, 'My Role', {\n  assumedBy: new iam.ServicePrincipal('sns.amazonaws.com'),\n});\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  role: myRole, // user-provided role\n});\n\nmyRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaBasicExecutionRole\"));\nmyRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaVPCAccessExecutionRole\")); // only required if your function lives in a VPC",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 112
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IManagedPolicy",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#addManagedPolicy",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myRole = new iam.Role(this, 'My Role', {\n  assumedBy: new iam.ServicePrincipal('sns.amazonaws.com'),\n});\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  role: myRole, // user-provided role\n});\n\nmyRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaBasicExecutionRole\"));\nmyRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaVPCAccessExecutionRole\"));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 33,
        "104": 2,
        "193": 2,
        "194": 14,
        "196": 6,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "7392a24b11c71d2d20121364354bf28bec07b9f03710e9c19f9c96074b0d5e25"
    },
    "5745c4c52d1a30a8a5e834645bdf0d3139112c56aee56082d83dfea25c2b75df": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    timeout=cdk.Duration.minutes(5)\n)\n\nif fn.timeout:\n    cloudwatch.Alarm(self, \"MyAlarm\",\n        metric=fn.metric_duration().with(\n            statistic=\"Maximum\"\n        ),\n        evaluation_periods=1,\n        datapoints_to_alarm=1,\n        threshold=fn.timeout.to_milliseconds(),\n        treat_missing_data=cloudwatch.TreatMissingData.IGNORE,\n        alarm_name=\"My Lambda Timeout\"\n    )",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.CloudWatch;\n\n\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Timeout = Duration.Minutes(5)\n});\n\nif (fn.Timeout)\n{\n    new Alarm(this, \"MyAlarm\", new AlarmProps {\n        Metric = fn.MetricDuration().With(new MetricOptions {\n            Statistic = \"Maximum\"\n        }),\n        EvaluationPeriods = 1,\n        DatapointsToAlarm = 1,\n        Threshold = fn.Timeout.ToMilliseconds(),\n        TreatMissingData = TreatMissingData.IGNORE,\n        AlarmName = \"My Lambda Timeout\"\n    });\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.cloudwatch.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .timeout(Duration.minutes(5))\n        .build();\n\nif (fn.getTimeout()) {\n    Alarm.Builder.create(this, \"MyAlarm\")\n            .metric(fn.metricDuration().with(MetricOptions.builder()\n                    .statistic(\"Maximum\")\n                    .build()))\n            .evaluationPeriods(1)\n            .datapointsToAlarm(1)\n            .threshold(fn.timeout.toMilliseconds())\n            .treatMissingData(TreatMissingData.IGNORE)\n            .alarmName(\"My Lambda Timeout\")\n            .build();\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 135
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.Metric#with",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-cloudwatch.TreatMissingData",
        "@aws-cdk/aws-cloudwatch.TreatMissingData#IGNORE",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#timeout",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#toMilliseconds",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "14": 1,
        "75": 41,
        "104": 2,
        "193": 3,
        "194": 16,
        "196": 6,
        "197": 2,
        "223": 1,
        "225": 1,
        "226": 1,
        "227": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "bc048486bf100b3deb5c3c72bb2b3b91a18d5bcbf3d65405f5c3894d19037174"
    },
    "70d685ca2ff9c04554cdbd5058dd695c759892464447a9a89769d240d909723b": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\nprincipal = iam.ServicePrincipal(\"my-service\")\n\nfn.grant_invoke(principal)\n\n# Equivalent to:\nfn.add_permission(\"my-service Invocation\",\n    principal=principal\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nServicePrincipal principal = new ServicePrincipal(\"my-service\");\n\nfn.GrantInvoke(principal);\n\n// Equivalent to:\nfn.AddPermission(\"my-service Invocation\", new Permission {\n    Principal = principal\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nServicePrincipal principal = new ServicePrincipal(\"my-service\");\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission(\"my-service Invocation\", Permission.builder()\n        .principal(principal)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst principal = new iam.ServicePrincipal('my-service');\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: principal,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 169
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-lambda.FunctionBase#addPermission",
        "@aws-cdk/aws-lambda.FunctionBase#grantInvoke",
        "@aws-cdk/aws-lambda.Permission"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst principal = new iam.ServicePrincipal('my-service');\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: principal,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4e1fc6388103414ef84877f907d737f3f318104d3aed74068677df40478b6da0"
    },
    "2ce6c34323c6139f7a972858b30282908e9f6784e8a6cf634cdda83104087e52": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\nservice_principal = iam.ServicePrincipal(\"my-service\")\nsource_arn = \"arn:aws:s3:::my-bucket\"\nsource_account = \"111122223333\"\nservice_principal_with_conditions = service_principal.with_conditions({\n    \"ArnLike\": {\n        \"aws:_source_arn\": source_arn\n    },\n    \"StringEquals\": {\n        \"aws:_source_account\": source_account\n    }\n})\n\nfn.grant_invoke(service_principal_with_conditions)\n\n# Equivalent to:\nfn.add_permission(\"my-service Invocation\",\n    principal=service_principal,\n    source_arn=source_arn,\n    source_account=source_account\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nServicePrincipal servicePrincipal = new ServicePrincipal(\"my-service\");\nstring sourceArn = \"arn:aws:s3:::my-bucket\";\nstring sourceAccount = \"111122223333\";\nPrincipalBase servicePrincipalWithConditions = servicePrincipal.WithConditions(new Dictionary<string, object> {\n    { \"ArnLike\", new Dictionary<string, string> {\n        { \"aws:SourceArn\", sourceArn }\n    } },\n    { \"StringEquals\", new Dictionary<string, string> {\n        { \"aws:SourceAccount\", sourceAccount }\n    } }\n});\n\nfn.GrantInvoke(servicePrincipalWithConditions);\n\n// Equivalent to:\nfn.AddPermission(\"my-service Invocation\", new Permission {\n    Principal = servicePrincipal,\n    SourceArn = sourceArn,\n    SourceAccount = sourceAccount\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nServicePrincipal servicePrincipal = new ServicePrincipal(\"my-service\");\nString sourceArn = \"arn:aws:s3:::my-bucket\";\nString sourceAccount = \"111122223333\";\nPrincipalBase servicePrincipalWithConditions = servicePrincipal.withConditions(Map.of(\n        \"ArnLike\", Map.of(\n                \"aws:SourceArn\", sourceArn),\n        \"StringEquals\", Map.of(\n                \"aws:SourceAccount\", sourceAccount)));\n\nfn.grantInvoke(servicePrincipalWithConditions);\n\n// Equivalent to:\nfn.addPermission(\"my-service Invocation\", Permission.builder()\n        .principal(servicePrincipal)\n        .sourceArn(sourceArn)\n        .sourceAccount(sourceAccount)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst servicePrincipal = new iam.ServicePrincipal('my-service');\nconst sourceArn = 'arn:aws:s3:::my-bucket';\nconst sourceAccount = '111122223333';\nconst servicePrincipalWithConditions = servicePrincipal.withConditions({\n  ArnLike: {\n    'aws:SourceArn': sourceArn,\n  },\n  StringEquals: {\n    'aws:SourceAccount': sourceAccount,\n  },\n});\n\nfn.grantInvoke(servicePrincipalWithConditions);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: servicePrincipal,\n  sourceArn: sourceArn,\n  sourceAccount: sourceAccount,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 192
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase",
        "@aws-cdk/aws-iam.PrincipalBase#withConditions",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-lambda.FunctionBase#addPermission",
        "@aws-cdk/aws-lambda.FunctionBase#grantInvoke",
        "@aws-cdk/aws-lambda.Permission"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst servicePrincipal = new iam.ServicePrincipal('my-service');\nconst sourceArn = 'arn:aws:s3:::my-bucket';\nconst sourceAccount = '111122223333';\nconst servicePrincipalWithConditions = servicePrincipal.withConditions({\n  ArnLike: {\n    'aws:SourceArn': sourceArn,\n  },\n  StringEquals: {\n    'aws:SourceAccount': sourceAccount,\n  },\n});\n\nfn.grantInvoke(servicePrincipalWithConditions);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: servicePrincipal,\n  sourceArn: sourceArn,\n  sourceAccount: sourceAccount,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "cd4f923c49234c17923738cd43cf2375567370b16f1aab591fe4f89440eab7db"
    },
    "76c01c9e755f109e5e2c0575cf6fbb95c82f7eea52566395f4f31833e4f51c8c": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\nversion = lambda_.Version(self, \"MyVersion\",\n    lambda_=fn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nVersion version = new Version(this, \"MyVersion\", new VersionProps {\n    Lambda = fn\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nVersion version = Version.Builder.create(this, \"MyVersion\")\n        .lambda(fn)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst version = new lambda.Version(this, 'MyVersion', {\n  lambda: fn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 233
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Version",
        "@aws-cdk/aws-lambda.VersionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst version = new lambda.Version(this, 'MyVersion', {\n  lambda: fn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "3e7982280317272404140dfa01541b1aa7a22fabe3876baa59d3dda10043e6ee"
    },
    "0cac5bf5e753ae6ba42be03f947edf0bdfa449a5678838faae18963250da7422": {
      "translations": {
        "python": {
          "source": "code_version = \"stringOrMethodToGetCodeVersion\"\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    environment={\n        \"CodeVersionString\": code_version\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "string codeVersion = \"stringOrMethodToGetCodeVersion\";\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Environment = new Dictionary<string, string> {\n        { \"CodeVersionString\", codeVersion }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "String codeVersion = \"stringOrMethodToGetCodeVersion\";\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .environment(Map.of(\n                \"CodeVersionString\", codeVersion))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const codeVersion = \"stringOrMethodToGetCodeVersion\";\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  environment: {\n    'CodeVersionString': codeVersion,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 249
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst codeVersion = \"stringOrMethodToGetCodeVersion\";\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  environment: {\n    'CodeVersionString': codeVersion,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "8e4f99451290515f623373ae0f959b3f463b7e080d34a11c1f21c3093e3471fb"
    },
    "9e27dd2e30a46506a6e2d0fd7fdcd7b6596f2cc42c75191a63c4f8dbd4b472e8": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    current_version_options=lambda.VersionOptions(\n        removal_policy=RemovalPolicy.RETAIN,  # retain old versions\n        retry_attempts=1\n    ),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n\nfn.current_version.add_alias(\"live\")",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    CurrentVersionOptions = new VersionOptions {\n        RemovalPolicy = RemovalPolicy.RETAIN,  // retain old versions\n        RetryAttempts = 1\n    },\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});\n\nfn.CurrentVersion.AddAlias(\"live\");",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .currentVersionOptions(VersionOptions.builder()\n                .removalPolicy(RemovalPolicy.RETAIN) // retain old versions\n                .retryAttempts(1)\n                .build())\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();\n\nfn.currentVersion.addAlias(\"live\");",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  currentVersionOptions: {\n    removalPolicy: RemovalPolicy.RETAIN, // retain old versions\n    retryAttempts: 1,                   // async retry attempts\n  },\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nfn.currentVersion.addAlias('live');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 334
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Version#addAlias",
        "@aws-cdk/aws-lambda.VersionOptions",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  currentVersionOptions: {\n    removalPolicy: RemovalPolicy.RETAIN, // retain old versions\n    retryAttempts: 1,                   // async retry attempts\n  },\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nfn.currentVersion.addAlias('live');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 23,
        "104": 1,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "80761530fa4dd89c0bba6c3f16d59a728ab4402b26cd2230afb500422a43a9b7"
    },
    "958d3251331faa1c2f94b89de8c31f4c683bceaf9e64653ccf5a70759c1d41f0": {
      "translations": {
        "python": {
          "source": "layer = lambda_.LayerVersion(stack, \"MyLayer\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"layer-code\")),\n    compatible_runtimes=[lambda_.Runtime.NODEJS_10_X],\n    license=\"Apache-2.0\",\n    description=\"A layer to test the L2 construct\"\n)\n\n# To grant usage by other AWS accounts\nlayer.add_permission(\"remote-account-grant\", account_id=aws_account_id)\n\n# To grant usage to all accounts in some AWS Ogranization\n# layer.grantUsage({ accountId: '*', organizationId });\n\nlambda_.Function(stack, \"MyLayeredLambda\",\n    code=lambda_.InlineCode(\"foo\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_10_X,\n    layers=[layer]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LayerVersion layer = new LayerVersion(stack, \"MyLayer\", new LayerVersionProps {\n    Code = Code.FromAsset(Join(__dirname, \"layer-code\")),\n    CompatibleRuntimes = new [] { Runtime.NODEJS_10_X },\n    License = \"Apache-2.0\",\n    Description = \"A layer to test the L2 construct\"\n});\n\n// To grant usage by other AWS accounts\nlayer.AddPermission(\"remote-account-grant\", new LayerVersionPermission { AccountId = awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nnew Function(stack, \"MyLayeredLambda\", new FunctionProps {\n    Code = new InlineCode(\"foo\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_10_X,\n    Layers = new [] { layer }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion layer = LayerVersion.Builder.create(stack, \"MyLayer\")\n        .code(Code.fromAsset(join(__dirname, \"layer-code\")))\n        .compatibleRuntimes(List.of(Runtime.NODEJS_10_X))\n        .license(\"Apache-2.0\")\n        .description(\"A layer to test the L2 construct\")\n        .build();\n\n// To grant usage by other AWS accounts\nlayer.addPermission(\"remote-account-grant\", LayerVersionPermission.builder().accountId(awsAccountId).build());\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nFunction.Builder.create(stack, \"MyLayeredLambda\")\n        .code(new InlineCode(\"foo\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_10_X)\n        .layers(List.of(layer))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 353
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.InlineCode",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionPermission",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\nconst app = new cdk.App();\n\nconst stack = new cdk.Stack(app, 'aws-cdk-layer-version-1');\n\n// Just for the example - granting to the current account is not necessary.\nconst awsAccountId = stack.account;\n\n/// !show\nconst layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 34,
        "192": 2,
        "193": 3,
        "194": 11,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "f214c7ab2e38e22c08133c0efeb43ebca17caade517aa4be86f7b770f03d1ffc"
    },
    "47e08a09fa24c12f73fb5c44dbc5f26f14d5f6343a94ddc98fbb9e79ea5ef3da": {
      "translations": {
        "python": {
          "source": "lambda_.LayerVersion(self, \"MyLayer\",\n    removal_policy=RemovalPolicy.RETAIN,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new LayerVersion(this, \"MyLayer\", new LayerVersionProps {\n    RemovalPolicy = RemovalPolicy.RETAIN,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion.Builder.create(this, \"MyLayer\")\n        .removalPolicy(RemovalPolicy.RETAIN)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 379
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "4a0d8e825b8dbc01bc626630833b556fdf86661c9493a064386a77c2518cfab4"
    },
    "77111847c9344b4f2cfdbdb9e6e0ef1ab4fbe09fcbc8f7b34a87de3865b88dd5": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    architecture=lambda_.Architecture.ARM_64\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Architecture = Architecture.ARM_64\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .architecture(Architecture.ARM_64)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  architecture: lambda.Architecture.ARM_64,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 395
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  architecture: lambda.Architecture.ARM_64,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "193": 1,
        "194": 8,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "292a3d548f1298380ff0d97825447cc4c53cdc38bbc0d355f26d5b690000348f"
    },
    "01abbccfa35e2671a7fb38c04b14664d9485f034bdc92d9db4f7bef749b4286b": {
      "translations": {
        "python": {
          "source": "lambda_.LayerVersion(self, \"MyLayer\",\n    removal_policy=RemovalPolicy.RETAIN,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    compatible_architectures=[lambda_.Architecture.X86_64, lambda_.Architecture.ARM_64]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new LayerVersion(this, \"MyLayer\", new LayerVersionProps {\n    RemovalPolicy = RemovalPolicy.RETAIN,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    CompatibleArchitectures = new [] { Architecture.X86_64, Architecture.ARM_64 }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion.Builder.create(this, \"MyLayer\")\n        .removalPolicy(RemovalPolicy.RETAIN)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .compatibleArchitectures(List.of(Architecture.X86_64, Architecture.ARM_64))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 406
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Architecture#X86_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "a79690697b57dea85bc9f416306d49dadeabb96e3a11b7c1e3f2097d07c67f20"
    },
    "61e843ddfb60bfad8fae5fa22d23a387dc15f845cf52294d0e3aede61f6353d1": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.LambdaInsightsVersion.VERSION_1_0_98_0\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    InsightsVersion = LambdaInsightsVersion.VERSION_1_0_98_0\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .insightsVersion(LambdaInsightsVersion.VERSION_1_0_98_0)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.VERSION_1_0_98_0,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 419
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion#VERSION_1_0_98_0",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.VERSION_1_0_98_0,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "193": 1,
        "194": 8,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "282c33d2f8191ee31e18a983f53b95a8626c1d8142a8d2fb00e62bc0fed829b2"
    },
    "315abcd34e29b92c623fdc386eaa70fc9caf462919254e2f09843cc4a5cdb3db": {
      "translations": {
        "python": {
          "source": "layer_arn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\"\nlambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.LambdaInsightsVersion.from_insight_version_arn(layer_arn)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "string layerArn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\";\nnew Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    InsightsVersion = LambdaInsightsVersion.FromInsightVersionArn(layerArn)\n});",
          "version": "1"
        },
        "java": {
          "source": "String layerArn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\";\nFunction.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .insightsVersion(LambdaInsightsVersion.fromInsightVersionArn(layerArn))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const layerArn = 'arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14';\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.fromInsightVersionArn(layerArn),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 430
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion#fromInsightVersionArn",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst layerArn = 'arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14';\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.fromInsightVersionArn(layerArn),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "104": 1,
        "193": 1,
        "194": 8,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "c0d7df8c5882e352be124dcce937ec5292dc840936990320939be1ab3c23cef4"
    },
    "ffc7b3d75141169598e013d7af17a0f5cc70a43e57f002d96be1c830fec420fd": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    architecture=lambda_.Architecture.ARM_64,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.LambdaInsightsVersion.VERSION_1_0_119_0\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Architecture = Architecture.ARM_64,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    InsightsVersion = LambdaInsightsVersion.VERSION_1_0_119_0\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .architecture(Architecture.ARM_64)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .insightsVersion(LambdaInsightsVersion.VERSION_1_0_119_0)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  architecture: lambda.Architecture.ARM_64,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.VERSION_1_0_119_0,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 443
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion#VERSION_1_0_119_0",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  architecture: lambda.Architecture.ARM_64,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.VERSION_1_0_119_0,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 22,
        "104": 1,
        "193": 1,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "9b951a64b911af5839bc914cc76e42b9cdd8d09015364b07f676d9398b08175e"
    },
    "06a8f853f52e2226bcd156fe473ebd9e3386cf1984a6ea0f4d20f1d9ba37fed8": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as targets\n\n# fn: lambda.Function\n\nrule = events.Rule(self, \"Schedule Rule\",\n    schedule=events.Schedule.cron(minute=\"0\", hour=\"4\")\n)\nrule.add_target(targets.LambdaFunction(fn))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\n\nFunction fn;\n\nRule rule = new Rule(this, \"Schedule Rule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" })\n});\nrule.AddTarget(new LambdaFunction(fn));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nFunction fn;\n\nRule rule = Rule.Builder.create(this, \"Schedule Rule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .build();\nrule.addTarget(new LambdaFunction(fn));",
          "version": "1"
        },
        "$": {
          "source": "import * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const fn: lambda.Function;\nconst rule = new events.Rule(this, 'Schedule Rule', {\n schedule: events.Schedule.cron({ minute: '0', hour: '4' }),\n});\nrule.addTarget(new targets.LambdaFunction(fn));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 458
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst rule = new events.Rule(this, 'Schedule Rule', {\n schedule: events.Schedule.cron({ minute: '0', hour: '4' }),\n});\nrule.addTarget(new targets.LambdaFunction(fn));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "adc0ac4b74424afba2882deb94c6ba3055dfb596cf4656c52bcb555abf051273"
    },
    "7ce2d2437f02397aa1005231e23b0e07f05060483f4688acae1740f826ae2369": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda_event_sources as eventsources\nimport aws_cdk.aws_sqs as sqs\n\n# fn: lambda.Function\n\nqueue = sqs.Queue(self, \"Queue\")\nfn.add_event_source(eventsources.SqsEventSource(queue))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda.EventSources;\nusing Amazon.CDK.AWS.SQS;\n\nFunction fn;\n\nQueue queue = new Queue(this, \"Queue\");\nfn.AddEventSource(new SqsEventSource(queue));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.eventsources.*;\nimport software.amazon.awscdk.services.sqs.*;\n\nFunction fn;\n\nQueue queue = new Queue(this, \"Queue\");\nfn.addEventSource(new SqsEventSource(queue));",
          "version": "1"
        },
        "$": {
          "source": "import * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const fn: lambda.Function;\nconst queue = new sqs.Queue(this, 'Queue');\nfn.addEventSource(new eventsources.SqsEventSource(queue));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 484
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda-event-sources.SqsEventSource",
        "@aws-cdk/aws-lambda.FunctionBase#addEventSource",
        "@aws-cdk/aws-lambda.IEventSource",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst queue = new sqs.Queue(this, 'Queue');\nfn.addEventSource(new eventsources.SqsEventSource(queue));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "8f11606bfdc1a9e2cd9acbec4b7149ef5752da9a5d0c8de9465c378140d07634"
    },
    "c300e2cf1561e835e3998d27f763e33de1b3369f8085e831e0b2c963f9395168": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda_event_sources as eventsources\nimport aws_cdk.aws_s3 as s3\n\n# fn: lambda.Function\n\nbucket = s3.Bucket(self, \"Bucket\")\nfn.add_event_source(eventsources.S3EventSource(bucket,\n    events=[s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED],\n    filters=[s3.NotificationKeyFilter(prefix=\"subdir/\")]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda.EventSources;\nusing Amazon.CDK.AWS.S3;\n\nFunction fn;\n\nBucket bucket = new Bucket(this, \"Bucket\");\nfn.AddEventSource(new S3EventSource(bucket, new S3EventSourceProps {\n    Events = new [] { EventType.OBJECT_CREATED, EventType.OBJECT_REMOVED },\n    Filters = new [] { new NotificationKeyFilter { Prefix = \"subdir/\" } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.eventsources.*;\nimport software.amazon.awscdk.services.s3.*;\n\nFunction fn;\n\nBucket bucket = new Bucket(this, \"Bucket\");\nfn.addEventSource(S3EventSource.Builder.create(bucket)\n        .events(List.of(EventType.OBJECT_CREATED, EventType.OBJECT_REMOVED))\n        .filters(List.of(NotificationKeyFilter.builder().prefix(\"subdir/\").build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const fn: lambda.Function;\nconst bucket = new s3.Bucket(this, 'Bucket');\nfn.addEventSource(new eventsources.S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ] // optional\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 495
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda-event-sources.S3EventSource",
        "@aws-cdk/aws-lambda-event-sources.S3EventSourceProps",
        "@aws-cdk/aws-lambda.FunctionBase#addEventSource",
        "@aws-cdk/aws-lambda.IEventSource",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_CREATED",
        "@aws-cdk/aws-s3.EventType#OBJECT_REMOVED",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nfn.addEventSource(new eventsources.S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ] // optional\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bafc6f478ad25b21642f0fd75125631cfebb98be20ce0799ea2ff5fe2990efc9"
    },
    "699e8d7f8caa3f41e0592fb4ec0b794f298f925bb1389dfd03b58db8733c290a": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function.from_function_arn(self, \"Function\", \"arn:aws:lambda:us-east-1:123456789012:function:MyFn\")",
          "version": "2"
        },
        "csharp": {
          "source": "IFunction fn = Function.FromFunctionArn(this, \"Function\", \"arn:aws:lambda:us-east-1:123456789012:function:MyFn\");",
          "version": "1"
        },
        "java": {
          "source": "IFunction fn = Function.fromFunctionArn(this, \"Function\", \"arn:aws:lambda:us-east-1:123456789012:function:MyFn\");",
          "version": "1"
        },
        "$": {
          "source": "const fn = lambda.Function.fromFunctionArn(\n  this,\n  'Function',\n  'arn:aws:lambda:us-east-1:123456789012:function:MyFn',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 513
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#fromFunctionArn",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = lambda.Function.fromFunctionArn(\n  this,\n  'Function',\n  'arn:aws:lambda:us-east-1:123456789012:function:MyFn',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "de1e679175f496f4aca5e0257add675993f2d5c97bfd77aea99214cf0ec3c6a1"
    },
    "53ef13bae4dd0d8a7ef3f074f9c2d349c7a4a62efd668c34e95c925e83f4f9e1": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function.from_function_attributes(self, \"Function\",\n    function_arn=\"arn:aws:lambda:us-east-1:123456789012:function:MyFn\",\n    # The following are optional properties for specific use cases and should be used with caution:\n\n    # Use Case: imported function is in the same account as the stack. This tells the CDK that it\n    # can modify the function's permissions.\n    same_environment=True,\n\n    # Use Case: imported function is in a different account and user commits to ensuring that the\n    # imported function has the correct permissions outside the CDK.\n    skip_permissions=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IFunction fn = Function.FromFunctionAttributes(this, \"Function\", new FunctionAttributes {\n    FunctionArn = \"arn:aws:lambda:us-east-1:123456789012:function:MyFn\",\n    // The following are optional properties for specific use cases and should be used with caution:\n\n    // Use Case: imported function is in the same account as the stack. This tells the CDK that it\n    // can modify the function's permissions.\n    SameEnvironment = true,\n\n    // Use Case: imported function is in a different account and user commits to ensuring that the\n    // imported function has the correct permissions outside the CDK.\n    SkipPermissions = true\n});",
          "version": "1"
        },
        "java": {
          "source": "IFunction fn = Function.fromFunctionAttributes(this, \"Function\", FunctionAttributes.builder()\n        .functionArn(\"arn:aws:lambda:us-east-1:123456789012:function:MyFn\")\n        // The following are optional properties for specific use cases and should be used with caution:\n\n        // Use Case: imported function is in the same account as the stack. This tells the CDK that it\n        // can modify the function's permissions.\n        .sameEnvironment(true)\n\n        // Use Case: imported function is in a different account and user commits to ensuring that the\n        // imported function has the correct permissions outside the CDK.\n        .skipPermissions(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const fn = lambda.Function.fromFunctionAttributes(this, 'Function', {\n  functionArn: 'arn:aws:lambda:us-east-1:123456789012:function:MyFn',\n  // The following are optional properties for specific use cases and should be used with caution:\n\n  // Use Case: imported function is in the same account as the stack. This tells the CDK that it\n  // can modify the function's permissions.\n  sameEnvironment: true,\n\n  // Use Case: imported function is in a different account and user commits to ensuring that the\n  // imported function has the correct permissions outside the CDK.\n  skipPermissions: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 523
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#fromFunctionAttributes",
        "@aws-cdk/aws-lambda.FunctionAttributes",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = lambda.Function.fromFunctionAttributes(this, 'Function', {\n  functionArn: 'arn:aws:lambda:us-east-1:123456789012:function:MyFn',\n  // The following are optional properties for specific use cases and should be used with caution:\n\n  // Use Case: imported function is in the same account as the stack. This tells the CDK that it\n  // can modify the function's permissions.\n  sameEnvironment: true,\n\n  // Use Case: imported function is in a different account and user commits to ensuring that the\n  // imported function has the correct permissions outside the CDK.\n  skipPermissions: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "106": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "a0c7e62a7699cb5f277fc9d60d2c0fd95cd5cd15c7c99481f7a00720055d19b3"
    },
    "b06701f3ec291461ea45678402385f9994cbc271822fadc41825a9c2cf9d3cd8": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function.from_function_name(self, \"Function\", \"MyFn\")",
          "version": "2"
        },
        "csharp": {
          "source": "IFunction fn = Function.FromFunctionName(this, \"Function\", \"MyFn\");",
          "version": "1"
        },
        "java": {
          "source": "IFunction fn = Function.fromFunctionName(this, \"Function\", \"MyFn\");",
          "version": "1"
        },
        "$": {
          "source": "const fn = lambda.Function.fromFunctionName(this, 'Function', 'MyFn');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 542
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#fromFunctionName",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = lambda.Function.fromFunctionName(this, 'Function', 'MyFn');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "682a99f645569a350e18eed22ab4d642304702b572c7d4e0318a244db9ecebb5"
    },
    "5530989c64aa6a91436209ea7e72de178f7cee48527c8164b9c62c28cc418e21": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    dead_letter_queue_enabled=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    DeadLetterQueueEnabled = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"))\n        .deadLetterQueueEnabled(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  deadLetterQueueEnabled: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 552
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  deadLetterQueueEnabled: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "8e87103ade018bbeb261f225d615dcb10e8f08338ec8684392de4863bd05ad1a"
    },
    "f0ce2b656496c6cbec7efa041f2690a690478ddd0a6527659574e55c01f76cef": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_sqs as sqs\n\n\ndlq = sqs.Queue(self, \"DLQ\")\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    dead_letter_queue=dlq\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SQS;\n\n\nQueue dlq = new Queue(this, \"DLQ\");\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    DeadLetterQueue = dlq\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.sqs.*;\n\n\nQueue dlq = new Queue(this, \"DLQ\");\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"))\n        .deadLetterQueue(dlq)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as sqs from '@aws-cdk/aws-sqs';\n\nconst dlq = new sqs.Queue(this, 'DLQ');\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  deadLetterQueue: dlq,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 563
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as sqs from '@aws-cdk/aws-sqs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst dlq = new sqs.Queue(this, 'DLQ');\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  deadLetterQueue: dlq,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "3f012ad16b60c2418ea6ccb1675f456810a5ae345fdcf6728501d3126dbef2ff"
    },
    "4d116a3c7bf08c24709ae6d2fdd47f53dcacf3d2778058771a2473641d592126": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_sns as sns\n\n\ndlt = sns.Topic(self, \"DLQ\")\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"// your code here\"),\n    dead_letter_topic=dlt\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SNS;\n\n\nTopic dlt = new Topic(this, \"DLQ\");\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"// your code here\"),\n    DeadLetterTopic = dlt\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.sns.*;\n\n\nTopic dlt = new Topic(this, \"DLQ\");\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"// your code here\"))\n        .deadLetterTopic(dlt)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as sns from '@aws-cdk/aws-sns';\n\nconst dlt = new sns.Topic(this, 'DLQ');\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('// your code here'),\n  deadLetterTopic: dlt,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 577
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as sns from '@aws-cdk/aws-sns';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst dlt = new sns.Topic(this, 'DLQ');\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('// your code here'),\n  deadLetterTopic: dlt,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "60930643c8222059e462db20a47d90a5d86aaf0db5ecb230575db1d57574e629"
    },
    "3f8ae0208a8357a1726348c5f0a4d2de285ace98b712dd56e2fbb0a11ff5ab9e": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    tracing=lambda_.Tracing.ACTIVE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    Tracing = Tracing.ACTIVE\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"))\n        .tracing(Tracing.ACTIVE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  tracing: lambda.Tracing.ACTIVE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 594
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Tracing",
        "@aws-cdk/aws-lambda.Tracing#ACTIVE",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  tracing: lambda.Tracing.ACTIVE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "104": 1,
        "193": 1,
        "194": 7,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "848a46206b94093782ac94599502f26864f20b0dbb9d2757d9629ed9ef7fc142"
    },
    "a56d0a5e17b987476dacdcb67f08d1fd152eb99b5280e83671938407d65b2d3c": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.PYTHON_3_6,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(\"lambda-handler\"),\n    profiling=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.PYTHON_3_6,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(\"lambda-handler\"),\n    Profiling = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.PYTHON_3_6)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(\"lambda-handler\"))\n        .profiling(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_6,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset('lambda-handler'),\n  profiling: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 611
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_6",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_6,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset('lambda-handler'),\n  profiling: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "9b83181c44d1acb8cc5512d3384caf733869b1f0c39c5922afb4ed9343444c9e"
    },
    "5b97b945da88c4dd7ef5466e8733a1959f174b5fd9f3649cc2ad1a2f8dc60549": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    reserved_concurrent_executions=100\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    ReservedConcurrentExecutions = 100\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"))\n        .reservedConcurrentExecutions(100)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  reservedConcurrentExecutions: 100,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 629
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  reservedConcurrentExecutions: 100,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 13,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "8e87103ade018bbeb261f225d615dcb10e8f08338ec8684392de4863bd05ad1a"
    },
    "ace5233c7cc05789c1b72f4a254a5359f8b9fae3e91f074b5d9814f593af1212": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn: lambda.Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 645
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "0ea66cd73350dd04fa60fb95f619ffa144703b4f32f4ea774929d05b574b59ad"
    },
    "058b0cd0b78a6dc09b2f789c9d4f64dff2acd90c859b2c29df1f875137c504d7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_applicationautoscaling as appscaling\nimport aws_cdk.core as cdk\nimport aws_cdk.aws_lambda as lambda_\n\n#\n# Stack verification steps:\n# aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n# has a minCapacity of 3 and maxCapacity of 50\n#\nclass TestStack(cdk.Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        fn = lambda_.Function(self, \"MyLambda\",\n            code=lambda_.InlineCode(\"exports.handler = async () => { console.log('hello world'); };\"),\n            handler=\"index.handler\",\n            runtime=lambda_.Runtime.NODEJS_10_X\n        )\n\n        version = fn.current_version\n\n        alias = lambda_.Alias(self, \"Alias\",\n            alias_name=\"prod\",\n            version=version\n        )\n\n        scaling_target = alias.add_auto_scaling(min_capacity=3, max_capacity=50)\n\n        scaling_target.scale_on_utilization(\n            utilization_target=0.5\n        )\n\n        scaling_target.scale_on_schedule(\"ScaleUpInTheMorning\",\n            schedule=appscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n            min_capacity=20\n        )\n\n        scaling_target.scale_on_schedule(\"ScaleDownAtNight\",\n            schedule=appscaling.Schedule.cron(hour=\"20\", minute=\"0\"),\n            max_capacity=20\n        )\n\n        cdk.CfnOutput(self, \"FunctionName\",\n            value=fn.function_name\n        )\n\napp = cdk.App()\n\nTestStack(app, \"aws-lambda-autoscaling\")\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ApplicationAutoScaling;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.Lambda;\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\nclass TestStack : Stack\n{\n    public TestStack(App scope, string id) : base(scope, id)\n    {\n\n        Function fn = new Function(this, \"MyLambda\", new FunctionProps {\n            Code = new InlineCode(\"exports.handler = async () => { console.log('hello world'); };\"),\n            Handler = \"index.handler\",\n            Runtime = Runtime.NODEJS_10_X\n        });\n\n        Version version = fn.CurrentVersion;\n\n        Alias alias = new Alias(this, \"Alias\", new AliasProps {\n            AliasName = \"prod\",\n            Version = version\n        });\n\n        IScalableFunctionAttribute scalingTarget = alias.AddAutoScaling(new AutoScalingOptions { MinCapacity = 3, MaxCapacity = 50 });\n\n        scalingTarget.ScaleOnUtilization(new UtilizationScalingOptions {\n            UtilizationTarget = 0.5\n        });\n\n        scalingTarget.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n            Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n            MinCapacity = 20\n        });\n\n        scalingTarget.ScaleOnSchedule(\"ScaleDownAtNight\", new ScalingSchedule {\n            Schedule = Schedule.Cron(new CronOptions { Hour = \"20\", Minute = \"0\" }),\n            MaxCapacity = 20\n        });\n\n        new CfnOutput(this, \"FunctionName\", new CfnOutputProps {\n            Value = fn.FunctionName\n        });\n    }\n}\n\nApp app = new App();\n\nnew TestStack(app, \"aws-lambda-autoscaling\");\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.applicationautoscaling.*;\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.lambda.*;\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\npublic class TestStack extends Stack {\n    public TestStack(App scope, String id) {\n        super(scope, id);\n\n        Function fn = Function.Builder.create(this, \"MyLambda\")\n                .code(new InlineCode(\"exports.handler = async () => { console.log('hello world'); };\"))\n                .handler(\"index.handler\")\n                .runtime(Runtime.NODEJS_10_X)\n                .build();\n\n        Version version = fn.getCurrentVersion();\n\n        Alias alias = Alias.Builder.create(this, \"Alias\")\n                .aliasName(\"prod\")\n                .version(version)\n                .build();\n\n        IScalableFunctionAttribute scalingTarget = alias.addAutoScaling(AutoScalingOptions.builder().minCapacity(3).maxCapacity(50).build());\n\n        scalingTarget.scaleOnUtilization(UtilizationScalingOptions.builder()\n                .utilizationTarget(0.5)\n                .build());\n\n        scalingTarget.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n                .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n                .minCapacity(20)\n                .build());\n\n        scalingTarget.scaleOnSchedule(\"ScaleDownAtNight\", ScalingSchedule.builder()\n                .schedule(Schedule.cron(CronOptions.builder().hour(\"20\").minute(\"0\").build()))\n                .maxCapacity(20)\n                .build());\n\n        CfnOutput.Builder.create(this, \"FunctionName\")\n                .value(fn.getFunctionName())\n                .build();\n    }\n}\n\nApp app = new App();\n\nnew TestStack(app, \"aws-lambda-autoscaling\");\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const fn = new lambda.Function(this, 'MyLambda', {\n      code: new lambda.InlineCode('exports.handler = async () => { console.log(\\'hello world\\'); };'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_10_X,\n    });\n\n    const version = fn.currentVersion;\n\n    const alias = new lambda.Alias(this, 'Alias', {\n      aliasName: 'prod',\n      version,\n    });\n\n    const scalingTarget = alias.addAutoScaling({ minCapacity: 3, maxCapacity: 50 });\n\n    scalingTarget.scaleOnUtilization({\n      utilizationTarget: 0.5,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleUpInTheMorning', {\n      schedule: appscaling.Schedule.cron({ hour: '8', minute: '0' }),\n      minCapacity: 20,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleDownAtNight', {\n      schedule: appscaling.Schedule.cron({ hour: '20', minute: '0' }),\n      maxCapacity: 20,\n    });\n\n    new cdk.CfnOutput(this, 'FunctionName', {\n      value: fn.functionName,\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'aws-lambda-autoscaling');\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 669
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.CronOptions",
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#functionName",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.InlineCode",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions",
        "@aws-cdk/aws-lambda.Version",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const fn = new lambda.Function(this, 'MyLambda', {\n      code: new lambda.InlineCode('exports.handler = async () => { console.log(\\'hello world\\'); };'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_10_X,\n    });\n\n    const version = fn.currentVersion;\n\n    const alias = new lambda.Alias(this, 'Alias', {\n      aliasName: 'prod',\n      version,\n    });\n\n    const scalingTarget = alias.addAutoScaling({ minCapacity: 3, maxCapacity: 50 });\n\n    scalingTarget.scaleOnUtilization({\n      utilizationTarget: 0.5,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleUpInTheMorning', {\n      schedule: appscaling.Schedule.cron({ hour: '8', minute: '0' }),\n      minCapacity: 20,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleDownAtNight', {\n      schedule: appscaling.Schedule.cron({ hour: '20', minute: '0' }),\n      maxCapacity: 20,\n    });\n\n    new cdk.CfnOutput(this, 'FunctionName', {\n      value: fn.functionName,\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'aws-lambda-autoscaling');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 16,
        "75": 69,
        "102": 1,
        "104": 3,
        "143": 1,
        "153": 1,
        "156": 2,
        "162": 1,
        "169": 1,
        "193": 9,
        "194": 19,
        "196": 8,
        "197": 6,
        "216": 1,
        "223": 1,
        "225": 5,
        "226": 7,
        "242": 5,
        "243": 5,
        "245": 1,
        "254": 3,
        "255": 3,
        "256": 3,
        "279": 1,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "37d30760965cdd7d9f23105ec7636600d9984346950dd88bfc8988e76fdbce2a"
    },
    "0613cf9674fbe6cb00bf2dabb6a2e13114e4ce9523122a6d9b3c29a36ffcf678": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new VPC\nvpc = ec2.Vpc(self, \"VPC\")\n\n# create a new Amazon EFS filesystem\nfile_system = efs.FileSystem(self, \"Efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"AccessPoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    create_acl=efs.Acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the POSIX identity so lambda function will access with this identity\n    posix_user=efs.PosixUser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.Function(self, \"MyLambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.FileSystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EFS;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = new FileSystem(this, \"Efs\", new FileSystemProps { Vpc = vpc });\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.AddAccessPoint(\"AccessPoint\", new AccessPointOptions {\n    // set /export/lambda as the root of the access point\n    Path = \"/export/lambda\",\n    // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    CreateAcl = new Acl {\n        OwnerUid = \"1001\",\n        OwnerGid = \"1001\",\n        Permissions = \"750\"\n    },\n    // enforce the POSIX identity so lambda function will access with this identity\n    PosixUser = new PosixUser {\n        Uid = \"1001\",\n        Gid = \"1001\"\n    }\n});\n\nFunction fn = new Function(this, \"MyLambda\", new FunctionProps {\n    // mount the access point to /mnt/msg in the lambda runtime environment\n    Filesystem = FileSystem.FromEfsAccessPoint(accessPoint, \"/mnt/msg\"),\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.efs.*;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = FileSystem.Builder.create(this, \"Efs\").vpc(vpc).build();\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.addAccessPoint(\"AccessPoint\", AccessPointOptions.builder()\n        // set /export/lambda as the root of the access point\n        .path(\"/export/lambda\")\n        // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n        .createAcl(Acl.builder()\n                .ownerUid(\"1001\")\n                .ownerGid(\"1001\")\n                .permissions(\"750\")\n                .build())\n        // enforce the POSIX identity so lambda function will access with this identity\n        .posixUser(PosixUser.builder()\n                .uid(\"1001\")\n                .gid(\"1001\")\n                .build())\n        .build());\n\nFunction fn = Function.Builder.create(this, \"MyLambda\")\n        // mount the access point to /mnt/msg in the lambda runtime environment\n        .filesystem(FileSystem.fromEfsAccessPoint(accessPoint, \"/mnt/msg\"))\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 757
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPointOptions",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.IAccessPoint",
        "@aws-cdk/aws-efs.PosixUser",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FileSystem#fromEfsAccessPoint",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 41,
        "104": 3,
        "193": 5,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "c3e3c63faab2ca6cec286563f3810d3e779fe15c7101c0ab9177ae22114bcea4"
    },
    "436f966bf6ba90a9b41b2254430721c127c8912403ef5ab749d5cfdcddc1ef23": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"my-python-handler\"),\n        bundling=BundlingOptions(\n            image=lambda_.Runtime.PYTHON_3_9.bundling_image,\n            command=[\"bash\", \"-c\", \"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\"\n            ]\n        )\n    ),\n    runtime=lambda_.Runtime.PYTHON_3_9,\n    handler=\"index.handler\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromAsset(Join(__dirname, \"my-python-handler\"), new AssetOptions {\n        Bundling = new BundlingOptions {\n            Image = Runtime.PYTHON_3_9.BundlingImage,\n            Command = new [] { \"bash\", \"-c\", \"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\" }\n        }\n    }),\n    Runtime = Runtime.PYTHON_3_9,\n    Handler = \"index.handler\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"Function\")\n        .code(Code.fromAsset(join(__dirname, \"my-python-handler\"), AssetOptions.builder()\n                .bundling(BundlingOptions.builder()\n                        .image(Runtime.PYTHON_3_9.getBundlingImage())\n                        .command(List.of(\"bash\", \"-c\", \"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\"))\n                        .build())\n                .build()))\n        .runtime(Runtime.PYTHON_3_9)\n        .handler(\"index.handler\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'my-python-handler'), {\n    bundling: {\n      image: lambda.Runtime.PYTHON_3_9.bundlingImage,\n      command: [\n        'bash', '-c',\n        'pip install -r requirements.txt -t /asset-output && cp -au . /asset-output'\n      ],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 818
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_9",
        "@aws-cdk/aws-lambda.Runtime#bundlingImage",
        "@aws-cdk/aws-s3-assets.AssetOptions",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerImage",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'my-python-handler'), {\n    bundling: {\n      image: lambda.Runtime.PYTHON_3_9.bundlingImage,\n      command: [\n        'bash', '-c',\n        'pip install -r requirements.txt -t /asset-output && cp -au . /asset-output'\n      ],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 21,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "a81e7786dfcdafff03a127fd110f69d206618fa6d0629fa71aa649c02438a748"
    },
    "65fc65716b52cda7d1348dea823694cb7d50007af7b05452348681177d6ed8a6": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_asset(\"/path/to/handler\",\n        bundling=BundlingOptions(\n            image=DockerImage.from_build(\"/path/to/dir/with/DockerFile\",\n                build_args={\n                    \"ARG1\": \"value1\"\n                }\n            ),\n            command=[\"my\", \"cool\", \"command\"]\n        )\n    ),\n    runtime=lambda_.Runtime.PYTHON_3_9,\n    handler=\"index.handler\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromAsset(\"/path/to/handler\", new AssetOptions {\n        Bundling = new BundlingOptions {\n            Image = DockerImage.FromBuild(\"/path/to/dir/with/DockerFile\", new DockerBuildOptions {\n                BuildArgs = new Dictionary<string, string> {\n                    { \"ARG1\", \"value1\" }\n                }\n            }),\n            Command = new [] { \"my\", \"cool\", \"command\" }\n        }\n    }),\n    Runtime = Runtime.PYTHON_3_9,\n    Handler = \"index.handler\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"Function\")\n        .code(Code.fromAsset(\"/path/to/handler\", AssetOptions.builder()\n                .bundling(BundlingOptions.builder()\n                        .image(DockerImage.fromBuild(\"/path/to/dir/with/DockerFile\", DockerBuildOptions.builder()\n                                .buildArgs(Map.of(\n                                        \"ARG1\", \"value1\"))\n                                .build()))\n                        .command(List.of(\"my\", \"cool\", \"command\"))\n                        .build())\n                .build()))\n        .runtime(Runtime.PYTHON_3_9)\n        .handler(\"index.handler\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset('/path/to/handler', {\n    bundling: {\n      image: DockerImage.fromBuild('/path/to/dir/with/DockerFile', {\n        buildArgs: {\n          ARG1: 'value1',\n        },\n      }),\n      command: ['my', 'cool', 'command'],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 839
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_9",
        "@aws-cdk/aws-s3-assets.AssetOptions",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerBuildOptions",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset('/path/to/handler', {\n    bundling: {\n      image: DockerImage.fromBuild('/path/to/dir/with/DockerFile', {\n        buildArgs: {\n          ARG1: 'value1',\n        },\n      }),\n      command: ['my', 'cool', 'command'],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 18,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 6,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 8
      },
      "fqnsFingerprint": "afd85eb605459801eb2493949ca7fe3e0f407a2e3120d93fa7a684fbb7d35352"
    },
    "78084157d4a4d8efc93c77e9878a2242eba8703a03c52d1e19bb9973e91c44e7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_signer as signer\n\n\nsigning_profile = signer.SigningProfile(self, \"SigningProfile\",\n    platform=signer.Platform.AWS_LAMBDA_SHA384_ECDSA\n)\n\ncode_signing_config = lambda_.CodeSigningConfig(self, \"CodeSigningConfig\",\n    signing_profiles=[signing_profile]\n)\n\nlambda_.Function(self, \"Function\",\n    code_signing_config=code_signing_config,\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Signer;\n\n\nSigningProfile signingProfile = new SigningProfile(this, \"SigningProfile\", new SigningProfileProps {\n    Platform = Platform.AWS_LAMBDA_SHA384_ECDSA\n});\n\nCodeSigningConfig codeSigningConfig = new CodeSigningConfig(this, \"CodeSigningConfig\", new CodeSigningConfigProps {\n    SigningProfiles = new [] { signingProfile }\n});\n\nnew Function(this, \"Function\", new FunctionProps {\n    CodeSigningConfig = codeSigningConfig,\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.signer.*;\n\n\nSigningProfile signingProfile = SigningProfile.Builder.create(this, \"SigningProfile\")\n        .platform(Platform.AWS_LAMBDA_SHA384_ECDSA)\n        .build();\n\nCodeSigningConfig codeSigningConfig = CodeSigningConfig.Builder.create(this, \"CodeSigningConfig\")\n        .signingProfiles(List.of(signingProfile))\n        .build();\n\nFunction.Builder.create(this, \"Function\")\n        .codeSigningConfig(codeSigningConfig)\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as signer from '@aws-cdk/aws-signer';\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 870
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.CodeSigningConfig",
        "@aws-cdk/aws-lambda.CodeSigningConfigProps",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-signer.Platform",
        "@aws-cdk/aws-signer.Platform#AWS_LAMBDA_SHA384_ECDSA",
        "@aws-cdk/aws-signer.SigningProfile",
        "@aws-cdk/aws-signer.SigningProfileProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as signer from '@aws-cdk/aws-signer';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6f13f17c57d841f51c24088e309fa7dcf8cf1c92c148a413f90a6261fd34a27d"
    },
    "fb50a91c2248adb39e0527ffebb02cca22af8f9f425da333f7b2e8d50d133368": {
      "translations": {
        "python": {
          "source": "lambda_code = lambda_.Code.from_cfn_parameters()\nfunc = lambda_.Function(self, \"Lambda\",\n    code=lambda_code,\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n# used to make sure each CDK synthesis produces a different Version\nversion = func.add_version(\"NewVersion\")\nalias = lambda_.Alias(self, \"LambdaAlias\",\n    alias_name=\"Prod\",\n    version=version\n)\n\ncodedeploy.LambdaDeploymentGroup(self, \"DeploymentGroup\",\n    alias=alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CfnParametersCode lambdaCode = Code.FromCfnParameters();\nFunction func = new Function(this, \"Lambda\", new FunctionProps {\n    Code = lambdaCode,\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n// used to make sure each CDK synthesis produces a different Version\nVersion version = func.AddVersion(\"NewVersion\");\nAlias alias = new Alias(this, \"LambdaAlias\", new AliasProps {\n    AliasName = \"Prod\",\n    Version = version\n});\n\nnew LambdaDeploymentGroup(this, \"DeploymentGroup\", new LambdaDeploymentGroupProps {\n    Alias = alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnParametersCode lambdaCode = Code.fromCfnParameters();\nFunction func = Function.Builder.create(this, \"Lambda\")\n        .code(lambdaCode)\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n// used to make sure each CDK synthesis produces a different Version\nVersion version = func.addVersion(\"NewVersion\");\nAlias alias = Alias.Builder.create(this, \"LambdaAlias\")\n        .aliasName(\"Prod\")\n        .version(version)\n        .build();\n\nLambdaDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .alias(alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const lambdaCode = lambda.Code.fromCfnParameters();\nconst func = new lambda.Function(this, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n// used to make sure each CDK synthesis produces a different Version\nconst version = func.addVersion('NewVersion');\nconst alias = new lambda.Alias(this, 'LambdaAlias', {\n  aliasName: 'Prod',\n  version,\n});\n\nnew codedeploy.LambdaDeploymentGroup(this, 'DeploymentGroup', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Alias"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.CfnParametersCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromCfnParameters",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Version",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaCode = lambda.Code.fromCfnParameters();\nconst func = new lambda.Function(this, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n// used to make sure each CDK synthesis produces a different Version\nconst version = func.addVersion('NewVersion');\nconst alias = new lambda.Alias(this, 'LambdaAlias', {\n  aliasName: 'Prod',\n  version,\n});\n\nnew codedeploy.LambdaDeploymentGroup(this, 'DeploymentGroup', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 29,
        "104": 3,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2
      },
      "fqnsFingerprint": "63ba1a39b0dd4018fe6cfb2921cbdee9fd6ca362c19a815fd9dc39bfdebc6534"
    },
    "56372299f5f812b98baa0efc74f87500309c401fb64ed4c1b28e322df632c358": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\n# version: lambda.Version\n\nalias_attributes = lambda.AliasAttributes(\n    alias_name=\"aliasName\",\n    alias_version=version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nVersion version;\n\nAliasAttributes aliasAttributes = new AliasAttributes {\n    AliasName = \"aliasName\",\n    AliasVersion = version\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nVersion version;\n\nAliasAttributes aliasAttributes = AliasAttributes.builder()\n        .aliasName(\"aliasName\")\n        .aliasVersion(version)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const version: lambda.Version;\nconst aliasAttributes: lambda.AliasAttributes = {\n  aliasName: 'aliasName',\n  aliasVersion: version,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.AliasAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.AliasAttributes",
        "@aws-cdk/aws-lambda.IVersion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const version: lambda.Version;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aliasAttributes: lambda.AliasAttributes = {\n  aliasName: 'aliasName',\n  aliasVersion: version,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "93d9a92e31cf3c7bb70101137cf1789dbe8497c8484e375d27bff1c87a60470e"
    },
    "0ecca07f0de11f7b41c3fff238698d0df2c435d9a5065994005da7b506bc2dc8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# destination: lambda.IDestination\n# version: lambda.Version\n\nalias_options = lambda.AliasOptions(\n    additional_versions=[lambda.VersionWeight(\n        version=version,\n        weight=123\n    )],\n    description=\"description\",\n    max_event_age=cdk.Duration.minutes(30),\n    on_failure=destination,\n    on_success=destination,\n    provisioned_concurrent_executions=123,\n    retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nIDestination destination;\nVersion version;\nAliasOptions aliasOptions = new AliasOptions {\n    AdditionalVersions = new [] { new VersionWeight {\n        Version = version,\n        Weight = 123\n    } },\n    Description = \"description\",\n    MaxEventAge = Duration.Minutes(30),\n    OnFailure = destination,\n    OnSuccess = destination,\n    ProvisionedConcurrentExecutions = 123,\n    RetryAttempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nIDestination destination;\nVersion version;\n\nAliasOptions aliasOptions = AliasOptions.builder()\n        .additionalVersions(List.of(VersionWeight.builder()\n                .version(version)\n                .weight(123)\n                .build()))\n        .description(\"description\")\n        .maxEventAge(Duration.minutes(30))\n        .onFailure(destination)\n        .onSuccess(destination)\n        .provisionedConcurrentExecutions(123)\n        .retryAttempts(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const destination: lambda.IDestination;\ndeclare const version: lambda.Version;\nconst aliasOptions: lambda.AliasOptions = {\n  additionalVersions: [{\n    version: version,\n    weight: 123,\n  }],\n  description: 'description',\n  maxEventAge: cdk.Duration.minutes(30),\n  onFailure: destination,\n  onSuccess: destination,\n  provisionedConcurrentExecutions: 123,\n  retryAttempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.AliasOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.AliasOptions",
        "@aws-cdk/aws-lambda.IDestination",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const destination: lambda.IDestination;\ndeclare const version: lambda.Version;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aliasOptions: lambda.AliasOptions = {\n  additionalVersions: [{\n    version: version,\n    weight: 123,\n  }],\n  description: 'description',\n  maxEventAge: cdk.Duration.minutes(30),\n  onFailure: destination,\n  onSuccess: destination,\n  provisionedConcurrentExecutions: 123,\n  retryAttempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 3,
        "75": 26,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "1cfff19b2ef8d5133885e763167520fb764464596acd6ab42107754f867a44ba"
    },
    "b507c6a7c3afe9a2f72059832e520478e0dcea1b82f7649c96648f1600ee6483": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn: lambda.Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.AliasProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "0ea66cd73350dd04fa60fb95f619ffa144703b4f32f4ea774929d05b574b59ad"
    },
    "6a9a990447f685ee660672e1576645f73bc5ddfd1c50276d261ba2d618d85bef": {
      "translations": {
        "python": {
          "source": "lambda_.LayerVersion(self, \"MyLayer\",\n    removal_policy=RemovalPolicy.RETAIN,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    compatible_architectures=[lambda_.Architecture.X86_64, lambda_.Architecture.ARM_64]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new LayerVersion(this, \"MyLayer\", new LayerVersionProps {\n    RemovalPolicy = RemovalPolicy.RETAIN,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    CompatibleArchitectures = new [] { Architecture.X86_64, Architecture.ARM_64 }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion.Builder.create(this, \"MyLayer\")\n        .removalPolicy(RemovalPolicy.RETAIN)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .compatibleArchitectures(List.of(Architecture.X86_64, Architecture.ARM_64))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Architecture"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Architecture#X86_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "a79690697b57dea85bc9f416306d49dadeabb96e3a11b7c1e3f2097d07c67f20"
    },
    "fe0066d4b3c81b48f43aeac2fd5751eb113322a6ad1767d7355a200ab067ca0d": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer\n\n#\n# Stack verification steps:\n# * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n#\n\napp = App()\nstack = Stack(app, \"TokenAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.token-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = TokenAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.token-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = new TokenAuthorizer(stack, \"MyAuthorizer\", new TokenAuthorizerProps {\n    Handler = authorizerFn\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.TokenAuthorizer;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.token-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = TokenAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.AssetCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 50,
        "192": 2,
        "193": 7,
        "194": 9,
        "196": 3,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 2,
        "257": 2,
        "258": 6,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dd48354757729e79409276edbce642bd2f0e59eba6cbe3ba689584f6c3ef3fe3"
    },
    "9e97d97343fa7b6b17b9979489aed417ca70807a47d3812e82d3bd89ad7ff213": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assets as assets\nimport aws_cdk.aws_ecr_assets as ecr_assets\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# network_mode: ecr_assets.NetworkMode\n\nasset_image_code = lambda_.AssetImageCode(\"directory\",\n    build_args={\n        \"build_args_key\": \"buildArgs\"\n    },\n    cmd=[\"cmd\"],\n    entrypoint=[\"entrypoint\"],\n    exclude=[\"exclude\"],\n    extra_hash=\"extraHash\",\n    file=\"file\",\n    follow=assets.FollowMode.NEVER,\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB,\n    invalidation=ecr_assets.DockerImageAssetInvalidationOptions(\n        build_args=False,\n        extra_hash=False,\n        file=False,\n        network_mode=False,\n        repository_name=False,\n        target=False\n    ),\n    network_mode=network_mode,\n    repository_name=\"repositoryName\",\n    target=\"target\",\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assets;\nusing Amazon.CDK.AWS.Ecr.Assets;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nNetworkMode networkMode;\nAssetImageCode assetImageCode = new AssetImageCode(\"directory\", new AssetImageCodeProps {\n    BuildArgs = new Dictionary<string, string> {\n        { \"buildArgsKey\", \"buildArgs\" }\n    },\n    Cmd = new [] { \"cmd\" },\n    Entrypoint = new [] { \"entrypoint\" },\n    Exclude = new [] { \"exclude\" },\n    ExtraHash = \"extraHash\",\n    File = \"file\",\n    Follow = FollowMode.NEVER,\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB,\n    Invalidation = new DockerImageAssetInvalidationOptions {\n        BuildArgs = false,\n        ExtraHash = false,\n        File = false,\n        NetworkMode = false,\n        RepositoryName = false,\n        Target = false\n    },\n    NetworkMode = networkMode,\n    RepositoryName = \"repositoryName\",\n    Target = \"target\",\n    WorkingDirectory = \"workingDirectory\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assets.*;\nimport software.amazon.awscdk.services.ecr.assets.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nNetworkMode networkMode;\n\nAssetImageCode assetImageCode = AssetImageCode.Builder.create(\"directory\")\n        .buildArgs(Map.of(\n                \"buildArgsKey\", \"buildArgs\"))\n        .cmd(List.of(\"cmd\"))\n        .entrypoint(List.of(\"entrypoint\"))\n        .exclude(List.of(\"exclude\"))\n        .extraHash(\"extraHash\")\n        .file(\"file\")\n        .follow(FollowMode.NEVER)\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .invalidation(DockerImageAssetInvalidationOptions.builder()\n                .buildArgs(false)\n                .extraHash(false)\n                .file(false)\n                .networkMode(false)\n                .repositoryName(false)\n                .target(false)\n                .build())\n        .networkMode(networkMode)\n        .repositoryName(\"repositoryName\")\n        .target(\"target\")\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const networkMode: ecr_assets.NetworkMode;\nconst assetImageCode = new lambda.AssetImageCode('directory', {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  cmd: ['cmd'],\n  entrypoint: ['entrypoint'],\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  file: 'file',\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  invalidation: {\n    buildArgs: false,\n    extraHash: false,\n    file: false,\n    networkMode: false,\n    repositoryName: false,\n    target: false,\n  },\n  networkMode: networkMode,\n  repositoryName: 'repositoryName',\n  target: 'target',\n  workingDirectory: 'workingDirectory',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.AssetImageCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assets.FollowMode",
        "@aws-cdk/assets.FollowMode#NEVER",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetInvalidationOptions",
        "@aws-cdk/aws-ecr-assets.NetworkMode",
        "@aws-cdk/aws-lambda.AssetImageCode",
        "@aws-cdk/aws-lambda.AssetImageCodeProps",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const networkMode: ecr_assets.NetworkMode;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetImageCode = new lambda.AssetImageCode('directory', {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  cmd: ['cmd'],\n  entrypoint: ['entrypoint'],\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  file: 'file',\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  invalidation: {\n    buildArgs: false,\n    extraHash: false,\n    file: false,\n    networkMode: false,\n    repositoryName: false,\n    target: false,\n  },\n  networkMode: networkMode,\n  repositoryName: 'repositoryName',\n  target: 'target',\n  workingDirectory: 'workingDirectory',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 14,
        "75": 41,
        "91": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 3,
        "194": 7,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "9e14cf0f0c664777e789e44e014b8e93c8949c77d83c03c8af3ae5fb069b0541"
    },
    "fbecfb404c617e8c88b1a0196c25b7f54881c3f321ea7b63084fab665349596d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assets as assets\nimport aws_cdk.aws_ecr_assets as ecr_assets\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# network_mode: ecr_assets.NetworkMode\n\nasset_image_code_props = lambda.AssetImageCodeProps(\n    build_args={\n        \"build_args_key\": \"buildArgs\"\n    },\n    cmd=[\"cmd\"],\n    entrypoint=[\"entrypoint\"],\n    exclude=[\"exclude\"],\n    extra_hash=\"extraHash\",\n    file=\"file\",\n    follow=assets.FollowMode.NEVER,\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB,\n    invalidation=ecr_assets.DockerImageAssetInvalidationOptions(\n        build_args=False,\n        extra_hash=False,\n        file=False,\n        network_mode=False,\n        repository_name=False,\n        target=False\n    ),\n    network_mode=network_mode,\n    repository_name=\"repositoryName\",\n    target=\"target\",\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assets;\nusing Amazon.CDK.AWS.Ecr.Assets;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nNetworkMode networkMode;\nAssetImageCodeProps assetImageCodeProps = new AssetImageCodeProps {\n    BuildArgs = new Dictionary<string, string> {\n        { \"buildArgsKey\", \"buildArgs\" }\n    },\n    Cmd = new [] { \"cmd\" },\n    Entrypoint = new [] { \"entrypoint\" },\n    Exclude = new [] { \"exclude\" },\n    ExtraHash = \"extraHash\",\n    File = \"file\",\n    Follow = FollowMode.NEVER,\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB,\n    Invalidation = new DockerImageAssetInvalidationOptions {\n        BuildArgs = false,\n        ExtraHash = false,\n        File = false,\n        NetworkMode = false,\n        RepositoryName = false,\n        Target = false\n    },\n    NetworkMode = networkMode,\n    RepositoryName = \"repositoryName\",\n    Target = \"target\",\n    WorkingDirectory = \"workingDirectory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assets.*;\nimport software.amazon.awscdk.services.ecr.assets.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nNetworkMode networkMode;\n\nAssetImageCodeProps assetImageCodeProps = AssetImageCodeProps.builder()\n        .buildArgs(Map.of(\n                \"buildArgsKey\", \"buildArgs\"))\n        .cmd(List.of(\"cmd\"))\n        .entrypoint(List.of(\"entrypoint\"))\n        .exclude(List.of(\"exclude\"))\n        .extraHash(\"extraHash\")\n        .file(\"file\")\n        .follow(FollowMode.NEVER)\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .invalidation(DockerImageAssetInvalidationOptions.builder()\n                .buildArgs(false)\n                .extraHash(false)\n                .file(false)\n                .networkMode(false)\n                .repositoryName(false)\n                .target(false)\n                .build())\n        .networkMode(networkMode)\n        .repositoryName(\"repositoryName\")\n        .target(\"target\")\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const networkMode: ecr_assets.NetworkMode;\nconst assetImageCodeProps: lambda.AssetImageCodeProps = {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  cmd: ['cmd'],\n  entrypoint: ['entrypoint'],\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  file: 'file',\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  invalidation: {\n    buildArgs: false,\n    extraHash: false,\n    file: false,\n    networkMode: false,\n    repositoryName: false,\n    target: false,\n  },\n  networkMode: networkMode,\n  repositoryName: 'repositoryName',\n  target: 'target',\n  workingDirectory: 'workingDirectory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.AssetImageCodeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assets.FollowMode",
        "@aws-cdk/assets.FollowMode#NEVER",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetInvalidationOptions",
        "@aws-cdk/aws-ecr-assets.NetworkMode",
        "@aws-cdk/aws-lambda.AssetImageCodeProps",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const networkMode: ecr_assets.NetworkMode;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetImageCodeProps: lambda.AssetImageCodeProps = {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  cmd: ['cmd'],\n  entrypoint: ['entrypoint'],\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  file: 'file',\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  invalidation: {\n    buildArgs: false,\n    extraHash: false,\n    file: false,\n    networkMode: false,\n    repositoryName: false,\n    target: false,\n  },\n  networkMode: networkMode,\n  repositoryName: 'repositoryName',\n  target: 'target',\n  workingDirectory: 'workingDirectory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 13,
        "75": 41,
        "91": 6,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 3,
        "194": 6,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "46a7adc2cfefeeb6ef456a06aedc984abc8ed6e2b3beb325e7c1c292f808a86c"
    },
    "0412280ff2ab630e6730d8a483f41bbd3f5c96c2f97989af96f849cb85a48d4c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn: lambda.Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.AutoScalingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "0ea66cd73350dd04fa60fb95f619ffa144703b4f32f4ea774929d05b574b59ad"
    },
    "289c8fe3d2fabfc70ce5515bdf3ad8e2afb65da90a9bba19a54641f72659119c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_alias = lambda_.CfnAlias(self, \"MyCfnAlias\",\n    function_name=\"functionName\",\n    function_version=\"functionVersion\",\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    provisioned_concurrency_config=lambda.CfnAlias.ProvisionedConcurrencyConfigurationProperty(\n        provisioned_concurrent_executions=123\n    ),\n    routing_config=lambda.CfnAlias.AliasRoutingConfigurationProperty(\n        additional_version_weights=[lambda.CfnAlias.VersionWeightProperty(\n            function_version=\"functionVersion\",\n            function_weight=123\n        )]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnAlias cfnAlias = new CfnAlias(this, \"MyCfnAlias\", new CfnAliasProps {\n    FunctionName = \"functionName\",\n    FunctionVersion = \"functionVersion\",\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    ProvisionedConcurrencyConfig = new ProvisionedConcurrencyConfigurationProperty {\n        ProvisionedConcurrentExecutions = 123\n    },\n    RoutingConfig = new AliasRoutingConfigurationProperty {\n        AdditionalVersionWeights = new [] { new VersionWeightProperty {\n            FunctionVersion = \"functionVersion\",\n            FunctionWeight = 123\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnAlias cfnAlias = CfnAlias.Builder.create(this, \"MyCfnAlias\")\n        .functionName(\"functionName\")\n        .functionVersion(\"functionVersion\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .provisionedConcurrencyConfig(ProvisionedConcurrencyConfigurationProperty.builder()\n                .provisionedConcurrentExecutions(123)\n                .build())\n        .routingConfig(AliasRoutingConfigurationProperty.builder()\n                .additionalVersionWeights(List.of(VersionWeightProperty.builder()\n                        .functionVersion(\"functionVersion\")\n                        .functionWeight(123)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnAlias = new lambda.CfnAlias(this, 'MyCfnAlias', {\n  functionName: 'functionName',\n  functionVersion: 'functionVersion',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  provisionedConcurrencyConfig: {\n    provisionedConcurrentExecutions: 123,\n  },\n  routingConfig: {\n    additionalVersionWeights: [{\n      functionVersion: 'functionVersion',\n      functionWeight: 123,\n    }],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnAlias"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnAlias",
        "@aws-cdk/aws-lambda.CfnAliasProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAlias = new lambda.CfnAlias(this, 'MyCfnAlias', {\n  functionName: 'functionName',\n  functionVersion: 'functionVersion',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  provisionedConcurrencyConfig: {\n    provisionedConcurrentExecutions: 123,\n  },\n  routingConfig: {\n    additionalVersionWeights: [{\n      functionVersion: 'functionVersion',\n      functionWeight: 123,\n    }],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 14,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "2f0259d214edf661b520da1d3ecc68d1b005860579e76e7d909c7768c54d5ddf"
    },
    "e0c48de28496940479deca8e8728353412305a444f8ce3113df7742e22a1f160": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nalias_routing_configuration_property = lambda.CfnAlias.AliasRoutingConfigurationProperty(\n    additional_version_weights=[lambda.CfnAlias.VersionWeightProperty(\n        function_version=\"functionVersion\",\n        function_weight=123\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nAliasRoutingConfigurationProperty aliasRoutingConfigurationProperty = new AliasRoutingConfigurationProperty {\n    AdditionalVersionWeights = new [] { new VersionWeightProperty {\n        FunctionVersion = \"functionVersion\",\n        FunctionWeight = 123\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nAliasRoutingConfigurationProperty aliasRoutingConfigurationProperty = AliasRoutingConfigurationProperty.builder()\n        .additionalVersionWeights(List.of(VersionWeightProperty.builder()\n                .functionVersion(\"functionVersion\")\n                .functionWeight(123)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst aliasRoutingConfigurationProperty: lambda.CfnAlias.AliasRoutingConfigurationProperty = {\n  additionalVersionWeights: [{\n    functionVersion: 'functionVersion',\n    functionWeight: 123,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnAlias.AliasRoutingConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnAlias.AliasRoutingConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aliasRoutingConfigurationProperty: lambda.CfnAlias.AliasRoutingConfigurationProperty = {\n  additionalVersionWeights: [{\n    functionVersion: 'functionVersion',\n    functionWeight: 123,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "fb19ef2ddeb7ef08ec45452e689b0ca6ffd4b58c17cdeb58941b7e6dfe5d528a"
    },
    "7b88ae4d0d6de586480c6d5f4b97c68cb261d99814d590e7ae27da83813707b7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nprovisioned_concurrency_configuration_property = lambda.CfnAlias.ProvisionedConcurrencyConfigurationProperty(\n    provisioned_concurrent_executions=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nProvisionedConcurrencyConfigurationProperty provisionedConcurrencyConfigurationProperty = new ProvisionedConcurrencyConfigurationProperty {\n    ProvisionedConcurrentExecutions = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nProvisionedConcurrencyConfigurationProperty provisionedConcurrencyConfigurationProperty = ProvisionedConcurrencyConfigurationProperty.builder()\n        .provisionedConcurrentExecutions(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst provisionedConcurrencyConfigurationProperty: lambda.CfnAlias.ProvisionedConcurrencyConfigurationProperty = {\n  provisionedConcurrentExecutions: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnAlias.ProvisionedConcurrencyConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnAlias.ProvisionedConcurrencyConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst provisionedConcurrencyConfigurationProperty: lambda.CfnAlias.ProvisionedConcurrencyConfigurationProperty = {\n  provisionedConcurrentExecutions: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "26ee137c984b3ef6fb0d5c684fe10c1a2eed718226699f19241bb66ea4007e72"
    },
    "43ff630e2ba5823341ae2a922c87b0a42b383e76fcb3b2296f3633dd1ff367d6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nversion_weight_property = lambda.CfnAlias.VersionWeightProperty(\n    function_version=\"functionVersion\",\n    function_weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nVersionWeightProperty versionWeightProperty = new VersionWeightProperty {\n    FunctionVersion = \"functionVersion\",\n    FunctionWeight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nVersionWeightProperty versionWeightProperty = VersionWeightProperty.builder()\n        .functionVersion(\"functionVersion\")\n        .functionWeight(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst versionWeightProperty: lambda.CfnAlias.VersionWeightProperty = {\n  functionVersion: 'functionVersion',\n  functionWeight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnAlias.VersionWeightProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnAlias.VersionWeightProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst versionWeightProperty: lambda.CfnAlias.VersionWeightProperty = {\n  functionVersion: 'functionVersion',\n  functionWeight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "06bcb9727131a259ba0e40782eb076d6df5ff421a72207abfe47fd31d834dfd6"
    },
    "b01ec8b835239ae420a0905e9b0cdc1e9d794e361c5a6fb5aa70fcc3a3e3a96d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_alias_props = lambda.CfnAliasProps(\n    function_name=\"functionName\",\n    function_version=\"functionVersion\",\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    provisioned_concurrency_config=lambda.CfnAlias.ProvisionedConcurrencyConfigurationProperty(\n        provisioned_concurrent_executions=123\n    ),\n    routing_config=lambda.CfnAlias.AliasRoutingConfigurationProperty(\n        additional_version_weights=[lambda.CfnAlias.VersionWeightProperty(\n            function_version=\"functionVersion\",\n            function_weight=123\n        )]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnAliasProps cfnAliasProps = new CfnAliasProps {\n    FunctionName = \"functionName\",\n    FunctionVersion = \"functionVersion\",\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    ProvisionedConcurrencyConfig = new ProvisionedConcurrencyConfigurationProperty {\n        ProvisionedConcurrentExecutions = 123\n    },\n    RoutingConfig = new AliasRoutingConfigurationProperty {\n        AdditionalVersionWeights = new [] { new VersionWeightProperty {\n            FunctionVersion = \"functionVersion\",\n            FunctionWeight = 123\n        } }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnAliasProps cfnAliasProps = CfnAliasProps.builder()\n        .functionName(\"functionName\")\n        .functionVersion(\"functionVersion\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .provisionedConcurrencyConfig(ProvisionedConcurrencyConfigurationProperty.builder()\n                .provisionedConcurrentExecutions(123)\n                .build())\n        .routingConfig(AliasRoutingConfigurationProperty.builder()\n                .additionalVersionWeights(List.of(VersionWeightProperty.builder()\n                        .functionVersion(\"functionVersion\")\n                        .functionWeight(123)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnAliasProps: lambda.CfnAliasProps = {\n  functionName: 'functionName',\n  functionVersion: 'functionVersion',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  provisionedConcurrencyConfig: {\n    provisionedConcurrentExecutions: 123,\n  },\n  routingConfig: {\n    additionalVersionWeights: [{\n      functionVersion: 'functionVersion',\n      functionWeight: 123,\n    }],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnAliasProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnAliasProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAliasProps: lambda.CfnAliasProps = {\n  functionName: 'functionName',\n  functionVersion: 'functionVersion',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  provisionedConcurrencyConfig: {\n    provisionedConcurrentExecutions: 123,\n  },\n  routingConfig: {\n    additionalVersionWeights: [{\n      functionVersion: 'functionVersion',\n      functionWeight: 123,\n    }],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 14,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "b5c265201484ea728cbc0d4c607c13d9c923341307d417277152b87f69ccd416"
    },
    "7b4a2f09c1749f12dc15b4d4c96fc7196a74c97c6d360fe28892544030c98020": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_code_signing_config = lambda_.CfnCodeSigningConfig(self, \"MyCfnCodeSigningConfig\",\n    allowed_publishers=lambda.CfnCodeSigningConfig.AllowedPublishersProperty(\n        signing_profile_version_arns=[\"signingProfileVersionArns\"]\n    ),\n\n    # the properties below are optional\n    code_signing_policies=lambda.CfnCodeSigningConfig.CodeSigningPoliciesProperty(\n        untrusted_artifact_on_deployment=\"untrustedArtifactOnDeployment\"\n    ),\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnCodeSigningConfig cfnCodeSigningConfig = new CfnCodeSigningConfig(this, \"MyCfnCodeSigningConfig\", new CfnCodeSigningConfigProps {\n    AllowedPublishers = new AllowedPublishersProperty {\n        SigningProfileVersionArns = new [] { \"signingProfileVersionArns\" }\n    },\n\n    // the properties below are optional\n    CodeSigningPolicies = new CodeSigningPoliciesProperty {\n        UntrustedArtifactOnDeployment = \"untrustedArtifactOnDeployment\"\n    },\n    Description = \"description\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnCodeSigningConfig cfnCodeSigningConfig = CfnCodeSigningConfig.Builder.create(this, \"MyCfnCodeSigningConfig\")\n        .allowedPublishers(AllowedPublishersProperty.builder()\n                .signingProfileVersionArns(List.of(\"signingProfileVersionArns\"))\n                .build())\n\n        // the properties below are optional\n        .codeSigningPolicies(CodeSigningPoliciesProperty.builder()\n                .untrustedArtifactOnDeployment(\"untrustedArtifactOnDeployment\")\n                .build())\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnCodeSigningConfig = new lambda.CfnCodeSigningConfig(this, 'MyCfnCodeSigningConfig', {\n  allowedPublishers: {\n    signingProfileVersionArns: ['signingProfileVersionArns'],\n  },\n\n  // the properties below are optional\n  codeSigningPolicies: {\n    untrustedArtifactOnDeployment: 'untrustedArtifactOnDeployment',\n  },\n  description: 'description',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnCodeSigningConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnCodeSigningConfig",
        "@aws-cdk/aws-lambda.CfnCodeSigningConfigProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCodeSigningConfig = new lambda.CfnCodeSigningConfig(this, 'MyCfnCodeSigningConfig', {\n  allowedPublishers: {\n    signingProfileVersionArns: ['signingProfileVersionArns'],\n  },\n\n  // the properties below are optional\n  codeSigningPolicies: {\n    untrustedArtifactOnDeployment: 'untrustedArtifactOnDeployment',\n  },\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "09127cac42de53bf0894f69a38c20d73a2ab63b2446f2e2890aaff06ca1e0312"
    },
    "54eceb75ee25f444ce03de9df514fc7fbdcbb80f84efcf47001fcef8837603e5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nallowed_publishers_property = lambda.CfnCodeSigningConfig.AllowedPublishersProperty(\n    signing_profile_version_arns=[\"signingProfileVersionArns\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nAllowedPublishersProperty allowedPublishersProperty = new AllowedPublishersProperty {\n    SigningProfileVersionArns = new [] { \"signingProfileVersionArns\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nAllowedPublishersProperty allowedPublishersProperty = AllowedPublishersProperty.builder()\n        .signingProfileVersionArns(List.of(\"signingProfileVersionArns\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst allowedPublishersProperty: lambda.CfnCodeSigningConfig.AllowedPublishersProperty = {\n  signingProfileVersionArns: ['signingProfileVersionArns'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnCodeSigningConfig.AllowedPublishersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnCodeSigningConfig.AllowedPublishersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst allowedPublishersProperty: lambda.CfnCodeSigningConfig.AllowedPublishersProperty = {\n  signingProfileVersionArns: ['signingProfileVersionArns'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e2a3fb7df0596710f9b5fabf224f38fb5b9b23ae9c308fe9e3e4e3967a6547cd"
    },
    "8240f247dbd5430422ce2d02617032e112af4cae16fc5c609211178ef8dd0b53": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncode_signing_policies_property = lambda.CfnCodeSigningConfig.CodeSigningPoliciesProperty(\n    untrusted_artifact_on_deployment=\"untrustedArtifactOnDeployment\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCodeSigningPoliciesProperty codeSigningPoliciesProperty = new CodeSigningPoliciesProperty {\n    UntrustedArtifactOnDeployment = \"untrustedArtifactOnDeployment\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCodeSigningPoliciesProperty codeSigningPoliciesProperty = CodeSigningPoliciesProperty.builder()\n        .untrustedArtifactOnDeployment(\"untrustedArtifactOnDeployment\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst codeSigningPoliciesProperty: lambda.CfnCodeSigningConfig.CodeSigningPoliciesProperty = {\n  untrustedArtifactOnDeployment: 'untrustedArtifactOnDeployment',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnCodeSigningConfig.CodeSigningPoliciesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnCodeSigningConfig.CodeSigningPoliciesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeSigningPoliciesProperty: lambda.CfnCodeSigningConfig.CodeSigningPoliciesProperty = {\n  untrustedArtifactOnDeployment: 'untrustedArtifactOnDeployment',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "14c414bbd14caaa208374aae3ccf43576581addc6dd12005cad2b067bfd55661"
    },
    "d320f83c4fd1534faecf13d2ed8fbad396aef7e787b722d2bfa5662ec736ff8f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_code_signing_config_props = lambda.CfnCodeSigningConfigProps(\n    allowed_publishers=lambda.CfnCodeSigningConfig.AllowedPublishersProperty(\n        signing_profile_version_arns=[\"signingProfileVersionArns\"]\n    ),\n\n    # the properties below are optional\n    code_signing_policies=lambda.CfnCodeSigningConfig.CodeSigningPoliciesProperty(\n        untrusted_artifact_on_deployment=\"untrustedArtifactOnDeployment\"\n    ),\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnCodeSigningConfigProps cfnCodeSigningConfigProps = new CfnCodeSigningConfigProps {\n    AllowedPublishers = new AllowedPublishersProperty {\n        SigningProfileVersionArns = new [] { \"signingProfileVersionArns\" }\n    },\n\n    // the properties below are optional\n    CodeSigningPolicies = new CodeSigningPoliciesProperty {\n        UntrustedArtifactOnDeployment = \"untrustedArtifactOnDeployment\"\n    },\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnCodeSigningConfigProps cfnCodeSigningConfigProps = CfnCodeSigningConfigProps.builder()\n        .allowedPublishers(AllowedPublishersProperty.builder()\n                .signingProfileVersionArns(List.of(\"signingProfileVersionArns\"))\n                .build())\n\n        // the properties below are optional\n        .codeSigningPolicies(CodeSigningPoliciesProperty.builder()\n                .untrustedArtifactOnDeployment(\"untrustedArtifactOnDeployment\")\n                .build())\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnCodeSigningConfigProps: lambda.CfnCodeSigningConfigProps = {\n  allowedPublishers: {\n    signingProfileVersionArns: ['signingProfileVersionArns'],\n  },\n\n  // the properties below are optional\n  codeSigningPolicies: {\n    untrustedArtifactOnDeployment: 'untrustedArtifactOnDeployment',\n  },\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnCodeSigningConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnCodeSigningConfigProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCodeSigningConfigProps: lambda.CfnCodeSigningConfigProps = {\n  allowedPublishers: {\n    signingProfileVersionArns: ['signingProfileVersionArns'],\n  },\n\n  // the properties below are optional\n  codeSigningPolicies: {\n    untrustedArtifactOnDeployment: 'untrustedArtifactOnDeployment',\n  },\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "d8e34aebc61d0f37304379ebcfc2ad910784733610183e78b28d889d6e756b97"
    },
    "f04d9c76096e42e040fb0c0fab41077f6b29cb188bf5e536115041822f2f0f23": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_event_invoke_config = lambda_.CfnEventInvokeConfig(self, \"MyCfnEventInvokeConfig\",\n    function_name=\"functionName\",\n    qualifier=\"qualifier\",\n\n    # the properties below are optional\n    destination_config=lambda.CfnEventInvokeConfig.DestinationConfigProperty(\n        on_failure=lambda.CfnEventInvokeConfig.OnFailureProperty(\n            destination=\"destination\"\n        ),\n        on_success=lambda.CfnEventInvokeConfig.OnSuccessProperty(\n            destination=\"destination\"\n        )\n    ),\n    maximum_event_age_in_seconds=123,\n    maximum_retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnEventInvokeConfig cfnEventInvokeConfig = new CfnEventInvokeConfig(this, \"MyCfnEventInvokeConfig\", new CfnEventInvokeConfigProps {\n    FunctionName = \"functionName\",\n    Qualifier = \"qualifier\",\n\n    // the properties below are optional\n    DestinationConfig = new DestinationConfigProperty {\n        OnFailure = new OnFailureProperty {\n            Destination = \"destination\"\n        },\n        OnSuccess = new OnSuccessProperty {\n            Destination = \"destination\"\n        }\n    },\n    MaximumEventAgeInSeconds = 123,\n    MaximumRetryAttempts = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnEventInvokeConfig cfnEventInvokeConfig = CfnEventInvokeConfig.Builder.create(this, \"MyCfnEventInvokeConfig\")\n        .functionName(\"functionName\")\n        .qualifier(\"qualifier\")\n\n        // the properties below are optional\n        .destinationConfig(DestinationConfigProperty.builder()\n                .onFailure(OnFailureProperty.builder()\n                        .destination(\"destination\")\n                        .build())\n                .onSuccess(OnSuccessProperty.builder()\n                        .destination(\"destination\")\n                        .build())\n                .build())\n        .maximumEventAgeInSeconds(123)\n        .maximumRetryAttempts(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnEventInvokeConfig = new lambda.CfnEventInvokeConfig(this, 'MyCfnEventInvokeConfig', {\n  functionName: 'functionName',\n  qualifier: 'qualifier',\n\n  // the properties below are optional\n  destinationConfig: {\n    onFailure: {\n      destination: 'destination',\n    },\n    onSuccess: {\n      destination: 'destination',\n    },\n  },\n  maximumEventAgeInSeconds: 123,\n  maximumRetryAttempts: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventInvokeConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventInvokeConfig",
        "@aws-cdk/aws-lambda.CfnEventInvokeConfigProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventInvokeConfig = new lambda.CfnEventInvokeConfig(this, 'MyCfnEventInvokeConfig', {\n  functionName: 'functionName',\n  qualifier: 'qualifier',\n\n  // the properties below are optional\n  destinationConfig: {\n    onFailure: {\n      destination: 'destination',\n    },\n    onSuccess: {\n      destination: 'destination',\n    },\n  },\n  maximumEventAgeInSeconds: 123,\n  maximumRetryAttempts: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 13,
        "104": 1,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "ac64c8a88bcc2642a0a77c674a969d4d9f2c4f21e3057de3c06cb188ae5c62e8"
    },
    "b21e1dff9e0115ae7af4ec595d12f03e51385d6173ede5bed3b9e33dddb0e20b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ndestination_config_property = lambda.CfnEventInvokeConfig.DestinationConfigProperty(\n    on_failure=lambda.CfnEventInvokeConfig.OnFailureProperty(\n        destination=\"destination\"\n    ),\n    on_success=lambda.CfnEventInvokeConfig.OnSuccessProperty(\n        destination=\"destination\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nDestinationConfigProperty destinationConfigProperty = new DestinationConfigProperty {\n    OnFailure = new OnFailureProperty {\n        Destination = \"destination\"\n    },\n    OnSuccess = new OnSuccessProperty {\n        Destination = \"destination\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nDestinationConfigProperty destinationConfigProperty = DestinationConfigProperty.builder()\n        .onFailure(OnFailureProperty.builder()\n                .destination(\"destination\")\n                .build())\n        .onSuccess(OnSuccessProperty.builder()\n                .destination(\"destination\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst destinationConfigProperty: lambda.CfnEventInvokeConfig.DestinationConfigProperty = {\n  onFailure: {\n    destination: 'destination',\n  },\n  onSuccess: {\n    destination: 'destination',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventInvokeConfig.DestinationConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventInvokeConfig.DestinationConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst destinationConfigProperty: lambda.CfnEventInvokeConfig.DestinationConfigProperty = {\n  onFailure: {\n    destination: 'destination',\n  },\n  onSuccess: {\n    destination: 'destination',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "bb26cfd516935acf4b50f6d60bce60f2fcf7ca4b8265c9894d1f272a6f5ff522"
    },
    "4e43f1420654bbc2a4e3045d53187d0ba471f9e4278aeee68e02f2c4e5d4b0b8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\non_failure_property = lambda.CfnEventInvokeConfig.OnFailureProperty(\n    destination=\"destination\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nOnFailureProperty onFailureProperty = new OnFailureProperty {\n    Destination = \"destination\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nOnFailureProperty onFailureProperty = OnFailureProperty.builder()\n        .destination(\"destination\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst onFailureProperty: lambda.CfnEventInvokeConfig.OnFailureProperty = {\n  destination: 'destination',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventInvokeConfig.OnFailureProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventInvokeConfig.OnFailureProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst onFailureProperty: lambda.CfnEventInvokeConfig.OnFailureProperty = {\n  destination: 'destination',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c65039347eefefbba6a0ce1e4e01c3f747fc98de567f712c9cd5c39e05c2ee36"
    },
    "e042fb821781d18bc4a19675a98e5ed2f89f082c467f5218d0897e8aa9ea87fd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\non_success_property = lambda.CfnEventInvokeConfig.OnSuccessProperty(\n    destination=\"destination\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nOnSuccessProperty onSuccessProperty = new OnSuccessProperty {\n    Destination = \"destination\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nOnSuccessProperty onSuccessProperty = OnSuccessProperty.builder()\n        .destination(\"destination\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst onSuccessProperty: lambda.CfnEventInvokeConfig.OnSuccessProperty = {\n  destination: 'destination',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventInvokeConfig.OnSuccessProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventInvokeConfig.OnSuccessProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst onSuccessProperty: lambda.CfnEventInvokeConfig.OnSuccessProperty = {\n  destination: 'destination',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c79cb833accdc3bc2a1da580b192bb0466487d285fa9b3ba9531759af0b066a0"
    },
    "44c2d0fc523b5fdd2a889754c810494a2a4edef6e472a555952608ff866e490e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_event_invoke_config_props = lambda.CfnEventInvokeConfigProps(\n    function_name=\"functionName\",\n    qualifier=\"qualifier\",\n\n    # the properties below are optional\n    destination_config=lambda.CfnEventInvokeConfig.DestinationConfigProperty(\n        on_failure=lambda.CfnEventInvokeConfig.OnFailureProperty(\n            destination=\"destination\"\n        ),\n        on_success=lambda.CfnEventInvokeConfig.OnSuccessProperty(\n            destination=\"destination\"\n        )\n    ),\n    maximum_event_age_in_seconds=123,\n    maximum_retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnEventInvokeConfigProps cfnEventInvokeConfigProps = new CfnEventInvokeConfigProps {\n    FunctionName = \"functionName\",\n    Qualifier = \"qualifier\",\n\n    // the properties below are optional\n    DestinationConfig = new DestinationConfigProperty {\n        OnFailure = new OnFailureProperty {\n            Destination = \"destination\"\n        },\n        OnSuccess = new OnSuccessProperty {\n            Destination = \"destination\"\n        }\n    },\n    MaximumEventAgeInSeconds = 123,\n    MaximumRetryAttempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnEventInvokeConfigProps cfnEventInvokeConfigProps = CfnEventInvokeConfigProps.builder()\n        .functionName(\"functionName\")\n        .qualifier(\"qualifier\")\n\n        // the properties below are optional\n        .destinationConfig(DestinationConfigProperty.builder()\n                .onFailure(OnFailureProperty.builder()\n                        .destination(\"destination\")\n                        .build())\n                .onSuccess(OnSuccessProperty.builder()\n                        .destination(\"destination\")\n                        .build())\n                .build())\n        .maximumEventAgeInSeconds(123)\n        .maximumRetryAttempts(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnEventInvokeConfigProps: lambda.CfnEventInvokeConfigProps = {\n  functionName: 'functionName',\n  qualifier: 'qualifier',\n\n  // the properties below are optional\n  destinationConfig: {\n    onFailure: {\n      destination: 'destination',\n    },\n    onSuccess: {\n      destination: 'destination',\n    },\n  },\n  maximumEventAgeInSeconds: 123,\n  maximumRetryAttempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventInvokeConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventInvokeConfigProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventInvokeConfigProps: lambda.CfnEventInvokeConfigProps = {\n  functionName: 'functionName',\n  qualifier: 'qualifier',\n\n  // the properties below are optional\n  destinationConfig: {\n    onFailure: {\n      destination: 'destination',\n    },\n    onSuccess: {\n      destination: 'destination',\n    },\n  },\n  maximumEventAgeInSeconds: 123,\n  maximumRetryAttempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 13,
        "153": 1,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "bc3ccc5705ba857e5c41517ca4bc13a6017661286f75a34135cafa9c224a6347"
    },
    "934652e99e516514957392c1736a96255b24baeeff07fb9490c76d336665e3b3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_event_source_mapping = lambda_.CfnEventSourceMapping(self, \"MyCfnEventSourceMapping\",\n    function_name=\"functionName\",\n\n    # the properties below are optional\n    batch_size=123,\n    bisect_batch_on_function_error=False,\n    destination_config=lambda.CfnEventSourceMapping.DestinationConfigProperty(\n        on_failure=lambda.CfnEventSourceMapping.OnFailureProperty(\n            destination=\"destination\"\n        )\n    ),\n    enabled=False,\n    event_source_arn=\"eventSourceArn\",\n    filter_criteria=lambda.CfnEventSourceMapping.FilterCriteriaProperty(\n        filters=[lambda.CfnEventSourceMapping.FilterProperty(\n            pattern=\"pattern\"\n        )]\n    ),\n    function_response_types=[\"functionResponseTypes\"],\n    maximum_batching_window_in_seconds=123,\n    maximum_record_age_in_seconds=123,\n    maximum_retry_attempts=123,\n    parallelization_factor=123,\n    queues=[\"queues\"],\n    self_managed_event_source=lambda.CfnEventSourceMapping.SelfManagedEventSourceProperty(\n        endpoints=lambda.CfnEventSourceMapping.EndpointsProperty(\n            kafka_bootstrap_servers=[\"kafkaBootstrapServers\"]\n        )\n    ),\n    source_access_configurations=[lambda.CfnEventSourceMapping.SourceAccessConfigurationProperty(\n        type=\"type\",\n        uri=\"uri\"\n    )],\n    starting_position=\"startingPosition\",\n    starting_position_timestamp=123,\n    topics=[\"topics\"],\n    tumbling_window_in_seconds=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnEventSourceMapping cfnEventSourceMapping = new CfnEventSourceMapping(this, \"MyCfnEventSourceMapping\", new CfnEventSourceMappingProps {\n    FunctionName = \"functionName\",\n\n    // the properties below are optional\n    BatchSize = 123,\n    BisectBatchOnFunctionError = false,\n    DestinationConfig = new DestinationConfigProperty {\n        OnFailure = new OnFailureProperty {\n            Destination = \"destination\"\n        }\n    },\n    Enabled = false,\n    EventSourceArn = \"eventSourceArn\",\n    FilterCriteria = new FilterCriteriaProperty {\n        Filters = new [] { new FilterProperty {\n            Pattern = \"pattern\"\n        } }\n    },\n    FunctionResponseTypes = new [] { \"functionResponseTypes\" },\n    MaximumBatchingWindowInSeconds = 123,\n    MaximumRecordAgeInSeconds = 123,\n    MaximumRetryAttempts = 123,\n    ParallelizationFactor = 123,\n    Queues = new [] { \"queues\" },\n    SelfManagedEventSource = new SelfManagedEventSourceProperty {\n        Endpoints = new EndpointsProperty {\n            KafkaBootstrapServers = new [] { \"kafkaBootstrapServers\" }\n        }\n    },\n    SourceAccessConfigurations = new [] { new SourceAccessConfigurationProperty {\n        Type = \"type\",\n        Uri = \"uri\"\n    } },\n    StartingPosition = \"startingPosition\",\n    StartingPositionTimestamp = 123,\n    Topics = new [] { \"topics\" },\n    TumblingWindowInSeconds = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnEventSourceMapping cfnEventSourceMapping = CfnEventSourceMapping.Builder.create(this, \"MyCfnEventSourceMapping\")\n        .functionName(\"functionName\")\n\n        // the properties below are optional\n        .batchSize(123)\n        .bisectBatchOnFunctionError(false)\n        .destinationConfig(DestinationConfigProperty.builder()\n                .onFailure(OnFailureProperty.builder()\n                        .destination(\"destination\")\n                        .build())\n                .build())\n        .enabled(false)\n        .eventSourceArn(\"eventSourceArn\")\n        .filterCriteria(FilterCriteriaProperty.builder()\n                .filters(List.of(FilterProperty.builder()\n                        .pattern(\"pattern\")\n                        .build()))\n                .build())\n        .functionResponseTypes(List.of(\"functionResponseTypes\"))\n        .maximumBatchingWindowInSeconds(123)\n        .maximumRecordAgeInSeconds(123)\n        .maximumRetryAttempts(123)\n        .parallelizationFactor(123)\n        .queues(List.of(\"queues\"))\n        .selfManagedEventSource(SelfManagedEventSourceProperty.builder()\n                .endpoints(EndpointsProperty.builder()\n                        .kafkaBootstrapServers(List.of(\"kafkaBootstrapServers\"))\n                        .build())\n                .build())\n        .sourceAccessConfigurations(List.of(SourceAccessConfigurationProperty.builder()\n                .type(\"type\")\n                .uri(\"uri\")\n                .build()))\n        .startingPosition(\"startingPosition\")\n        .startingPositionTimestamp(123)\n        .topics(List.of(\"topics\"))\n        .tumblingWindowInSeconds(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnEventSourceMapping = new lambda.CfnEventSourceMapping(this, 'MyCfnEventSourceMapping', {\n  functionName: 'functionName',\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnFunctionError: false,\n  destinationConfig: {\n    onFailure: {\n      destination: 'destination',\n    },\n  },\n  enabled: false,\n  eventSourceArn: 'eventSourceArn',\n  filterCriteria: {\n    filters: [{\n      pattern: 'pattern',\n    }],\n  },\n  functionResponseTypes: ['functionResponseTypes'],\n  maximumBatchingWindowInSeconds: 123,\n  maximumRecordAgeInSeconds: 123,\n  maximumRetryAttempts: 123,\n  parallelizationFactor: 123,\n  queues: ['queues'],\n  selfManagedEventSource: {\n    endpoints: {\n      kafkaBootstrapServers: ['kafkaBootstrapServers'],\n    },\n  },\n  sourceAccessConfigurations: [{\n    type: 'type',\n    uri: 'uri',\n  }],\n  startingPosition: 'startingPosition',\n  startingPositionTimestamp: 123,\n  topics: ['topics'],\n  tumblingWindowInSeconds: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventSourceMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventSourceMapping",
        "@aws-cdk/aws-lambda.CfnEventSourceMappingProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventSourceMapping = new lambda.CfnEventSourceMapping(this, 'MyCfnEventSourceMapping', {\n  functionName: 'functionName',\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnFunctionError: false,\n  destinationConfig: {\n    onFailure: {\n      destination: 'destination',\n    },\n  },\n  enabled: false,\n  eventSourceArn: 'eventSourceArn',\n  filterCriteria: {\n    filters: [{\n      pattern: 'pattern',\n    }],\n  },\n  functionResponseTypes: ['functionResponseTypes'],\n  maximumBatchingWindowInSeconds: 123,\n  maximumRecordAgeInSeconds: 123,\n  maximumRetryAttempts: 123,\n  parallelizationFactor: 123,\n  queues: ['queues'],\n  selfManagedEventSource: {\n    endpoints: {\n      kafkaBootstrapServers: ['kafkaBootstrapServers'],\n    },\n  },\n  sourceAccessConfigurations: [{\n    type: 'type',\n    uri: 'uri',\n  }],\n  startingPosition: 'startingPosition',\n  startingPositionTimestamp: 123,\n  topics: ['topics'],\n  tumblingWindowInSeconds: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 13,
        "75": 31,
        "91": 2,
        "104": 1,
        "192": 6,
        "193": 8,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 27,
        "290": 1
      },
      "fqnsFingerprint": "0899e289c3c0da7c4007c7d478629d7aa7e64f34b872cb7396c167ac0b57c04d"
    },
    "fe516434907b9cf150d800b358498a6796e33ddf996ed190bb50e8f9bca8ea6e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ndestination_config_property = lambda.CfnEventSourceMapping.DestinationConfigProperty(\n    on_failure=lambda.CfnEventSourceMapping.OnFailureProperty(\n        destination=\"destination\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nDestinationConfigProperty destinationConfigProperty = new DestinationConfigProperty {\n    OnFailure = new OnFailureProperty {\n        Destination = \"destination\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nDestinationConfigProperty destinationConfigProperty = DestinationConfigProperty.builder()\n        .onFailure(OnFailureProperty.builder()\n                .destination(\"destination\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst destinationConfigProperty: lambda.CfnEventSourceMapping.DestinationConfigProperty = {\n  onFailure: {\n    destination: 'destination',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventSourceMapping.DestinationConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventSourceMapping.DestinationConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst destinationConfigProperty: lambda.CfnEventSourceMapping.DestinationConfigProperty = {\n  onFailure: {\n    destination: 'destination',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0494d2a1d3e7eb903649945508b443645ba429f5b31c199cef98cffd8c295be1"
    },
    "e890064236bbc1f9aa8930644bf7d7a6dcf8762a72f38732da4cf1099ec69496": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nendpoints_property = lambda.CfnEventSourceMapping.EndpointsProperty(\n    kafka_bootstrap_servers=[\"kafkaBootstrapServers\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nEndpointsProperty endpointsProperty = new EndpointsProperty {\n    KafkaBootstrapServers = new [] { \"kafkaBootstrapServers\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nEndpointsProperty endpointsProperty = EndpointsProperty.builder()\n        .kafkaBootstrapServers(List.of(\"kafkaBootstrapServers\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst endpointsProperty: lambda.CfnEventSourceMapping.EndpointsProperty = {\n  kafkaBootstrapServers: ['kafkaBootstrapServers'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventSourceMapping.EndpointsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventSourceMapping.EndpointsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpointsProperty: lambda.CfnEventSourceMapping.EndpointsProperty = {\n  kafkaBootstrapServers: ['kafkaBootstrapServers'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "40873a67859205618e9fdf14849d6fb06e54c484351d593516269927134d63eb"
    },
    "f697971fd9e0b81326c7fddbcb7de482eb4bda21d100721b527fe423169c99dc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nfilter_criteria_property = lambda.CfnEventSourceMapping.FilterCriteriaProperty(\n    filters=[lambda.CfnEventSourceMapping.FilterProperty(\n        pattern=\"pattern\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nFilterCriteriaProperty filterCriteriaProperty = new FilterCriteriaProperty {\n    Filters = new [] { new FilterProperty {\n        Pattern = \"pattern\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nFilterCriteriaProperty filterCriteriaProperty = FilterCriteriaProperty.builder()\n        .filters(List.of(FilterProperty.builder()\n                .pattern(\"pattern\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst filterCriteriaProperty: lambda.CfnEventSourceMapping.FilterCriteriaProperty = {\n  filters: [{\n    pattern: 'pattern',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventSourceMapping.FilterCriteriaProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventSourceMapping.FilterCriteriaProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst filterCriteriaProperty: lambda.CfnEventSourceMapping.FilterCriteriaProperty = {\n  filters: [{\n    pattern: 'pattern',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "88ed7c7122c88a243af423654874393c96e0381eabf4e66a424a734beb42b0de"
    },
    "ce3d6b69d7195ac0b573d07b20cd34531d3399fe999decafed7101cd7e98ade5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nfilter_property = lambda.CfnEventSourceMapping.FilterProperty(\n    pattern=\"pattern\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nFilterProperty filterProperty = new FilterProperty {\n    Pattern = \"pattern\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nFilterProperty filterProperty = FilterProperty.builder()\n        .pattern(\"pattern\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst filterProperty: lambda.CfnEventSourceMapping.FilterProperty = {\n  pattern: 'pattern',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventSourceMapping.FilterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventSourceMapping.FilterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst filterProperty: lambda.CfnEventSourceMapping.FilterProperty = {\n  pattern: 'pattern',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "8107166dc6f21c9568c38a53991bdf808ecf70dd44d3f9897e0373fa59713bde"
    },
    "0922e24a2bf5cb80d9be23a0b49c2b4054e05dafa9eaf6ab93aacbf0580bdc0c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\non_failure_property = lambda.CfnEventSourceMapping.OnFailureProperty(\n    destination=\"destination\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nOnFailureProperty onFailureProperty = new OnFailureProperty {\n    Destination = \"destination\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nOnFailureProperty onFailureProperty = OnFailureProperty.builder()\n        .destination(\"destination\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst onFailureProperty: lambda.CfnEventSourceMapping.OnFailureProperty = {\n  destination: 'destination',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventSourceMapping.OnFailureProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventSourceMapping.OnFailureProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst onFailureProperty: lambda.CfnEventSourceMapping.OnFailureProperty = {\n  destination: 'destination',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7c499c3a1367d276565036ab999c203427af7b77c28987d00eb59d1f529dbbed"
    },
    "b42704258bd426aa5d6820fd857e6e0f97cc80eca427f86ae8f173d7dc17c77e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nself_managed_event_source_property = lambda.CfnEventSourceMapping.SelfManagedEventSourceProperty(\n    endpoints=lambda.CfnEventSourceMapping.EndpointsProperty(\n        kafka_bootstrap_servers=[\"kafkaBootstrapServers\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nSelfManagedEventSourceProperty selfManagedEventSourceProperty = new SelfManagedEventSourceProperty {\n    Endpoints = new EndpointsProperty {\n        KafkaBootstrapServers = new [] { \"kafkaBootstrapServers\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nSelfManagedEventSourceProperty selfManagedEventSourceProperty = SelfManagedEventSourceProperty.builder()\n        .endpoints(EndpointsProperty.builder()\n                .kafkaBootstrapServers(List.of(\"kafkaBootstrapServers\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst selfManagedEventSourceProperty: lambda.CfnEventSourceMapping.SelfManagedEventSourceProperty = {\n  endpoints: {\n    kafkaBootstrapServers: ['kafkaBootstrapServers'],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventSourceMapping.SelfManagedEventSourceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventSourceMapping.SelfManagedEventSourceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst selfManagedEventSourceProperty: lambda.CfnEventSourceMapping.SelfManagedEventSourceProperty = {\n  endpoints: {\n    kafkaBootstrapServers: ['kafkaBootstrapServers'],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8909bb1c23f9bfcb5720bbfa1ecfa069489a5499027c91629b59f6c7447e53e2"
    },
    "1309d19c4cf3909892a9243ec20d04c9e4495e829ce2f7691ed577beec39fe1b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nsource_access_configuration_property = lambda.CfnEventSourceMapping.SourceAccessConfigurationProperty(\n    type=\"type\",\n    uri=\"uri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nSourceAccessConfigurationProperty sourceAccessConfigurationProperty = new SourceAccessConfigurationProperty {\n    Type = \"type\",\n    Uri = \"uri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nSourceAccessConfigurationProperty sourceAccessConfigurationProperty = SourceAccessConfigurationProperty.builder()\n        .type(\"type\")\n        .uri(\"uri\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst sourceAccessConfigurationProperty: lambda.CfnEventSourceMapping.SourceAccessConfigurationProperty = {\n  type: 'type',\n  uri: 'uri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventSourceMapping.SourceAccessConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventSourceMapping.SourceAccessConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceAccessConfigurationProperty: lambda.CfnEventSourceMapping.SourceAccessConfigurationProperty = {\n  type: 'type',\n  uri: 'uri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d738dfbc08b2be752a50dd33d98156b944669b5ca573bd6126fd88dcfa92093c"
    },
    "2e6f9f635b8e89370781aae0a9391ecd380df188e91b8b1b5e54e43c14bfd757": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_event_source_mapping_props = lambda.CfnEventSourceMappingProps(\n    function_name=\"functionName\",\n\n    # the properties below are optional\n    batch_size=123,\n    bisect_batch_on_function_error=False,\n    destination_config=lambda.CfnEventSourceMapping.DestinationConfigProperty(\n        on_failure=lambda.CfnEventSourceMapping.OnFailureProperty(\n            destination=\"destination\"\n        )\n    ),\n    enabled=False,\n    event_source_arn=\"eventSourceArn\",\n    filter_criteria=lambda.CfnEventSourceMapping.FilterCriteriaProperty(\n        filters=[lambda.CfnEventSourceMapping.FilterProperty(\n            pattern=\"pattern\"\n        )]\n    ),\n    function_response_types=[\"functionResponseTypes\"],\n    maximum_batching_window_in_seconds=123,\n    maximum_record_age_in_seconds=123,\n    maximum_retry_attempts=123,\n    parallelization_factor=123,\n    queues=[\"queues\"],\n    self_managed_event_source=lambda.CfnEventSourceMapping.SelfManagedEventSourceProperty(\n        endpoints=lambda.CfnEventSourceMapping.EndpointsProperty(\n            kafka_bootstrap_servers=[\"kafkaBootstrapServers\"]\n        )\n    ),\n    source_access_configurations=[lambda.CfnEventSourceMapping.SourceAccessConfigurationProperty(\n        type=\"type\",\n        uri=\"uri\"\n    )],\n    starting_position=\"startingPosition\",\n    starting_position_timestamp=123,\n    topics=[\"topics\"],\n    tumbling_window_in_seconds=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnEventSourceMappingProps cfnEventSourceMappingProps = new CfnEventSourceMappingProps {\n    FunctionName = \"functionName\",\n\n    // the properties below are optional\n    BatchSize = 123,\n    BisectBatchOnFunctionError = false,\n    DestinationConfig = new DestinationConfigProperty {\n        OnFailure = new OnFailureProperty {\n            Destination = \"destination\"\n        }\n    },\n    Enabled = false,\n    EventSourceArn = \"eventSourceArn\",\n    FilterCriteria = new FilterCriteriaProperty {\n        Filters = new [] { new FilterProperty {\n            Pattern = \"pattern\"\n        } }\n    },\n    FunctionResponseTypes = new [] { \"functionResponseTypes\" },\n    MaximumBatchingWindowInSeconds = 123,\n    MaximumRecordAgeInSeconds = 123,\n    MaximumRetryAttempts = 123,\n    ParallelizationFactor = 123,\n    Queues = new [] { \"queues\" },\n    SelfManagedEventSource = new SelfManagedEventSourceProperty {\n        Endpoints = new EndpointsProperty {\n            KafkaBootstrapServers = new [] { \"kafkaBootstrapServers\" }\n        }\n    },\n    SourceAccessConfigurations = new [] { new SourceAccessConfigurationProperty {\n        Type = \"type\",\n        Uri = \"uri\"\n    } },\n    StartingPosition = \"startingPosition\",\n    StartingPositionTimestamp = 123,\n    Topics = new [] { \"topics\" },\n    TumblingWindowInSeconds = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnEventSourceMappingProps cfnEventSourceMappingProps = CfnEventSourceMappingProps.builder()\n        .functionName(\"functionName\")\n\n        // the properties below are optional\n        .batchSize(123)\n        .bisectBatchOnFunctionError(false)\n        .destinationConfig(DestinationConfigProperty.builder()\n                .onFailure(OnFailureProperty.builder()\n                        .destination(\"destination\")\n                        .build())\n                .build())\n        .enabled(false)\n        .eventSourceArn(\"eventSourceArn\")\n        .filterCriteria(FilterCriteriaProperty.builder()\n                .filters(List.of(FilterProperty.builder()\n                        .pattern(\"pattern\")\n                        .build()))\n                .build())\n        .functionResponseTypes(List.of(\"functionResponseTypes\"))\n        .maximumBatchingWindowInSeconds(123)\n        .maximumRecordAgeInSeconds(123)\n        .maximumRetryAttempts(123)\n        .parallelizationFactor(123)\n        .queues(List.of(\"queues\"))\n        .selfManagedEventSource(SelfManagedEventSourceProperty.builder()\n                .endpoints(EndpointsProperty.builder()\n                        .kafkaBootstrapServers(List.of(\"kafkaBootstrapServers\"))\n                        .build())\n                .build())\n        .sourceAccessConfigurations(List.of(SourceAccessConfigurationProperty.builder()\n                .type(\"type\")\n                .uri(\"uri\")\n                .build()))\n        .startingPosition(\"startingPosition\")\n        .startingPositionTimestamp(123)\n        .topics(List.of(\"topics\"))\n        .tumblingWindowInSeconds(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnEventSourceMappingProps: lambda.CfnEventSourceMappingProps = {\n  functionName: 'functionName',\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnFunctionError: false,\n  destinationConfig: {\n    onFailure: {\n      destination: 'destination',\n    },\n  },\n  enabled: false,\n  eventSourceArn: 'eventSourceArn',\n  filterCriteria: {\n    filters: [{\n      pattern: 'pattern',\n    }],\n  },\n  functionResponseTypes: ['functionResponseTypes'],\n  maximumBatchingWindowInSeconds: 123,\n  maximumRecordAgeInSeconds: 123,\n  maximumRetryAttempts: 123,\n  parallelizationFactor: 123,\n  queues: ['queues'],\n  selfManagedEventSource: {\n    endpoints: {\n      kafkaBootstrapServers: ['kafkaBootstrapServers'],\n    },\n  },\n  sourceAccessConfigurations: [{\n    type: 'type',\n    uri: 'uri',\n  }],\n  startingPosition: 'startingPosition',\n  startingPositionTimestamp: 123,\n  topics: ['topics'],\n  tumblingWindowInSeconds: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnEventSourceMappingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnEventSourceMappingProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventSourceMappingProps: lambda.CfnEventSourceMappingProps = {\n  functionName: 'functionName',\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnFunctionError: false,\n  destinationConfig: {\n    onFailure: {\n      destination: 'destination',\n    },\n  },\n  enabled: false,\n  eventSourceArn: 'eventSourceArn',\n  filterCriteria: {\n    filters: [{\n      pattern: 'pattern',\n    }],\n  },\n  functionResponseTypes: ['functionResponseTypes'],\n  maximumBatchingWindowInSeconds: 123,\n  maximumRecordAgeInSeconds: 123,\n  maximumRetryAttempts: 123,\n  parallelizationFactor: 123,\n  queues: ['queues'],\n  selfManagedEventSource: {\n    endpoints: {\n      kafkaBootstrapServers: ['kafkaBootstrapServers'],\n    },\n  },\n  sourceAccessConfigurations: [{\n    type: 'type',\n    uri: 'uri',\n  }],\n  startingPosition: 'startingPosition',\n  startingPositionTimestamp: 123,\n  topics: ['topics'],\n  tumblingWindowInSeconds: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 12,
        "75": 31,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 6,
        "193": 8,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 27,
        "290": 1
      },
      "fqnsFingerprint": "6a7a34825a38c2f5ec3f6718adbd2cad751273a4729d92a3a938ac77e24ab8c0"
    },
    "4089905d745e2cd3b2f48b18d08152f57c78fdce4d59e7a8476c2ce7f0f8dfa4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_function = lambda_.CfnFunction(self, \"MyCfnFunction\",\n    code=lambda.CfnFunction.CodeProperty(\n        image_uri=\"imageUri\",\n        s3_bucket=\"s3Bucket\",\n        s3_key=\"s3Key\",\n        s3_object_version=\"s3ObjectVersion\",\n        zip_file=\"zipFile\"\n    ),\n    role=\"role\",\n\n    # the properties below are optional\n    architectures=[\"architectures\"],\n    code_signing_config_arn=\"codeSigningConfigArn\",\n    dead_letter_config=lambda.CfnFunction.DeadLetterConfigProperty(\n        target_arn=\"targetArn\"\n    ),\n    description=\"description\",\n    environment=lambda.CfnFunction.EnvironmentProperty(\n        variables={\n            \"variables_key\": \"variables\"\n        }\n    ),\n    file_system_configs=[lambda.CfnFunction.FileSystemConfigProperty(\n        arn=\"arn\",\n        local_mount_path=\"localMountPath\"\n    )],\n    function_name=\"functionName\",\n    handler=\"handler\",\n    image_config=lambda.CfnFunction.ImageConfigProperty(\n        command=[\"command\"],\n        entry_point=[\"entryPoint\"],\n        working_directory=\"workingDirectory\"\n    ),\n    kms_key_arn=\"kmsKeyArn\",\n    layers=[\"layers\"],\n    memory_size=123,\n    package_type=\"packageType\",\n    reserved_concurrent_executions=123,\n    runtime=\"runtime\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    timeout=123,\n    tracing_config=lambda.CfnFunction.TracingConfigProperty(\n        mode=\"mode\"\n    ),\n    vpc_config=lambda.CfnFunction.VpcConfigProperty(\n        security_group_ids=[\"securityGroupIds\"],\n        subnet_ids=[\"subnetIds\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnFunction cfnFunction = new CfnFunction(this, \"MyCfnFunction\", new CfnFunctionProps {\n    Code = new CodeProperty {\n        ImageUri = \"imageUri\",\n        S3Bucket = \"s3Bucket\",\n        S3Key = \"s3Key\",\n        S3ObjectVersion = \"s3ObjectVersion\",\n        ZipFile = \"zipFile\"\n    },\n    Role = \"role\",\n\n    // the properties below are optional\n    Architectures = new [] { \"architectures\" },\n    CodeSigningConfigArn = \"codeSigningConfigArn\",\n    DeadLetterConfig = new DeadLetterConfigProperty {\n        TargetArn = \"targetArn\"\n    },\n    Description = \"description\",\n    Environment = new EnvironmentProperty {\n        Variables = new Dictionary<string, string> {\n            { \"variablesKey\", \"variables\" }\n        }\n    },\n    FileSystemConfigs = new [] { new FileSystemConfigProperty {\n        Arn = \"arn\",\n        LocalMountPath = \"localMountPath\"\n    } },\n    FunctionName = \"functionName\",\n    Handler = \"handler\",\n    ImageConfig = new ImageConfigProperty {\n        Command = new [] { \"command\" },\n        EntryPoint = new [] { \"entryPoint\" },\n        WorkingDirectory = \"workingDirectory\"\n    },\n    KmsKeyArn = \"kmsKeyArn\",\n    Layers = new [] { \"layers\" },\n    MemorySize = 123,\n    PackageType = \"packageType\",\n    ReservedConcurrentExecutions = 123,\n    Runtime = \"runtime\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Timeout = 123,\n    TracingConfig = new TracingConfigProperty {\n        Mode = \"mode\"\n    },\n    VpcConfig = new VpcConfigProperty {\n        SecurityGroupIds = new [] { \"securityGroupIds\" },\n        SubnetIds = new [] { \"subnetIds\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnFunction cfnFunction = CfnFunction.Builder.create(this, \"MyCfnFunction\")\n        .code(CodeProperty.builder()\n                .imageUri(\"imageUri\")\n                .s3Bucket(\"s3Bucket\")\n                .s3Key(\"s3Key\")\n                .s3ObjectVersion(\"s3ObjectVersion\")\n                .zipFile(\"zipFile\")\n                .build())\n        .role(\"role\")\n\n        // the properties below are optional\n        .architectures(List.of(\"architectures\"))\n        .codeSigningConfigArn(\"codeSigningConfigArn\")\n        .deadLetterConfig(DeadLetterConfigProperty.builder()\n                .targetArn(\"targetArn\")\n                .build())\n        .description(\"description\")\n        .environment(EnvironmentProperty.builder()\n                .variables(Map.of(\n                        \"variablesKey\", \"variables\"))\n                .build())\n        .fileSystemConfigs(List.of(FileSystemConfigProperty.builder()\n                .arn(\"arn\")\n                .localMountPath(\"localMountPath\")\n                .build()))\n        .functionName(\"functionName\")\n        .handler(\"handler\")\n        .imageConfig(ImageConfigProperty.builder()\n                .command(List.of(\"command\"))\n                .entryPoint(List.of(\"entryPoint\"))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .kmsKeyArn(\"kmsKeyArn\")\n        .layers(List.of(\"layers\"))\n        .memorySize(123)\n        .packageType(\"packageType\")\n        .reservedConcurrentExecutions(123)\n        .runtime(\"runtime\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .timeout(123)\n        .tracingConfig(TracingConfigProperty.builder()\n                .mode(\"mode\")\n                .build())\n        .vpcConfig(VpcConfigProperty.builder()\n                .securityGroupIds(List.of(\"securityGroupIds\"))\n                .subnetIds(List.of(\"subnetIds\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnFunction = new lambda.CfnFunction(this, 'MyCfnFunction', {\n  code: {\n    imageUri: 'imageUri',\n    s3Bucket: 's3Bucket',\n    s3Key: 's3Key',\n    s3ObjectVersion: 's3ObjectVersion',\n    zipFile: 'zipFile',\n  },\n  role: 'role',\n\n  // the properties below are optional\n  architectures: ['architectures'],\n  codeSigningConfigArn: 'codeSigningConfigArn',\n  deadLetterConfig: {\n    targetArn: 'targetArn',\n  },\n  description: 'description',\n  environment: {\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  fileSystemConfigs: [{\n    arn: 'arn',\n    localMountPath: 'localMountPath',\n  }],\n  functionName: 'functionName',\n  handler: 'handler',\n  imageConfig: {\n    command: ['command'],\n    entryPoint: ['entryPoint'],\n    workingDirectory: 'workingDirectory',\n  },\n  kmsKeyArn: 'kmsKeyArn',\n  layers: ['layers'],\n  memorySize: 123,\n  packageType: 'packageType',\n  reservedConcurrentExecutions: 123,\n  runtime: 'runtime',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeout: 123,\n  tracingConfig: {\n    mode: 'mode',\n  },\n  vpcConfig: {\n    securityGroupIds: ['securityGroupIds'],\n    subnetIds: ['subnetIds'],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnFunction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnFunction",
        "@aws-cdk/aws-lambda.CfnFunctionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnFunction = new lambda.CfnFunction(this, 'MyCfnFunction', {\n  code: {\n    imageUri: 'imageUri',\n    s3Bucket: 's3Bucket',\n    s3Key: 's3Key',\n    s3ObjectVersion: 's3ObjectVersion',\n    zipFile: 'zipFile',\n  },\n  role: 'role',\n\n  // the properties below are optional\n  architectures: ['architectures'],\n  codeSigningConfigArn: 'codeSigningConfigArn',\n  deadLetterConfig: {\n    targetArn: 'targetArn',\n  },\n  description: 'description',\n  environment: {\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  fileSystemConfigs: [{\n    arn: 'arn',\n    localMountPath: 'localMountPath',\n  }],\n  functionName: 'functionName',\n  handler: 'handler',\n  imageConfig: {\n    command: ['command'],\n    entryPoint: ['entryPoint'],\n    workingDirectory: 'workingDirectory',\n  },\n  kmsKeyArn: 'kmsKeyArn',\n  layers: ['layers'],\n  memorySize: 123,\n  packageType: 'packageType',\n  reservedConcurrentExecutions: 123,\n  runtime: 'runtime',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeout: 123,\n  tracingConfig: {\n    mode: 'mode',\n  },\n  vpcConfig: {\n    securityGroupIds: ['securityGroupIds'],\n    subnetIds: ['subnetIds'],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 29,
        "75": 43,
        "104": 1,
        "192": 8,
        "193": 10,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 39,
        "290": 1
      },
      "fqnsFingerprint": "2482d8d986b761402beade2877a10c91e1f930aee367c805c46b7a359b5efbca"
    },
    "a8cb6cdbf45729d594e1eb61eb4fe5dccd4c8b3bea709634cb4dd8e322fc9ecd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncode_property = lambda.CfnFunction.CodeProperty(\n    image_uri=\"imageUri\",\n    s3_bucket=\"s3Bucket\",\n    s3_key=\"s3Key\",\n    s3_object_version=\"s3ObjectVersion\",\n    zip_file=\"zipFile\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCodeProperty codeProperty = new CodeProperty {\n    ImageUri = \"imageUri\",\n    S3Bucket = \"s3Bucket\",\n    S3Key = \"s3Key\",\n    S3ObjectVersion = \"s3ObjectVersion\",\n    ZipFile = \"zipFile\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCodeProperty codeProperty = CodeProperty.builder()\n        .imageUri(\"imageUri\")\n        .s3Bucket(\"s3Bucket\")\n        .s3Key(\"s3Key\")\n        .s3ObjectVersion(\"s3ObjectVersion\")\n        .zipFile(\"zipFile\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst codeProperty: lambda.CfnFunction.CodeProperty = {\n  imageUri: 'imageUri',\n  s3Bucket: 's3Bucket',\n  s3Key: 's3Key',\n  s3ObjectVersion: 's3ObjectVersion',\n  zipFile: 'zipFile',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnFunction.CodeProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnFunction.CodeProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeProperty: lambda.CfnFunction.CodeProperty = {\n  imageUri: 'imageUri',\n  s3Bucket: 's3Bucket',\n  s3Key: 's3Key',\n  s3ObjectVersion: 's3ObjectVersion',\n  zipFile: 'zipFile',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fb72ee382b206cd828e20fe16e154609957bb7062546e28c1aa6b648ec261218"
    },
    "2404cf2e05325fbe8975c13fc465d6add3590787ff920abdcffee33c02929a62": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ndead_letter_config_property = lambda.CfnFunction.DeadLetterConfigProperty(\n    target_arn=\"targetArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nDeadLetterConfigProperty deadLetterConfigProperty = new DeadLetterConfigProperty {\n    TargetArn = \"targetArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nDeadLetterConfigProperty deadLetterConfigProperty = DeadLetterConfigProperty.builder()\n        .targetArn(\"targetArn\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst deadLetterConfigProperty: lambda.CfnFunction.DeadLetterConfigProperty = {\n  targetArn: 'targetArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnFunction.DeadLetterConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnFunction.DeadLetterConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deadLetterConfigProperty: lambda.CfnFunction.DeadLetterConfigProperty = {\n  targetArn: 'targetArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a65b436e8862515c4b295ae41a73e90fc9b8870661405797707e08b0928f3ee"
    },
    "426600e87e434ce3e58d38e2fcbe5257decf7a2c4db4deb29a2ea33e679c73e6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nenvironment_property = lambda.CfnFunction.EnvironmentProperty(\n    variables={\n        \"variables_key\": \"variables\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nEnvironmentProperty environmentProperty = new EnvironmentProperty {\n    Variables = new Dictionary<string, string> {\n        { \"variablesKey\", \"variables\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nEnvironmentProperty environmentProperty = EnvironmentProperty.builder()\n        .variables(Map.of(\n                \"variablesKey\", \"variables\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst environmentProperty: lambda.CfnFunction.EnvironmentProperty = {\n  variables: {\n    variablesKey: 'variables',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnFunction.EnvironmentProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnFunction.EnvironmentProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst environmentProperty: lambda.CfnFunction.EnvironmentProperty = {\n  variables: {\n    variablesKey: 'variables',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0cbf5d326e8b53b9de9588db009ab215ce777dd65e284a6795ac7533026b5c5e"
    },
    "c8e195a6d0b620d54c0fdf4fa7c3aea93f6da6441bee2d503eb187c6b9145b50": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nfile_system_config_property = lambda.CfnFunction.FileSystemConfigProperty(\n    arn=\"arn\",\n    local_mount_path=\"localMountPath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nFileSystemConfigProperty fileSystemConfigProperty = new FileSystemConfigProperty {\n    Arn = \"arn\",\n    LocalMountPath = \"localMountPath\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nFileSystemConfigProperty fileSystemConfigProperty = FileSystemConfigProperty.builder()\n        .arn(\"arn\")\n        .localMountPath(\"localMountPath\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst fileSystemConfigProperty: lambda.CfnFunction.FileSystemConfigProperty = {\n  arn: 'arn',\n  localMountPath: 'localMountPath',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnFunction.FileSystemConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnFunction.FileSystemConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fileSystemConfigProperty: lambda.CfnFunction.FileSystemConfigProperty = {\n  arn: 'arn',\n  localMountPath: 'localMountPath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ca3b5fc4c2c0e24b0f17f09c04383b0223d649eda9ae2ebf40100b01bcfa6701"
    },
    "dee99c6ed7be055dd6926eb79117714716bc10e3cfc879bf25e3a366f0b8eea8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nimage_config_property = lambda.CfnFunction.ImageConfigProperty(\n    command=[\"command\"],\n    entry_point=[\"entryPoint\"],\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nImageConfigProperty imageConfigProperty = new ImageConfigProperty {\n    Command = new [] { \"command\" },\n    EntryPoint = new [] { \"entryPoint\" },\n    WorkingDirectory = \"workingDirectory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nImageConfigProperty imageConfigProperty = ImageConfigProperty.builder()\n        .command(List.of(\"command\"))\n        .entryPoint(List.of(\"entryPoint\"))\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst imageConfigProperty: lambda.CfnFunction.ImageConfigProperty = {\n  command: ['command'],\n  entryPoint: ['entryPoint'],\n  workingDirectory: 'workingDirectory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnFunction.ImageConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnFunction.ImageConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst imageConfigProperty: lambda.CfnFunction.ImageConfigProperty = {\n  command: ['command'],\n  entryPoint: ['entryPoint'],\n  workingDirectory: 'workingDirectory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d10e8beb7ec0d80e731b910b81be7dbd49759880302b65c52d805b121e8f0083"
    },
    "cc86f5ef19fa2006bf36ca83fef623146927c668721a57b45be9a5e8c02f45b7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ntracing_config_property = lambda.CfnFunction.TracingConfigProperty(\n    mode=\"mode\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nTracingConfigProperty tracingConfigProperty = new TracingConfigProperty {\n    Mode = \"mode\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nTracingConfigProperty tracingConfigProperty = TracingConfigProperty.builder()\n        .mode(\"mode\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst tracingConfigProperty: lambda.CfnFunction.TracingConfigProperty = {\n  mode: 'mode',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnFunction.TracingConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnFunction.TracingConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tracingConfigProperty: lambda.CfnFunction.TracingConfigProperty = {\n  mode: 'mode',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d0fe5c2dfbf28707d5a4090a7c7023d5e371001d586ec4b0b2dc717bfda43745"
    },
    "a999777dfb8090870e281fbe05215c12a33d4f8c0a792337ad436c731350dfda": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nvpc_config_property = lambda.CfnFunction.VpcConfigProperty(\n    security_group_ids=[\"securityGroupIds\"],\n    subnet_ids=[\"subnetIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nVpcConfigProperty vpcConfigProperty = new VpcConfigProperty {\n    SecurityGroupIds = new [] { \"securityGroupIds\" },\n    SubnetIds = new [] { \"subnetIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nVpcConfigProperty vpcConfigProperty = VpcConfigProperty.builder()\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .subnetIds(List.of(\"subnetIds\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst vpcConfigProperty: lambda.CfnFunction.VpcConfigProperty = {\n  securityGroupIds: ['securityGroupIds'],\n  subnetIds: ['subnetIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnFunction.VpcConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnFunction.VpcConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpcConfigProperty: lambda.CfnFunction.VpcConfigProperty = {\n  securityGroupIds: ['securityGroupIds'],\n  subnetIds: ['subnetIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "30af728aa2a87a2120ffc75a89e3f92c233569c1184b5c02896ce79746c8e493"
    },
    "b0d02826b2bfea1e3c902c128dfadfcd947b1c9c21ceb29b542e9b7d73fcfd0d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_function_props = lambda.CfnFunctionProps(\n    code=lambda.CfnFunction.CodeProperty(\n        image_uri=\"imageUri\",\n        s3_bucket=\"s3Bucket\",\n        s3_key=\"s3Key\",\n        s3_object_version=\"s3ObjectVersion\",\n        zip_file=\"zipFile\"\n    ),\n    role=\"role\",\n\n    # the properties below are optional\n    architectures=[\"architectures\"],\n    code_signing_config_arn=\"codeSigningConfigArn\",\n    dead_letter_config=lambda.CfnFunction.DeadLetterConfigProperty(\n        target_arn=\"targetArn\"\n    ),\n    description=\"description\",\n    environment=lambda.CfnFunction.EnvironmentProperty(\n        variables={\n            \"variables_key\": \"variables\"\n        }\n    ),\n    file_system_configs=[lambda.CfnFunction.FileSystemConfigProperty(\n        arn=\"arn\",\n        local_mount_path=\"localMountPath\"\n    )],\n    function_name=\"functionName\",\n    handler=\"handler\",\n    image_config=lambda.CfnFunction.ImageConfigProperty(\n        command=[\"command\"],\n        entry_point=[\"entryPoint\"],\n        working_directory=\"workingDirectory\"\n    ),\n    kms_key_arn=\"kmsKeyArn\",\n    layers=[\"layers\"],\n    memory_size=123,\n    package_type=\"packageType\",\n    reserved_concurrent_executions=123,\n    runtime=\"runtime\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    timeout=123,\n    tracing_config=lambda.CfnFunction.TracingConfigProperty(\n        mode=\"mode\"\n    ),\n    vpc_config=lambda.CfnFunction.VpcConfigProperty(\n        security_group_ids=[\"securityGroupIds\"],\n        subnet_ids=[\"subnetIds\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnFunctionProps cfnFunctionProps = new CfnFunctionProps {\n    Code = new CodeProperty {\n        ImageUri = \"imageUri\",\n        S3Bucket = \"s3Bucket\",\n        S3Key = \"s3Key\",\n        S3ObjectVersion = \"s3ObjectVersion\",\n        ZipFile = \"zipFile\"\n    },\n    Role = \"role\",\n\n    // the properties below are optional\n    Architectures = new [] { \"architectures\" },\n    CodeSigningConfigArn = \"codeSigningConfigArn\",\n    DeadLetterConfig = new DeadLetterConfigProperty {\n        TargetArn = \"targetArn\"\n    },\n    Description = \"description\",\n    Environment = new EnvironmentProperty {\n        Variables = new Dictionary<string, string> {\n            { \"variablesKey\", \"variables\" }\n        }\n    },\n    FileSystemConfigs = new [] { new FileSystemConfigProperty {\n        Arn = \"arn\",\n        LocalMountPath = \"localMountPath\"\n    } },\n    FunctionName = \"functionName\",\n    Handler = \"handler\",\n    ImageConfig = new ImageConfigProperty {\n        Command = new [] { \"command\" },\n        EntryPoint = new [] { \"entryPoint\" },\n        WorkingDirectory = \"workingDirectory\"\n    },\n    KmsKeyArn = \"kmsKeyArn\",\n    Layers = new [] { \"layers\" },\n    MemorySize = 123,\n    PackageType = \"packageType\",\n    ReservedConcurrentExecutions = 123,\n    Runtime = \"runtime\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Timeout = 123,\n    TracingConfig = new TracingConfigProperty {\n        Mode = \"mode\"\n    },\n    VpcConfig = new VpcConfigProperty {\n        SecurityGroupIds = new [] { \"securityGroupIds\" },\n        SubnetIds = new [] { \"subnetIds\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnFunctionProps cfnFunctionProps = CfnFunctionProps.builder()\n        .code(CodeProperty.builder()\n                .imageUri(\"imageUri\")\n                .s3Bucket(\"s3Bucket\")\n                .s3Key(\"s3Key\")\n                .s3ObjectVersion(\"s3ObjectVersion\")\n                .zipFile(\"zipFile\")\n                .build())\n        .role(\"role\")\n\n        // the properties below are optional\n        .architectures(List.of(\"architectures\"))\n        .codeSigningConfigArn(\"codeSigningConfigArn\")\n        .deadLetterConfig(DeadLetterConfigProperty.builder()\n                .targetArn(\"targetArn\")\n                .build())\n        .description(\"description\")\n        .environment(EnvironmentProperty.builder()\n                .variables(Map.of(\n                        \"variablesKey\", \"variables\"))\n                .build())\n        .fileSystemConfigs(List.of(FileSystemConfigProperty.builder()\n                .arn(\"arn\")\n                .localMountPath(\"localMountPath\")\n                .build()))\n        .functionName(\"functionName\")\n        .handler(\"handler\")\n        .imageConfig(ImageConfigProperty.builder()\n                .command(List.of(\"command\"))\n                .entryPoint(List.of(\"entryPoint\"))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .kmsKeyArn(\"kmsKeyArn\")\n        .layers(List.of(\"layers\"))\n        .memorySize(123)\n        .packageType(\"packageType\")\n        .reservedConcurrentExecutions(123)\n        .runtime(\"runtime\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .timeout(123)\n        .tracingConfig(TracingConfigProperty.builder()\n                .mode(\"mode\")\n                .build())\n        .vpcConfig(VpcConfigProperty.builder()\n                .securityGroupIds(List.of(\"securityGroupIds\"))\n                .subnetIds(List.of(\"subnetIds\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnFunctionProps: lambda.CfnFunctionProps = {\n  code: {\n    imageUri: 'imageUri',\n    s3Bucket: 's3Bucket',\n    s3Key: 's3Key',\n    s3ObjectVersion: 's3ObjectVersion',\n    zipFile: 'zipFile',\n  },\n  role: 'role',\n\n  // the properties below are optional\n  architectures: ['architectures'],\n  codeSigningConfigArn: 'codeSigningConfigArn',\n  deadLetterConfig: {\n    targetArn: 'targetArn',\n  },\n  description: 'description',\n  environment: {\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  fileSystemConfigs: [{\n    arn: 'arn',\n    localMountPath: 'localMountPath',\n  }],\n  functionName: 'functionName',\n  handler: 'handler',\n  imageConfig: {\n    command: ['command'],\n    entryPoint: ['entryPoint'],\n    workingDirectory: 'workingDirectory',\n  },\n  kmsKeyArn: 'kmsKeyArn',\n  layers: ['layers'],\n  memorySize: 123,\n  packageType: 'packageType',\n  reservedConcurrentExecutions: 123,\n  runtime: 'runtime',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeout: 123,\n  tracingConfig: {\n    mode: 'mode',\n  },\n  vpcConfig: {\n    securityGroupIds: ['securityGroupIds'],\n    subnetIds: ['subnetIds'],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnFunctionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnFunctionProps: lambda.CfnFunctionProps = {\n  code: {\n    imageUri: 'imageUri',\n    s3Bucket: 's3Bucket',\n    s3Key: 's3Key',\n    s3ObjectVersion: 's3ObjectVersion',\n    zipFile: 'zipFile',\n  },\n  role: 'role',\n\n  // the properties below are optional\n  architectures: ['architectures'],\n  codeSigningConfigArn: 'codeSigningConfigArn',\n  deadLetterConfig: {\n    targetArn: 'targetArn',\n  },\n  description: 'description',\n  environment: {\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  fileSystemConfigs: [{\n    arn: 'arn',\n    localMountPath: 'localMountPath',\n  }],\n  functionName: 'functionName',\n  handler: 'handler',\n  imageConfig: {\n    command: ['command'],\n    entryPoint: ['entryPoint'],\n    workingDirectory: 'workingDirectory',\n  },\n  kmsKeyArn: 'kmsKeyArn',\n  layers: ['layers'],\n  memorySize: 123,\n  packageType: 'packageType',\n  reservedConcurrentExecutions: 123,\n  runtime: 'runtime',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeout: 123,\n  tracingConfig: {\n    mode: 'mode',\n  },\n  vpcConfig: {\n    securityGroupIds: ['securityGroupIds'],\n    subnetIds: ['subnetIds'],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 28,
        "75": 43,
        "153": 1,
        "169": 1,
        "192": 8,
        "193": 10,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 39,
        "290": 1
      },
      "fqnsFingerprint": "62410e5a0a903ad430591e87a8d733f9470d9cef661c652b02484ff964168db2"
    },
    "29c72ae54bb8c191217be44fc4da8d2bc5e8b8948c8969b9cc9aef9b1f48986d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_layer_version = lambda_.CfnLayerVersion(self, \"MyCfnLayerVersion\",\n    content=lambda.CfnLayerVersion.ContentProperty(\n        s3_bucket=\"s3Bucket\",\n        s3_key=\"s3Key\",\n\n        # the properties below are optional\n        s3_object_version=\"s3ObjectVersion\"\n    ),\n\n    # the properties below are optional\n    compatible_architectures=[\"compatibleArchitectures\"],\n    compatible_runtimes=[\"compatibleRuntimes\"],\n    description=\"description\",\n    layer_name=\"layerName\",\n    license_info=\"licenseInfo\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnLayerVersion cfnLayerVersion = new CfnLayerVersion(this, \"MyCfnLayerVersion\", new CfnLayerVersionProps {\n    Content = new ContentProperty {\n        S3Bucket = \"s3Bucket\",\n        S3Key = \"s3Key\",\n\n        // the properties below are optional\n        S3ObjectVersion = \"s3ObjectVersion\"\n    },\n\n    // the properties below are optional\n    CompatibleArchitectures = new [] { \"compatibleArchitectures\" },\n    CompatibleRuntimes = new [] { \"compatibleRuntimes\" },\n    Description = \"description\",\n    LayerName = \"layerName\",\n    LicenseInfo = \"licenseInfo\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnLayerVersion cfnLayerVersion = CfnLayerVersion.Builder.create(this, \"MyCfnLayerVersion\")\n        .content(ContentProperty.builder()\n                .s3Bucket(\"s3Bucket\")\n                .s3Key(\"s3Key\")\n\n                // the properties below are optional\n                .s3ObjectVersion(\"s3ObjectVersion\")\n                .build())\n\n        // the properties below are optional\n        .compatibleArchitectures(List.of(\"compatibleArchitectures\"))\n        .compatibleRuntimes(List.of(\"compatibleRuntimes\"))\n        .description(\"description\")\n        .layerName(\"layerName\")\n        .licenseInfo(\"licenseInfo\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnLayerVersion = new lambda.CfnLayerVersion(this, 'MyCfnLayerVersion', {\n  content: {\n    s3Bucket: 's3Bucket',\n    s3Key: 's3Key',\n\n    // the properties below are optional\n    s3ObjectVersion: 's3ObjectVersion',\n  },\n\n  // the properties below are optional\n  compatibleArchitectures: ['compatibleArchitectures'],\n  compatibleRuntimes: ['compatibleRuntimes'],\n  description: 'description',\n  layerName: 'layerName',\n  licenseInfo: 'licenseInfo',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnLayerVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnLayerVersion",
        "@aws-cdk/aws-lambda.CfnLayerVersionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnLayerVersion = new lambda.CfnLayerVersion(this, 'MyCfnLayerVersion', {\n  content: {\n    s3Bucket: 's3Bucket',\n    s3Key: 's3Key',\n\n    // the properties below are optional\n    s3ObjectVersion: 's3ObjectVersion',\n  },\n\n  // the properties below are optional\n  compatibleArchitectures: ['compatibleArchitectures'],\n  compatibleRuntimes: ['compatibleRuntimes'],\n  description: 'description',\n  layerName: 'layerName',\n  licenseInfo: 'licenseInfo',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 13,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "eb8b5172764ff32cbdc0064b0071e5036a3ef5f5699f0cae9b15120e91c55ca0"
    },
    "37f6f9323354ea66dd0f413e857a48eef75da6dc37006f089152a0dc83bc1179": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncontent_property = lambda.CfnLayerVersion.ContentProperty(\n    s3_bucket=\"s3Bucket\",\n    s3_key=\"s3Key\",\n\n    # the properties below are optional\n    s3_object_version=\"s3ObjectVersion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nContentProperty contentProperty = new ContentProperty {\n    S3Bucket = \"s3Bucket\",\n    S3Key = \"s3Key\",\n\n    // the properties below are optional\n    S3ObjectVersion = \"s3ObjectVersion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nContentProperty contentProperty = ContentProperty.builder()\n        .s3Bucket(\"s3Bucket\")\n        .s3Key(\"s3Key\")\n\n        // the properties below are optional\n        .s3ObjectVersion(\"s3ObjectVersion\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst contentProperty: lambda.CfnLayerVersion.ContentProperty = {\n  s3Bucket: 's3Bucket',\n  s3Key: 's3Key',\n\n  // the properties below are optional\n  s3ObjectVersion: 's3ObjectVersion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnLayerVersion.ContentProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnLayerVersion.ContentProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst contentProperty: lambda.CfnLayerVersion.ContentProperty = {\n  s3Bucket: 's3Bucket',\n  s3Key: 's3Key',\n\n  // the properties below are optional\n  s3ObjectVersion: 's3ObjectVersion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0a00bfd7b05906d498f3ccf43f4a0dbf077921605d0043ac7eac63e312dcbf15"
    },
    "83600785a287188aaffc373c4418246c835b01e2a4c471638a8bb88e20b73b97": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_layer_version_permission = lambda_.CfnLayerVersionPermission(self, \"MyCfnLayerVersionPermission\",\n    action=\"action\",\n    layer_version_arn=\"layerVersionArn\",\n    principal=\"principal\",\n\n    # the properties below are optional\n    organization_id=\"organizationId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnLayerVersionPermission cfnLayerVersionPermission = new CfnLayerVersionPermission(this, \"MyCfnLayerVersionPermission\", new CfnLayerVersionPermissionProps {\n    Action = \"action\",\n    LayerVersionArn = \"layerVersionArn\",\n    Principal = \"principal\",\n\n    // the properties below are optional\n    OrganizationId = \"organizationId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnLayerVersionPermission cfnLayerVersionPermission = CfnLayerVersionPermission.Builder.create(this, \"MyCfnLayerVersionPermission\")\n        .action(\"action\")\n        .layerVersionArn(\"layerVersionArn\")\n        .principal(\"principal\")\n\n        // the properties below are optional\n        .organizationId(\"organizationId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnLayerVersionPermission = new lambda.CfnLayerVersionPermission(this, 'MyCfnLayerVersionPermission', {\n  action: 'action',\n  layerVersionArn: 'layerVersionArn',\n  principal: 'principal',\n\n  // the properties below are optional\n  organizationId: 'organizationId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnLayerVersionPermission"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnLayerVersionPermission",
        "@aws-cdk/aws-lambda.CfnLayerVersionPermissionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnLayerVersionPermission = new lambda.CfnLayerVersionPermission(this, 'MyCfnLayerVersionPermission', {\n  action: 'action',\n  layerVersionArn: 'layerVersionArn',\n  principal: 'principal',\n\n  // the properties below are optional\n  organizationId: 'organizationId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "73cff8da106e27f9ddc4505e14f7236d346eb6d4404bb718effdea252460f372"
    },
    "8198eb6b2c608b9eb8cf6929450b5c7b456869821ca050c0f705b6ad9c44c87b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_layer_version_permission_props = lambda.CfnLayerVersionPermissionProps(\n    action=\"action\",\n    layer_version_arn=\"layerVersionArn\",\n    principal=\"principal\",\n\n    # the properties below are optional\n    organization_id=\"organizationId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnLayerVersionPermissionProps cfnLayerVersionPermissionProps = new CfnLayerVersionPermissionProps {\n    Action = \"action\",\n    LayerVersionArn = \"layerVersionArn\",\n    Principal = \"principal\",\n\n    // the properties below are optional\n    OrganizationId = \"organizationId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnLayerVersionPermissionProps cfnLayerVersionPermissionProps = CfnLayerVersionPermissionProps.builder()\n        .action(\"action\")\n        .layerVersionArn(\"layerVersionArn\")\n        .principal(\"principal\")\n\n        // the properties below are optional\n        .organizationId(\"organizationId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnLayerVersionPermissionProps: lambda.CfnLayerVersionPermissionProps = {\n  action: 'action',\n  layerVersionArn: 'layerVersionArn',\n  principal: 'principal',\n\n  // the properties below are optional\n  organizationId: 'organizationId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnLayerVersionPermissionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnLayerVersionPermissionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnLayerVersionPermissionProps: lambda.CfnLayerVersionPermissionProps = {\n  action: 'action',\n  layerVersionArn: 'layerVersionArn',\n  principal: 'principal',\n\n  // the properties below are optional\n  organizationId: 'organizationId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "f936c0f1b5f549eb48729f0bfb8fe3d4a1688882b1d2d68b22b0fac20fa44f56"
    },
    "f3884dfd86bd4b10283246e45c005bce44b2534d864b54330944afb4b88635f0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_layer_version_props = lambda.CfnLayerVersionProps(\n    content=lambda.CfnLayerVersion.ContentProperty(\n        s3_bucket=\"s3Bucket\",\n        s3_key=\"s3Key\",\n\n        # the properties below are optional\n        s3_object_version=\"s3ObjectVersion\"\n    ),\n\n    # the properties below are optional\n    compatible_architectures=[\"compatibleArchitectures\"],\n    compatible_runtimes=[\"compatibleRuntimes\"],\n    description=\"description\",\n    layer_name=\"layerName\",\n    license_info=\"licenseInfo\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnLayerVersionProps cfnLayerVersionProps = new CfnLayerVersionProps {\n    Content = new ContentProperty {\n        S3Bucket = \"s3Bucket\",\n        S3Key = \"s3Key\",\n\n        // the properties below are optional\n        S3ObjectVersion = \"s3ObjectVersion\"\n    },\n\n    // the properties below are optional\n    CompatibleArchitectures = new [] { \"compatibleArchitectures\" },\n    CompatibleRuntimes = new [] { \"compatibleRuntimes\" },\n    Description = \"description\",\n    LayerName = \"layerName\",\n    LicenseInfo = \"licenseInfo\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnLayerVersionProps cfnLayerVersionProps = CfnLayerVersionProps.builder()\n        .content(ContentProperty.builder()\n                .s3Bucket(\"s3Bucket\")\n                .s3Key(\"s3Key\")\n\n                // the properties below are optional\n                .s3ObjectVersion(\"s3ObjectVersion\")\n                .build())\n\n        // the properties below are optional\n        .compatibleArchitectures(List.of(\"compatibleArchitectures\"))\n        .compatibleRuntimes(List.of(\"compatibleRuntimes\"))\n        .description(\"description\")\n        .layerName(\"layerName\")\n        .licenseInfo(\"licenseInfo\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnLayerVersionProps: lambda.CfnLayerVersionProps = {\n  content: {\n    s3Bucket: 's3Bucket',\n    s3Key: 's3Key',\n\n    // the properties below are optional\n    s3ObjectVersion: 's3ObjectVersion',\n  },\n\n  // the properties below are optional\n  compatibleArchitectures: ['compatibleArchitectures'],\n  compatibleRuntimes: ['compatibleRuntimes'],\n  description: 'description',\n  layerName: 'layerName',\n  licenseInfo: 'licenseInfo',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnLayerVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnLayerVersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnLayerVersionProps: lambda.CfnLayerVersionProps = {\n  content: {\n    s3Bucket: 's3Bucket',\n    s3Key: 's3Key',\n\n    // the properties below are optional\n    s3ObjectVersion: 's3ObjectVersion',\n  },\n\n  // the properties below are optional\n  compatibleArchitectures: ['compatibleArchitectures'],\n  compatibleRuntimes: ['compatibleRuntimes'],\n  description: 'description',\n  layerName: 'layerName',\n  licenseInfo: 'licenseInfo',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 13,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "ad7186a9a6932856a3d0a1671227a6edbd351c6ac03b8bc6b61a1b321a89da35"
    },
    "7a1be7456df601a16c182db0d6fa4d2e47188d488a1cb77b988ed1b76ee0c4ca": {
      "translations": {
        "python": {
          "source": "lambda_stack = cdk.Stack(app, \"LambdaStack\")\nlambda_code = lambda_.Code.from_cfn_parameters()\nlambda_.Function(lambda_stack, \"Lambda\",\n    code=lambda_code,\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_10_X\n)\n# other resources that your Lambda needs, added to the lambdaStack...\n\npipeline_stack = cdk.Stack(app, \"PipelineStack\")\npipeline = codepipeline.Pipeline(pipeline_stack, \"Pipeline\")\n\n# add the source code repository containing this code to your Pipeline,\n# and the source code of the Lambda Function, if they're separate\ncdk_source_output = codepipeline.Artifact()\ncdk_source_action = codepipeline_actions.CodeCommitSourceAction(\n    repository=codecommit.Repository(pipeline_stack, \"CdkCodeRepo\",\n        repository_name=\"CdkCodeRepo\"\n    ),\n    action_name=\"CdkCode_Source\",\n    output=cdk_source_output\n)\nlambda_source_output = codepipeline.Artifact()\nlambda_source_action = codepipeline_actions.CodeCommitSourceAction(\n    repository=codecommit.Repository(pipeline_stack, \"LambdaCodeRepo\",\n        repository_name=\"LambdaCodeRepo\"\n    ),\n    action_name=\"LambdaCode_Source\",\n    output=lambda_source_output\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[cdk_source_action, lambda_source_action]\n)\n\n# synthesize the Lambda CDK template, using CodeBuild\n# the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n# adjust the build environment and/or commands accordingly\ncdk_build_project = codebuild.Project(pipeline_stack, \"CdkBuildProject\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    ),\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"install\": {\n                \"commands\": \"npm install\"\n            },\n            \"build\": {\n                \"commands\": [\"npm run build\", \"npm run cdk synth LambdaStack -- -o .\"\n                ]\n            }\n        },\n        \"artifacts\": {\n            \"files\": \"LambdaStack.template.yaml\"\n        }\n    })\n)\ncdk_build_output = codepipeline.Artifact()\ncdk_build_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"CDK_Build\",\n    project=cdk_build_project,\n    input=cdk_source_output,\n    outputs=[cdk_build_output]\n)\n\n# build your Lambda code, using CodeBuild\n# again, this example assumes your Lambda is written in TypeScript/JavaScript -\n# make sure to adjust the build environment and/or commands if they don't match your specific situation\nlambda_build_project = codebuild.Project(pipeline_stack, \"LambdaBuildProject\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    ),\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"install\": {\n                \"commands\": \"npm install\"\n            },\n            \"build\": {\n                \"commands\": \"npm run build\"\n            }\n        },\n        \"artifacts\": {\n            \"files\": [\"index.js\", \"node_modules/**/*\"\n            ]\n        }\n    })\n)\nlambda_build_output = codepipeline.Artifact()\nlambda_build_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"Lambda_Build\",\n    project=lambda_build_project,\n    input=lambda_source_output,\n    outputs=[lambda_build_output]\n)\n\npipeline.add_stage(\n    stage_name=\"Build\",\n    actions=[cdk_build_action, lambda_build_action]\n)\n\n# finally, deploy your Lambda Stack\npipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[\n        codepipeline_actions.CloudFormationCreateUpdateStackAction(\n            action_name=\"Lambda_CFN_Deploy\",\n            template_path=cdk_build_output.at_path(\"LambdaStack.template.yaml\"),\n            stack_name=\"LambdaStackDeployedName\",\n            admin_permissions=True,\n            parameter_overrides=lambda_code.assign(lambda_build_output.s3_location),\n            extra_inputs=[lambda_build_output\n            ]\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Stack lambdaStack = new Stack(app, \"LambdaStack\");\nCfnParametersCode lambdaCode = Code.FromCfnParameters();\nnew Function(lambdaStack, \"Lambda\", new FunctionProps {\n    Code = lambdaCode,\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_10_X\n});\n// other resources that your Lambda needs, added to the lambdaStack...\n\nStack pipelineStack = new Stack(app, \"PipelineStack\");\nPipeline pipeline = new Pipeline(pipelineStack, \"Pipeline\");\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nArtifact cdkSourceOutput = new Artifact();\nCodeCommitSourceAction cdkSourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    Repository = new Repository(pipelineStack, \"CdkCodeRepo\", new RepositoryProps {\n        RepositoryName = \"CdkCodeRepo\"\n    }),\n    ActionName = \"CdkCode_Source\",\n    Output = cdkSourceOutput\n});\nArtifact lambdaSourceOutput = new Artifact();\nCodeCommitSourceAction lambdaSourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    Repository = new Repository(pipelineStack, \"LambdaCodeRepo\", new RepositoryProps {\n        RepositoryName = \"LambdaCodeRepo\"\n    }),\n    ActionName = \"LambdaCode_Source\",\n    Output = lambdaSourceOutput\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { cdkSourceAction, lambdaSourceAction }\n});\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nProject cdkBuildProject = new Project(pipelineStack, \"CdkBuildProject\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    },\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string>> {\n            { \"install\", new Struct {\n                Commands = \"npm install\"\n            } },\n            { \"build\", new Struct {\n                Commands = new [] { \"npm run build\", \"npm run cdk synth LambdaStack -- -o .\" }\n            } }\n        } },\n        { \"artifacts\", new Dictionary<string, string> {\n            { \"files\", \"LambdaStack.template.yaml\" }\n        } }\n    })\n});\nArtifact cdkBuildOutput = new Artifact();\nCodeBuildAction cdkBuildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CDK_Build\",\n    Project = cdkBuildProject,\n    Input = cdkSourceOutput,\n    Outputs = new [] { cdkBuildOutput }\n});\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nProject lambdaBuildProject = new Project(pipelineStack, \"LambdaBuildProject\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    },\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string>> {\n            { \"install\", new Struct {\n                Commands = \"npm install\"\n            } },\n            { \"build\", new Struct {\n                Commands = \"npm run build\"\n            } }\n        } },\n        { \"artifacts\", new Dictionary<string, string[]> {\n            { \"files\", new [] { \"index.js\", \"node_modules/**/*\" } }\n        } }\n    })\n});\nArtifact lambdaBuildOutput = new Artifact();\nCodeBuildAction lambdaBuildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"Lambda_Build\",\n    Project = lambdaBuildProject,\n    Input = lambdaSourceOutput,\n    Outputs = new [] { lambdaBuildOutput }\n});\n\npipeline.AddStage(new StageOptions {\n    StageName = \"Build\",\n    Actions = new [] { cdkBuildAction, lambdaBuildAction }\n});\n\n// finally, deploy your Lambda Stack\npipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] {\n        new CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n            ActionName = \"Lambda_CFN_Deploy\",\n            TemplatePath = cdkBuildOutput.AtPath(\"LambdaStack.template.yaml\"),\n            StackName = \"LambdaStackDeployedName\",\n            AdminPermissions = true,\n            ParameterOverrides = lambdaCode.Assign(lambdaBuildOutput.S3Location),\n            ExtraInputs = new [] { lambdaBuildOutput }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack lambdaStack = new Stack(app, \"LambdaStack\");\nCfnParametersCode lambdaCode = Code.fromCfnParameters();\nFunction.Builder.create(lambdaStack, \"Lambda\")\n        .code(lambdaCode)\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_10_X)\n        .build();\n// other resources that your Lambda needs, added to the lambdaStack...\n\nStack pipelineStack = new Stack(app, \"PipelineStack\");\nPipeline pipeline = new Pipeline(pipelineStack, \"Pipeline\");\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nArtifact cdkSourceOutput = new Artifact();\nCodeCommitSourceAction cdkSourceAction = CodeCommitSourceAction.Builder.create()\n        .repository(Repository.Builder.create(pipelineStack, \"CdkCodeRepo\")\n                .repositoryName(\"CdkCodeRepo\")\n                .build())\n        .actionName(\"CdkCode_Source\")\n        .output(cdkSourceOutput)\n        .build();\nArtifact lambdaSourceOutput = new Artifact();\nCodeCommitSourceAction lambdaSourceAction = CodeCommitSourceAction.Builder.create()\n        .repository(Repository.Builder.create(pipelineStack, \"LambdaCodeRepo\")\n                .repositoryName(\"LambdaCodeRepo\")\n                .build())\n        .actionName(\"LambdaCode_Source\")\n        .output(lambdaSourceOutput)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(cdkSourceAction, lambdaSourceAction))\n        .build());\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nProject cdkBuildProject = Project.Builder.create(pipelineStack, \"CdkBuildProject\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0)\n                .build())\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"install\", Map.of(\n                                \"commands\", \"npm install\"),\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"npm run build\", \"npm run cdk synth LambdaStack -- -o .\"))),\n                \"artifacts\", Map.of(\n                        \"files\", \"LambdaStack.template.yaml\"))))\n        .build();\nArtifact cdkBuildOutput = new Artifact();\nCodeBuildAction cdkBuildAction = CodeBuildAction.Builder.create()\n        .actionName(\"CDK_Build\")\n        .project(cdkBuildProject)\n        .input(cdkSourceOutput)\n        .outputs(List.of(cdkBuildOutput))\n        .build();\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nProject lambdaBuildProject = Project.Builder.create(pipelineStack, \"LambdaBuildProject\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0)\n                .build())\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"install\", Map.of(\n                                \"commands\", \"npm install\"),\n                        \"build\", Map.of(\n                                \"commands\", \"npm run build\")),\n                \"artifacts\", Map.of(\n                        \"files\", List.of(\"index.js\", \"node_modules/**/*\")))))\n        .build();\nArtifact lambdaBuildOutput = new Artifact();\nCodeBuildAction lambdaBuildAction = CodeBuildAction.Builder.create()\n        .actionName(\"Lambda_Build\")\n        .project(lambdaBuildProject)\n        .input(lambdaSourceOutput)\n        .outputs(List.of(lambdaBuildOutput))\n        .build();\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Build\")\n        .actions(List.of(cdkBuildAction, lambdaBuildAction))\n        .build());\n\n// finally, deploy your Lambda Stack\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(\n            CloudFormationCreateUpdateStackAction.Builder.create()\n                    .actionName(\"Lambda_CFN_Deploy\")\n                    .templatePath(cdkBuildOutput.atPath(\"LambdaStack.template.yaml\"))\n                    .stackName(\"LambdaStackDeployedName\")\n                    .adminPermissions(true)\n                    .parameterOverrides(lambdaCode.assign(lambdaBuildOutput.getS3Location()))\n                    .extraInputs(List.of(lambdaBuildOutput))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const lambdaStack = new cdk.Stack(app, 'LambdaStack');\nconst lambdaCode = lambda.Code.fromCfnParameters();\nnew lambda.Function(lambdaStack, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n});\n// other resources that your Lambda needs, added to the lambdaStack...\n\nconst pipelineStack = new cdk.Stack(app, 'PipelineStack');\nconst pipeline = new codepipeline.Pipeline(pipelineStack, 'Pipeline');\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nconst cdkSourceOutput = new codepipeline.Artifact();\nconst cdkSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'CdkCodeRepo', {\n    repositoryName: 'CdkCodeRepo',\n  }),\n  actionName: 'CdkCode_Source',\n  output: cdkSourceOutput,\n});\nconst lambdaSourceOutput = new codepipeline.Artifact();\nconst lambdaSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'LambdaCodeRepo', {\n    repositoryName: 'LambdaCodeRepo',\n  }),\n  actionName: 'LambdaCode_Source',\n  output: lambdaSourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [cdkSourceAction, lambdaSourceAction],\n});\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nconst cdkBuildProject = new codebuild.Project(pipelineStack, 'CdkBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: [\n          'npm run build',\n          'npm run cdk synth LambdaStack -- -o .',\n        ],\n      },\n    },\n    artifacts: {\n      files: 'LambdaStack.template.yaml',\n    },\n  }),\n});\nconst cdkBuildOutput = new codepipeline.Artifact();\nconst cdkBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CDK_Build',\n  project: cdkBuildProject,\n  input: cdkSourceOutput,\n  outputs: [cdkBuildOutput],\n});\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nconst lambdaBuildProject = new codebuild.Project(pipelineStack, 'LambdaBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: 'npm run build',\n      },\n    },\n    artifacts: {\n      files: [\n        'index.js',\n        'node_modules/**/*',\n      ],\n    },\n  }),\n});\nconst lambdaBuildOutput = new codepipeline.Artifact();\nconst lambdaBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Lambda_Build',\n  project: lambdaBuildProject,\n  input: lambdaSourceOutput,\n  outputs: [lambdaBuildOutput],\n});\n\npipeline.addStage({\n  stageName: 'Build',\n  actions: [cdkBuildAction, lambdaBuildAction],\n});\n\n// finally, deploy your Lambda Stack\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n      actionName: 'Lambda_CFN_Deploy',\n      templatePath: cdkBuildOutput.atPath('LambdaStack.template.yaml'),\n      stackName: 'LambdaStackDeployedName',\n      adminPermissions: true,\n      parameterOverrides: lambdaCode.assign(lambdaBuildOutput.s3Location),\n      extraInputs: [\n        lambdaBuildOutput,\n      ],\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnParametersCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#UBUNTU_14_04_NODEJS_10_1_0",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-lambda.CfnParametersCode",
        "@aws-cdk/aws-lambda.CfnParametersCode#assign",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromCfnParameters",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X",
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ PipelineStack\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\nimport * as codepipeline_actions from '../lib';\n\nconst app = new cdk.App();\n\n/// !show\nconst lambdaStack = new cdk.Stack(app, 'LambdaStack');\nconst lambdaCode = lambda.Code.fromCfnParameters();\nnew lambda.Function(lambdaStack, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n});\n// other resources that your Lambda needs, added to the lambdaStack...\n\nconst pipelineStack = new cdk.Stack(app, 'PipelineStack');\nconst pipeline = new codepipeline.Pipeline(pipelineStack, 'Pipeline');\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nconst cdkSourceOutput = new codepipeline.Artifact();\nconst cdkSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'CdkCodeRepo', {\n    repositoryName: 'CdkCodeRepo',\n  }),\n  actionName: 'CdkCode_Source',\n  output: cdkSourceOutput,\n});\nconst lambdaSourceOutput = new codepipeline.Artifact();\nconst lambdaSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'LambdaCodeRepo', {\n    repositoryName: 'LambdaCodeRepo',\n  }),\n  actionName: 'LambdaCode_Source',\n  output: lambdaSourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [cdkSourceAction, lambdaSourceAction],\n});\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nconst cdkBuildProject = new codebuild.Project(pipelineStack, 'CdkBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: [\n          'npm run build',\n          'npm run cdk synth LambdaStack -- -o .',\n        ],\n      },\n    },\n    artifacts: {\n      files: 'LambdaStack.template.yaml',\n    },\n  }),\n});\nconst cdkBuildOutput = new codepipeline.Artifact();\nconst cdkBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CDK_Build',\n  project: cdkBuildProject,\n  input: cdkSourceOutput,\n  outputs: [cdkBuildOutput],\n});\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nconst lambdaBuildProject = new codebuild.Project(pipelineStack, 'LambdaBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: 'npm run build',\n      },\n    },\n    artifacts: {\n      files: [\n        'index.js',\n        'node_modules/**/*',\n      ],\n    },\n  }),\n});\nconst lambdaBuildOutput = new codepipeline.Artifact();\nconst lambdaBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Lambda_Build',\n  project: lambdaBuildProject,\n  input: lambdaSourceOutput,\n  outputs: [lambdaBuildOutput],\n});\n\npipeline.addStage({\n  stageName: 'Build',\n  actions: [cdkBuildAction, lambdaBuildAction],\n});\n\n// finally, deploy your Lambda Stack\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n      actionName: 'Lambda_CFN_Deploy',\n      templatePath: cdkBuildOutput.atPath('LambdaStack.template.yaml'),\n      stackName: 'LambdaStackDeployedName',\n      adminPermissions: true,\n      parameterOverrides: lambdaCode.assign(lambdaBuildOutput.s3Location),\n      extraInputs: [\n        lambdaBuildOutput,\n      ],\n    }),\n  ],\n});\n",
      "syntaxKindCounter": {
        "10": 31,
        "75": 153,
        "106": 1,
        "192": 8,
        "193": 25,
        "194": 35,
        "196": 8,
        "197": 17,
        "225": 14,
        "226": 4,
        "242": 14,
        "243": 14,
        "281": 53
      },
      "fqnsFingerprint": "7b8814903f9c36452a671069f321a0827d66ddca1568eb5dca61aa2811f2b64a"
    },
    "331b1a4a1aaef0e38f7265b6a1eefa9a002001ce16b40b38990259e643306c82": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# cfn_parameter: cdk.CfnParameter\n\ncfn_parameters_code_props = lambda.CfnParametersCodeProps(\n    bucket_name_param=cfn_parameter,\n    object_key_param=cfn_parameter\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nCfnParameter cfnParameter;\nCfnParametersCodeProps cfnParametersCodeProps = new CfnParametersCodeProps {\n    BucketNameParam = cfnParameter,\n    ObjectKeyParam = cfnParameter\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nCfnParameter cfnParameter;\n\nCfnParametersCodeProps cfnParametersCodeProps = CfnParametersCodeProps.builder()\n        .bucketNameParam(cfnParameter)\n        .objectKeyParam(cfnParameter)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cfnParameter: cdk.CfnParameter;\nconst cfnParametersCodeProps: lambda.CfnParametersCodeProps = {\n  bucketNameParam: cfnParameter,\n  objectKeyParam: cfnParameter,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnParametersCodeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnParametersCodeProps",
        "@aws-cdk/core.CfnParameter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cfnParameter: cdk.CfnParameter;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnParametersCodeProps: lambda.CfnParametersCodeProps = {\n  bucketNameParam: cfnParameter,\n  objectKeyParam: cfnParameter,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6e9aeb5ee94a33e521e8550038496ebda173d24bc7dcc159e6a7bc1f59323963"
    },
    "6c3fd22f1cb8f49b28f427da5a2c6c23dc799b5a6882c5b6f106531622eede52": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_permission = lambda_.CfnPermission(self, \"MyCfnPermission\",\n    action=\"action\",\n    function_name=\"functionName\",\n    principal=\"principal\",\n\n    # the properties below are optional\n    event_source_token=\"eventSourceToken\",\n    source_account=\"sourceAccount\",\n    source_arn=\"sourceArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnPermission cfnPermission = new CfnPermission(this, \"MyCfnPermission\", new CfnPermissionProps {\n    Action = \"action\",\n    FunctionName = \"functionName\",\n    Principal = \"principal\",\n\n    // the properties below are optional\n    EventSourceToken = \"eventSourceToken\",\n    SourceAccount = \"sourceAccount\",\n    SourceArn = \"sourceArn\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnPermission cfnPermission = CfnPermission.Builder.create(this, \"MyCfnPermission\")\n        .action(\"action\")\n        .functionName(\"functionName\")\n        .principal(\"principal\")\n\n        // the properties below are optional\n        .eventSourceToken(\"eventSourceToken\")\n        .sourceAccount(\"sourceAccount\")\n        .sourceArn(\"sourceArn\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnPermission = new lambda.CfnPermission(this, 'MyCfnPermission', {\n  action: 'action',\n  functionName: 'functionName',\n  principal: 'principal',\n\n  // the properties below are optional\n  eventSourceToken: 'eventSourceToken',\n  sourceAccount: 'sourceAccount',\n  sourceArn: 'sourceArn',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnPermission"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnPermission",
        "@aws-cdk/aws-lambda.CfnPermissionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPermission = new lambda.CfnPermission(this, 'MyCfnPermission', {\n  action: 'action',\n  functionName: 'functionName',\n  principal: 'principal',\n\n  // the properties below are optional\n  eventSourceToken: 'eventSourceToken',\n  sourceAccount: 'sourceAccount',\n  sourceArn: 'sourceArn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "d6c1bb7f8e3c578d04fee5145b676020d8d1eace0aad718cfad4259d519b4bfd"
    },
    "a8193ffcb85c0d009725cc3b7e29e3c405074b78fcf7044273c349178bcb9e88": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_permission_props = lambda.CfnPermissionProps(\n    action=\"action\",\n    function_name=\"functionName\",\n    principal=\"principal\",\n\n    # the properties below are optional\n    event_source_token=\"eventSourceToken\",\n    source_account=\"sourceAccount\",\n    source_arn=\"sourceArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnPermissionProps cfnPermissionProps = new CfnPermissionProps {\n    Action = \"action\",\n    FunctionName = \"functionName\",\n    Principal = \"principal\",\n\n    // the properties below are optional\n    EventSourceToken = \"eventSourceToken\",\n    SourceAccount = \"sourceAccount\",\n    SourceArn = \"sourceArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnPermissionProps cfnPermissionProps = CfnPermissionProps.builder()\n        .action(\"action\")\n        .functionName(\"functionName\")\n        .principal(\"principal\")\n\n        // the properties below are optional\n        .eventSourceToken(\"eventSourceToken\")\n        .sourceAccount(\"sourceAccount\")\n        .sourceArn(\"sourceArn\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnPermissionProps: lambda.CfnPermissionProps = {\n  action: 'action',\n  functionName: 'functionName',\n  principal: 'principal',\n\n  // the properties below are optional\n  eventSourceToken: 'eventSourceToken',\n  sourceAccount: 'sourceAccount',\n  sourceArn: 'sourceArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnPermissionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnPermissionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPermissionProps: lambda.CfnPermissionProps = {\n  action: 'action',\n  functionName: 'functionName',\n  principal: 'principal',\n\n  // the properties below are optional\n  eventSourceToken: 'eventSourceToken',\n  sourceAccount: 'sourceAccount',\n  sourceArn: 'sourceArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "024bd6ba255564428578ea11416b0765096e66481f51b8a936e52075c5fcf292"
    },
    "c4af537a10e820da0681f7518f4b3b150195002e80ffa48638124a443720af97": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_version = lambda_.CfnVersion(self, \"MyCfnVersion\",\n    function_name=\"functionName\",\n\n    # the properties below are optional\n    code_sha256=\"codeSha256\",\n    description=\"description\",\n    provisioned_concurrency_config=lambda.CfnVersion.ProvisionedConcurrencyConfigurationProperty(\n        provisioned_concurrent_executions=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnVersion cfnVersion = new CfnVersion(this, \"MyCfnVersion\", new CfnVersionProps {\n    FunctionName = \"functionName\",\n\n    // the properties below are optional\n    CodeSha256 = \"codeSha256\",\n    Description = \"description\",\n    ProvisionedConcurrencyConfig = new ProvisionedConcurrencyConfigurationProperty {\n        ProvisionedConcurrentExecutions = 123\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnVersion cfnVersion = CfnVersion.Builder.create(this, \"MyCfnVersion\")\n        .functionName(\"functionName\")\n\n        // the properties below are optional\n        .codeSha256(\"codeSha256\")\n        .description(\"description\")\n        .provisionedConcurrencyConfig(ProvisionedConcurrencyConfigurationProperty.builder()\n                .provisionedConcurrentExecutions(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnVersion = new lambda.CfnVersion(this, 'MyCfnVersion', {\n  functionName: 'functionName',\n\n  // the properties below are optional\n  codeSha256: 'codeSha256',\n  description: 'description',\n  provisionedConcurrencyConfig: {\n    provisionedConcurrentExecutions: 123,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnVersion",
        "@aws-cdk/aws-lambda.CfnVersionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVersion = new lambda.CfnVersion(this, 'MyCfnVersion', {\n  functionName: 'functionName',\n\n  // the properties below are optional\n  codeSha256: 'codeSha256',\n  description: 'description',\n  provisionedConcurrencyConfig: {\n    provisionedConcurrentExecutions: 123,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "e71492b6e4721d5deda05f82abe1ae27efcd77fc90e8dce911b07e74f01c327e"
    },
    "87e43a2da26d8a68e6c6f6038ad8b240b6e7f437c4c76e0a8c82adab20083ce6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nprovisioned_concurrency_configuration_property = lambda.CfnVersion.ProvisionedConcurrencyConfigurationProperty(\n    provisioned_concurrent_executions=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nProvisionedConcurrencyConfigurationProperty provisionedConcurrencyConfigurationProperty = new ProvisionedConcurrencyConfigurationProperty {\n    ProvisionedConcurrentExecutions = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nProvisionedConcurrencyConfigurationProperty provisionedConcurrencyConfigurationProperty = ProvisionedConcurrencyConfigurationProperty.builder()\n        .provisionedConcurrentExecutions(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst provisionedConcurrencyConfigurationProperty: lambda.CfnVersion.ProvisionedConcurrencyConfigurationProperty = {\n  provisionedConcurrentExecutions: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnVersion.ProvisionedConcurrencyConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnVersion.ProvisionedConcurrencyConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst provisionedConcurrencyConfigurationProperty: lambda.CfnVersion.ProvisionedConcurrencyConfigurationProperty = {\n  provisionedConcurrentExecutions: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "a6150bbc956a86ef60552cf8b483b69c6ff5a2f94bcee4a3c7ab7f5f2996bc3a"
    },
    "9dabca8066a4b17a7b78fdc832394c2db9d0f13725414c7edd6b9a4deb235a04": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncfn_version_props = lambda.CfnVersionProps(\n    function_name=\"functionName\",\n\n    # the properties below are optional\n    code_sha256=\"codeSha256\",\n    description=\"description\",\n    provisioned_concurrency_config=lambda.CfnVersion.ProvisionedConcurrencyConfigurationProperty(\n        provisioned_concurrent_executions=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCfnVersionProps cfnVersionProps = new CfnVersionProps {\n    FunctionName = \"functionName\",\n\n    // the properties below are optional\n    CodeSha256 = \"codeSha256\",\n    Description = \"description\",\n    ProvisionedConcurrencyConfig = new ProvisionedConcurrencyConfigurationProperty {\n        ProvisionedConcurrentExecutions = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCfnVersionProps cfnVersionProps = CfnVersionProps.builder()\n        .functionName(\"functionName\")\n\n        // the properties below are optional\n        .codeSha256(\"codeSha256\")\n        .description(\"description\")\n        .provisionedConcurrencyConfig(ProvisionedConcurrencyConfigurationProperty.builder()\n                .provisionedConcurrentExecutions(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst cfnVersionProps: lambda.CfnVersionProps = {\n  functionName: 'functionName',\n\n  // the properties below are optional\n  codeSha256: 'codeSha256',\n  description: 'description',\n  provisionedConcurrencyConfig: {\n    provisionedConcurrentExecutions: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CfnVersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVersionProps: lambda.CfnVersionProps = {\n  functionName: 'functionName',\n\n  // the properties below are optional\n  codeSha256: 'codeSha256',\n  description: 'description',\n  provisionedConcurrencyConfig: {\n    provisionedConcurrentExecutions: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b4050031dd2681e3e5c5df7757fd5805b0e116752a4c2a0b20409b022a08a25c"
    },
    "0f42f2910fc71fd03c1ad05e1653eb5cc35655bab4b6989dff7ac1d8796b1ae5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_signer as signer\n\n\nsigning_profile = signer.SigningProfile(self, \"SigningProfile\",\n    platform=signer.Platform.AWS_LAMBDA_SHA384_ECDSA\n)\n\ncode_signing_config = lambda_.CodeSigningConfig(self, \"CodeSigningConfig\",\n    signing_profiles=[signing_profile]\n)\n\nlambda_.Function(self, \"Function\",\n    code_signing_config=code_signing_config,\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Signer;\n\n\nSigningProfile signingProfile = new SigningProfile(this, \"SigningProfile\", new SigningProfileProps {\n    Platform = Platform.AWS_LAMBDA_SHA384_ECDSA\n});\n\nCodeSigningConfig codeSigningConfig = new CodeSigningConfig(this, \"CodeSigningConfig\", new CodeSigningConfigProps {\n    SigningProfiles = new [] { signingProfile }\n});\n\nnew Function(this, \"Function\", new FunctionProps {\n    CodeSigningConfig = codeSigningConfig,\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.signer.*;\n\n\nSigningProfile signingProfile = SigningProfile.Builder.create(this, \"SigningProfile\")\n        .platform(Platform.AWS_LAMBDA_SHA384_ECDSA)\n        .build();\n\nCodeSigningConfig codeSigningConfig = CodeSigningConfig.Builder.create(this, \"CodeSigningConfig\")\n        .signingProfiles(List.of(signingProfile))\n        .build();\n\nFunction.Builder.create(this, \"Function\")\n        .codeSigningConfig(codeSigningConfig)\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as signer from '@aws-cdk/aws-signer';\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Code"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.CodeSigningConfig",
        "@aws-cdk/aws-lambda.CodeSigningConfigProps",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-signer.Platform",
        "@aws-cdk/aws-signer.Platform#AWS_LAMBDA_SHA384_ECDSA",
        "@aws-cdk/aws-signer.SigningProfile",
        "@aws-cdk/aws-signer.SigningProfileProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as signer from '@aws-cdk/aws-signer';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6f13f17c57d841f51c24088e309fa7dcf8cf1c92c148a413f90a6261fd34a27d"
    },
    "48a5555ff5ae80fc356954b9b8682f7a1405cdd46b76426298c8e1511acc79cd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncode_config = lambda.CodeConfig(\n    image=lambda.CodeImageConfig(\n        image_uri=\"imageUri\",\n\n        # the properties below are optional\n        cmd=[\"cmd\"],\n        entrypoint=[\"entrypoint\"],\n        working_directory=\"workingDirectory\"\n    ),\n    inline_code=\"inlineCode\",\n    s3_location=Location(\n        bucket_name=\"bucketName\",\n        object_key=\"objectKey\",\n\n        # the properties below are optional\n        object_version=\"objectVersion\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCodeConfig codeConfig = new CodeConfig {\n    Image = new CodeImageConfig {\n        ImageUri = \"imageUri\",\n\n        // the properties below are optional\n        Cmd = new [] { \"cmd\" },\n        Entrypoint = new [] { \"entrypoint\" },\n        WorkingDirectory = \"workingDirectory\"\n    },\n    InlineCode = \"inlineCode\",\n    S3Location = new Location {\n        BucketName = \"bucketName\",\n        ObjectKey = \"objectKey\",\n\n        // the properties below are optional\n        ObjectVersion = \"objectVersion\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCodeConfig codeConfig = CodeConfig.builder()\n        .image(CodeImageConfig.builder()\n                .imageUri(\"imageUri\")\n\n                // the properties below are optional\n                .cmd(List.of(\"cmd\"))\n                .entrypoint(List.of(\"entrypoint\"))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .inlineCode(\"inlineCode\")\n        .s3Location(Location.builder()\n                .bucketName(\"bucketName\")\n                .objectKey(\"objectKey\")\n\n                // the properties below are optional\n                .objectVersion(\"objectVersion\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst codeConfig: lambda.CodeConfig = {\n  image: {\n    imageUri: 'imageUri',\n\n    // the properties below are optional\n    cmd: ['cmd'],\n    entrypoint: ['entrypoint'],\n    workingDirectory: 'workingDirectory',\n  },\n  inlineCode: 'inlineCode',\n  s3Location: {\n    bucketName: 'bucketName',\n    objectKey: 'objectKey',\n\n    // the properties below are optional\n    objectVersion: 'objectVersion',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CodeConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CodeConfig",
        "@aws-cdk/aws-lambda.CodeImageConfig",
        "@aws-cdk/aws-s3.Location"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeConfig: lambda.CodeConfig = {\n  image: {\n    imageUri: 'imageUri',\n\n    // the properties below are optional\n    cmd: ['cmd'],\n    entrypoint: ['entrypoint'],\n    workingDirectory: 'workingDirectory',\n  },\n  inlineCode: 'inlineCode',\n  s3Location: {\n    bucketName: 'bucketName',\n    objectKey: 'objectKey',\n\n    // the properties below are optional\n    objectVersion: 'objectVersion',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 14,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "d252969285251040944fb8671b4fe2932192ccbdb52bf0937dd0d04889e03ed3"
    },
    "67aa313c70fb79d30705e0c8dbe44a71e26ec037fd74172be9ef1a42ad059bba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ncode_image_config = lambda.CodeImageConfig(\n    image_uri=\"imageUri\",\n\n    # the properties below are optional\n    cmd=[\"cmd\"],\n    entrypoint=[\"entrypoint\"],\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nCodeImageConfig codeImageConfig = new CodeImageConfig {\n    ImageUri = \"imageUri\",\n\n    // the properties below are optional\n    Cmd = new [] { \"cmd\" },\n    Entrypoint = new [] { \"entrypoint\" },\n    WorkingDirectory = \"workingDirectory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nCodeImageConfig codeImageConfig = CodeImageConfig.builder()\n        .imageUri(\"imageUri\")\n\n        // the properties below are optional\n        .cmd(List.of(\"cmd\"))\n        .entrypoint(List.of(\"entrypoint\"))\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst codeImageConfig: lambda.CodeImageConfig = {\n  imageUri: 'imageUri',\n\n  // the properties below are optional\n  cmd: ['cmd'],\n  entrypoint: ['entrypoint'],\n  workingDirectory: 'workingDirectory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CodeImageConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.CodeImageConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeImageConfig: lambda.CodeImageConfig = {\n  imageUri: 'imageUri',\n\n  // the properties below are optional\n  cmd: ['cmd'],\n  entrypoint: ['entrypoint'],\n  workingDirectory: 'workingDirectory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "7c5778fcc14e71368fce1f83b0eab1fc9fca966058cf90e40076e5f9a8e4dc9b"
    },
    "7497c65bd8f57f9bf5d459a663cd9a1bfbf81c9e2f320f31c969e54df6aca2e2": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_signer as signer\n\n\nsigning_profile = signer.SigningProfile(self, \"SigningProfile\",\n    platform=signer.Platform.AWS_LAMBDA_SHA384_ECDSA\n)\n\ncode_signing_config = lambda_.CodeSigningConfig(self, \"CodeSigningConfig\",\n    signing_profiles=[signing_profile]\n)\n\nlambda_.Function(self, \"Function\",\n    code_signing_config=code_signing_config,\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Signer;\n\n\nSigningProfile signingProfile = new SigningProfile(this, \"SigningProfile\", new SigningProfileProps {\n    Platform = Platform.AWS_LAMBDA_SHA384_ECDSA\n});\n\nCodeSigningConfig codeSigningConfig = new CodeSigningConfig(this, \"CodeSigningConfig\", new CodeSigningConfigProps {\n    SigningProfiles = new [] { signingProfile }\n});\n\nnew Function(this, \"Function\", new FunctionProps {\n    CodeSigningConfig = codeSigningConfig,\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.signer.*;\n\n\nSigningProfile signingProfile = SigningProfile.Builder.create(this, \"SigningProfile\")\n        .platform(Platform.AWS_LAMBDA_SHA384_ECDSA)\n        .build();\n\nCodeSigningConfig codeSigningConfig = CodeSigningConfig.Builder.create(this, \"CodeSigningConfig\")\n        .signingProfiles(List.of(signingProfile))\n        .build();\n\nFunction.Builder.create(this, \"Function\")\n        .codeSigningConfig(codeSigningConfig)\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as signer from '@aws-cdk/aws-signer';\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CodeSigningConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.CodeSigningConfig",
        "@aws-cdk/aws-lambda.CodeSigningConfigProps",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-signer.Platform",
        "@aws-cdk/aws-signer.Platform#AWS_LAMBDA_SHA384_ECDSA",
        "@aws-cdk/aws-signer.SigningProfile",
        "@aws-cdk/aws-signer.SigningProfileProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as signer from '@aws-cdk/aws-signer';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6f13f17c57d841f51c24088e309fa7dcf8cf1c92c148a413f90a6261fd34a27d"
    },
    "108bdf2d955b14e04b38b45de37800c87fa32969de2836b70589f359c2b6f130": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_signer as signer\n\n\nsigning_profile = signer.SigningProfile(self, \"SigningProfile\",\n    platform=signer.Platform.AWS_LAMBDA_SHA384_ECDSA\n)\n\ncode_signing_config = lambda_.CodeSigningConfig(self, \"CodeSigningConfig\",\n    signing_profiles=[signing_profile]\n)\n\nlambda_.Function(self, \"Function\",\n    code_signing_config=code_signing_config,\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Signer;\n\n\nSigningProfile signingProfile = new SigningProfile(this, \"SigningProfile\", new SigningProfileProps {\n    Platform = Platform.AWS_LAMBDA_SHA384_ECDSA\n});\n\nCodeSigningConfig codeSigningConfig = new CodeSigningConfig(this, \"CodeSigningConfig\", new CodeSigningConfigProps {\n    SigningProfiles = new [] { signingProfile }\n});\n\nnew Function(this, \"Function\", new FunctionProps {\n    CodeSigningConfig = codeSigningConfig,\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.signer.*;\n\n\nSigningProfile signingProfile = SigningProfile.Builder.create(this, \"SigningProfile\")\n        .platform(Platform.AWS_LAMBDA_SHA384_ECDSA)\n        .build();\n\nCodeSigningConfig codeSigningConfig = CodeSigningConfig.Builder.create(this, \"CodeSigningConfig\")\n        .signingProfiles(List.of(signingProfile))\n        .build();\n\nFunction.Builder.create(this, \"Function\")\n        .codeSigningConfig(codeSigningConfig)\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as signer from '@aws-cdk/aws-signer';\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CodeSigningConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.CodeSigningConfig",
        "@aws-cdk/aws-lambda.CodeSigningConfigProps",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-signer.Platform",
        "@aws-cdk/aws-signer.Platform#AWS_LAMBDA_SHA384_ECDSA",
        "@aws-cdk/aws-signer.SigningProfile",
        "@aws-cdk/aws-signer.SigningProfileProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as signer from '@aws-cdk/aws-signer';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6f13f17c57d841f51c24088e309fa7dcf8cf1c92c148a413f90a6261fd34a27d"
    },
    "2229f814d5bd1d2490f660610d10764f5ce25dbc0fe5b269764cc9ecdf14c4c3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ndestination_config = lambda.DestinationConfig(\n    destination=\"destination\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nDestinationConfig destinationConfig = new DestinationConfig {\n    Destination = \"destination\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nDestinationConfig destinationConfig = DestinationConfig.builder()\n        .destination(\"destination\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst destinationConfig: lambda.DestinationConfig = {\n  destination: 'destination',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.DestinationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DestinationConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst destinationConfig: lambda.DestinationConfig = {\n  destination: 'destination',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "cc8feda4ae3fc622352894ce3bd2f21df633f630b37e2b0765314f8ca6779bc1"
    },
    "8b156329b62ac6382bdeb142f191a929e171f294f58e3a075a517790e8127954": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ndestination_options = lambda.DestinationOptions(\n    type=lambda_.DestinationType.FAILURE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nDestinationOptions destinationOptions = new DestinationOptions {\n    Type = DestinationType.FAILURE\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nDestinationOptions destinationOptions = DestinationOptions.builder()\n        .type(DestinationType.FAILURE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst destinationOptions: lambda.DestinationOptions = {\n  type: lambda.DestinationType.FAILURE,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.DestinationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DestinationOptions",
        "@aws-cdk/aws-lambda.DestinationType",
        "@aws-cdk/aws-lambda.DestinationType#FAILURE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst destinationOptions: lambda.DestinationOptions = {\n  type: lambda.DestinationType.FAILURE,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ea2190d2a1f7cf319c7e6672bd37202a262705ec4ee82f66fd25f8f7d0382ebb"
    },
    "d2e60c3ec7cfc2034be9d953b5fbd9055f89933f88eecfdb7e92e414bdac11e9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ndlq_destination_config = lambda.DlqDestinationConfig(\n    destination=\"destination\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nDlqDestinationConfig dlqDestinationConfig = new DlqDestinationConfig {\n    Destination = \"destination\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nDlqDestinationConfig dlqDestinationConfig = DlqDestinationConfig.builder()\n        .destination(\"destination\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst dlqDestinationConfig: lambda.DlqDestinationConfig = {\n  destination: 'destination',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.DlqDestinationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DlqDestinationConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dlqDestinationConfig: lambda.DlqDestinationConfig = {\n  destination: 'destination',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "865d300055b1274608e8e06114ab5be6ba90e95f13e7eda96c210f7ea50eaa8b"
    },
    "f96247a353101c78f395db7c16519dcbb25a01db16e6f0abfd0439ed6b01a783": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\ndocker_build_asset_options = lambda.DockerBuildAssetOptions(\n    build_args={\n        \"build_args_key\": \"buildArgs\"\n    },\n    file=\"file\",\n    image_path=\"imagePath\",\n    output_path=\"outputPath\",\n    platform=\"platform\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nDockerBuildAssetOptions dockerBuildAssetOptions = new DockerBuildAssetOptions {\n    BuildArgs = new Dictionary<string, string> {\n        { \"buildArgsKey\", \"buildArgs\" }\n    },\n    File = \"file\",\n    ImagePath = \"imagePath\",\n    OutputPath = \"outputPath\",\n    Platform = \"platform\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nDockerBuildAssetOptions dockerBuildAssetOptions = DockerBuildAssetOptions.builder()\n        .buildArgs(Map.of(\n                \"buildArgsKey\", \"buildArgs\"))\n        .file(\"file\")\n        .imagePath(\"imagePath\")\n        .outputPath(\"outputPath\")\n        .platform(\"platform\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst dockerBuildAssetOptions: lambda.DockerBuildAssetOptions = {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  file: 'file',\n  imagePath: 'imagePath',\n  outputPath: 'outputPath',\n  platform: 'platform',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.DockerBuildAssetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DockerBuildAssetOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dockerBuildAssetOptions: lambda.DockerBuildAssetOptions = {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  file: 'file',\n  imagePath: 'imagePath',\n  outputPath: 'outputPath',\n  platform: 'platform',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "20e42b524d63ebfe03d7013edc94cf74e96bb13eabb15c4db38e4d74d625bc2d"
    },
    "9724c8e7504616c03cad4a200ffd67e7be26a3231660f90652fe9c89eb4983d6": {
      "translations": {
        "python": {
          "source": "lambda_.DockerImageFunction(self, \"AssetFunction\",\n    code=lambda_.DockerImageCode.from_image_asset(path.join(__dirname, \"docker-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new DockerImageFunction(this, \"AssetFunction\", new DockerImageFunctionProps {\n    Code = DockerImageCode.FromImageAsset(Join(__dirname, \"docker-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "DockerImageFunction.Builder.create(this, \"AssetFunction\")\n        .code(DockerImageCode.fromImageAsset(join(__dirname, \"docker-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.DockerImageCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DockerImageCode",
        "@aws-cdk/aws-lambda.DockerImageCode#fromImageAsset",
        "@aws-cdk/aws-lambda.DockerImageFunction",
        "@aws-cdk/aws-lambda.DockerImageFunctionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "7a76a568d022e02a53b73950470b6494dd47ba0de44fa34e2cdda62ce1fb09e6"
    },
    "2139d3adbe7c3c8cc485fdef4372aa38d2239aaba784813a00d6c1b6d95ea25d": {
      "translations": {
        "python": {
          "source": "lambda_.DockerImageFunction(self, \"AssetFunction\",\n    code=lambda_.DockerImageCode.from_image_asset(path.join(__dirname, \"docker-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new DockerImageFunction(this, \"AssetFunction\", new DockerImageFunctionProps {\n    Code = DockerImageCode.FromImageAsset(Join(__dirname, \"docker-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "DockerImageFunction.Builder.create(this, \"AssetFunction\")\n        .code(DockerImageCode.fromImageAsset(join(__dirname, \"docker-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.DockerImageFunction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DockerImageCode",
        "@aws-cdk/aws-lambda.DockerImageCode#fromImageAsset",
        "@aws-cdk/aws-lambda.DockerImageFunction",
        "@aws-cdk/aws-lambda.DockerImageFunctionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "7a76a568d022e02a53b73950470b6494dd47ba0de44fa34e2cdda62ce1fb09e6"
    },
    "30205a7ffb64ff6bb3bf672ff9535e9835fca09e052c91daf37d4c5be193b484": {
      "translations": {
        "python": {
          "source": "lambda_.DockerImageFunction(self, \"AssetFunction\",\n    code=lambda_.DockerImageCode.from_image_asset(path.join(__dirname, \"docker-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new DockerImageFunction(this, \"AssetFunction\", new DockerImageFunctionProps {\n    Code = DockerImageCode.FromImageAsset(Join(__dirname, \"docker-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "DockerImageFunction.Builder.create(this, \"AssetFunction\")\n        .code(DockerImageCode.fromImageAsset(join(__dirname, \"docker-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.DockerImageFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DockerImageCode",
        "@aws-cdk/aws-lambda.DockerImageCode#fromImageAsset",
        "@aws-cdk/aws-lambda.DockerImageFunction",
        "@aws-cdk/aws-lambda.DockerImageFunctionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "7a76a568d022e02a53b73950470b6494dd47ba0de44fa34e2cdda62ce1fb09e6"
    },
    "4b1c00f7c45f3efa2bc8b914c8ac88f9934ecd58af8a95374fb6591c72843257": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecr as ecr\nimport aws_cdk.aws_lambda as lambda_\n\n# repository: ecr.Repository\n\necr_image_code = lambda_.EcrImageCode(repository,\n    cmd=[\"cmd\"],\n    entrypoint=[\"entrypoint\"],\n    tag=\"tag\",\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECR;\nusing Amazon.CDK.AWS.Lambda;\n\nRepository repository;\n\nEcrImageCode ecrImageCode = new EcrImageCode(repository, new EcrImageCodeProps {\n    Cmd = new [] { \"cmd\" },\n    Entrypoint = new [] { \"entrypoint\" },\n    Tag = \"tag\",\n    WorkingDirectory = \"workingDirectory\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecr.*;\nimport software.amazon.awscdk.services.lambda.*;\n\nRepository repository;\n\nEcrImageCode ecrImageCode = EcrImageCode.Builder.create(repository)\n        .cmd(List.of(\"cmd\"))\n        .entrypoint(List.of(\"entrypoint\"))\n        .tag(\"tag\")\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const repository: ecr.Repository;\nconst ecrImageCode = new lambda.EcrImageCode(repository, /* all optional props */ {\n  cmd: ['cmd'],\n  entrypoint: ['entrypoint'],\n  tag: 'tag',\n  workingDirectory: 'workingDirectory',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.EcrImageCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-lambda.EcrImageCode",
        "@aws-cdk/aws-lambda.EcrImageCodeProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const repository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecrImageCode = new lambda.EcrImageCode(repository, /* all optional props */ {\n  cmd: ['cmd'],\n  entrypoint: ['entrypoint'],\n  tag: 'tag',\n  workingDirectory: 'workingDirectory',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "772fec4ef91b80aac1910fa3d973b30570507cb0fa7bc182859ff9382ef94729"
    },
    "8e4fe84c44b482d00923fb33afddd6b11059b836b793469f984a49b63db6a15a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\necr_image_code_props = lambda.EcrImageCodeProps(\n    cmd=[\"cmd\"],\n    entrypoint=[\"entrypoint\"],\n    tag=\"tag\",\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nEcrImageCodeProps ecrImageCodeProps = new EcrImageCodeProps {\n    Cmd = new [] { \"cmd\" },\n    Entrypoint = new [] { \"entrypoint\" },\n    Tag = \"tag\",\n    WorkingDirectory = \"workingDirectory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nEcrImageCodeProps ecrImageCodeProps = EcrImageCodeProps.builder()\n        .cmd(List.of(\"cmd\"))\n        .entrypoint(List.of(\"entrypoint\"))\n        .tag(\"tag\")\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst ecrImageCodeProps: lambda.EcrImageCodeProps = {\n  cmd: ['cmd'],\n  entrypoint: ['entrypoint'],\n  tag: 'tag',\n  workingDirectory: 'workingDirectory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.EcrImageCodeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.EcrImageCodeProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecrImageCodeProps: lambda.EcrImageCodeProps = {\n  cmd: ['cmd'],\n  entrypoint: ['entrypoint'],\n  tag: 'tag',\n  workingDirectory: 'workingDirectory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "4bc9764d953f0430be3031fae0b7860ee992a94ff63b0b780eb2d20fdcb80a99"
    },
    "c02fd7a9f01ff093496a25f2457e55623d16d2268676f627c1bf3b761ac7592e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nenvironment_options = lambda.EnvironmentOptions(\n    remove_in_edge=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nEnvironmentOptions environmentOptions = new EnvironmentOptions {\n    RemoveInEdge = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nEnvironmentOptions environmentOptions = EnvironmentOptions.builder()\n        .removeInEdge(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst environmentOptions: lambda.EnvironmentOptions = {\n  removeInEdge: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.EnvironmentOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.EnvironmentOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst environmentOptions: lambda.EnvironmentOptions = {\n  removeInEdge: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7124eae555816de95147772684cb124097a8d7709d181ad0a5734b4941a14772"
    },
    "b2402ad3dd0a804bdfd03bdb6bb790284426aad8c6df4dfce3e3b6c300386c49": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# destination: lambda.IDestination\n# function_: lambda.Function\n\nevent_invoke_config = lambda_.EventInvokeConfig(self, \"MyEventInvokeConfig\",\n    function=function_,\n\n    # the properties below are optional\n    max_event_age=cdk.Duration.minutes(30),\n    on_failure=destination,\n    on_success=destination,\n    qualifier=\"qualifier\",\n    retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nIDestination destination;\nFunction function_;\nEventInvokeConfig eventInvokeConfig = new EventInvokeConfig(this, \"MyEventInvokeConfig\", new EventInvokeConfigProps {\n    Function = function_,\n\n    // the properties below are optional\n    MaxEventAge = Duration.Minutes(30),\n    OnFailure = destination,\n    OnSuccess = destination,\n    Qualifier = \"qualifier\",\n    RetryAttempts = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nIDestination destination;\nFunction function_;\n\nEventInvokeConfig eventInvokeConfig = EventInvokeConfig.Builder.create(this, \"MyEventInvokeConfig\")\n        .function(function_)\n\n        // the properties below are optional\n        .maxEventAge(Duration.minutes(30))\n        .onFailure(destination)\n        .onSuccess(destination)\n        .qualifier(\"qualifier\")\n        .retryAttempts(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const destination: lambda.IDestination;\ndeclare const function_: lambda.Function;\nconst eventInvokeConfig = new lambda.EventInvokeConfig(this, 'MyEventInvokeConfig', {\n  function: function_,\n\n  // the properties below are optional\n  maxEventAge: cdk.Duration.minutes(30),\n  onFailure: destination,\n  onSuccess: destination,\n  qualifier: 'qualifier',\n  retryAttempts: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.EventInvokeConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.EventInvokeConfig",
        "@aws-cdk/aws-lambda.EventInvokeConfigProps",
        "@aws-cdk/aws-lambda.IDestination",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const destination: lambda.IDestination;\ndeclare const function_: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eventInvokeConfig = new lambda.EventInvokeConfig(this, 'MyEventInvokeConfig', {\n  function: function_,\n\n  // the properties below are optional\n  maxEventAge: cdk.Duration.minutes(30),\n  onFailure: destination,\n  onSuccess: destination,\n  qualifier: 'qualifier',\n  retryAttempts: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 23,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "791719b31323551097f4ca80cf0ffc25f6992b0468d78a7500327eb7f8c03fad"
    },
    "76a783c49efcf01d0ee697c08ac1b99c98e7f1e7bc6d15c5eb9ada4e587806d4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# destination: lambda.IDestination\n\nevent_invoke_config_options = lambda.EventInvokeConfigOptions(\n    max_event_age=cdk.Duration.minutes(30),\n    on_failure=destination,\n    on_success=destination,\n    retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nIDestination destination;\nEventInvokeConfigOptions eventInvokeConfigOptions = new EventInvokeConfigOptions {\n    MaxEventAge = Duration.Minutes(30),\n    OnFailure = destination,\n    OnSuccess = destination,\n    RetryAttempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nIDestination destination;\n\nEventInvokeConfigOptions eventInvokeConfigOptions = EventInvokeConfigOptions.builder()\n        .maxEventAge(Duration.minutes(30))\n        .onFailure(destination)\n        .onSuccess(destination)\n        .retryAttempts(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const destination: lambda.IDestination;\nconst eventInvokeConfigOptions: lambda.EventInvokeConfigOptions = {\n  maxEventAge: cdk.Duration.minutes(30),\n  onFailure: destination,\n  onSuccess: destination,\n  retryAttempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.EventInvokeConfigOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.EventInvokeConfigOptions",
        "@aws-cdk/aws-lambda.IDestination",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const destination: lambda.IDestination;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eventInvokeConfigOptions: lambda.EventInvokeConfigOptions = {\n  maxEventAge: cdk.Duration.minutes(30),\n  onFailure: destination,\n  onSuccess: destination,\n  retryAttempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 17,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "2b888b3dab8931ec5a5fc1195197410fd3e846b39ab8f384c14bd166bafe0798"
    },
    "94df6b945dabcd462f590b600d2b1ade85fafd4a21e6049a81ec0e10a881be24": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# destination: lambda.IDestination\n# function_: lambda.Function\n\nevent_invoke_config_props = lambda.EventInvokeConfigProps(\n    function=function_,\n\n    # the properties below are optional\n    max_event_age=cdk.Duration.minutes(30),\n    on_failure=destination,\n    on_success=destination,\n    qualifier=\"qualifier\",\n    retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nIDestination destination;\nFunction function_;\nEventInvokeConfigProps eventInvokeConfigProps = new EventInvokeConfigProps {\n    Function = function_,\n\n    // the properties below are optional\n    MaxEventAge = Duration.Minutes(30),\n    OnFailure = destination,\n    OnSuccess = destination,\n    Qualifier = \"qualifier\",\n    RetryAttempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nIDestination destination;\nFunction function_;\n\nEventInvokeConfigProps eventInvokeConfigProps = EventInvokeConfigProps.builder()\n        .function(function_)\n\n        // the properties below are optional\n        .maxEventAge(Duration.minutes(30))\n        .onFailure(destination)\n        .onSuccess(destination)\n        .qualifier(\"qualifier\")\n        .retryAttempts(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const destination: lambda.IDestination;\ndeclare const function_: lambda.Function;\nconst eventInvokeConfigProps: lambda.EventInvokeConfigProps = {\n  function: function_,\n\n  // the properties below are optional\n  maxEventAge: cdk.Duration.minutes(30),\n  onFailure: destination,\n  onSuccess: destination,\n  qualifier: 'qualifier',\n  retryAttempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.EventInvokeConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.EventInvokeConfigProps",
        "@aws-cdk/aws-lambda.IDestination",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const destination: lambda.IDestination;\ndeclare const function_: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eventInvokeConfigProps: lambda.EventInvokeConfigProps = {\n  function: function_,\n\n  // the properties below are optional\n  maxEventAge: cdk.Duration.minutes(30),\n  onFailure: destination,\n  onSuccess: destination,\n  qualifier: 'qualifier',\n  retryAttempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 23,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "5b8f5e1751d2c4b9cbe40358c541af03408899e39a9c8460feb62fc299592d8f"
    },
    "c3089df92eebb7566475aaa4704000e48098b984821f63bcb63dec96364a6693": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# event_source_dlq: lambda.IEventSourceDlq\n# function_: lambda.Function\n# source_access_configuration_type: lambda.SourceAccessConfigurationType\n\nevent_source_mapping = lambda_.EventSourceMapping(self, \"MyEventSourceMapping\",\n    target=function_,\n\n    # the properties below are optional\n    batch_size=123,\n    bisect_batch_on_error=False,\n    enabled=False,\n    event_source_arn=\"eventSourceArn\",\n    kafka_bootstrap_servers=[\"kafkaBootstrapServers\"],\n    kafka_topic=\"kafkaTopic\",\n    max_batching_window=cdk.Duration.minutes(30),\n    max_record_age=cdk.Duration.minutes(30),\n    on_failure=event_source_dlq,\n    parallelization_factor=123,\n    report_batch_item_failures=False,\n    retry_attempts=123,\n    source_access_configurations=[lambda.SourceAccessConfiguration(\n        type=source_access_configuration_type,\n        uri=\"uri\"\n    )],\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON,\n    tumbling_window=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nIEventSourceDlq eventSourceDlq;\nFunction function_;\nSourceAccessConfigurationType sourceAccessConfigurationType;\nEventSourceMapping eventSourceMapping = new EventSourceMapping(this, \"MyEventSourceMapping\", new EventSourceMappingProps {\n    Target = function_,\n\n    // the properties below are optional\n    BatchSize = 123,\n    BisectBatchOnError = false,\n    Enabled = false,\n    EventSourceArn = \"eventSourceArn\",\n    KafkaBootstrapServers = new [] { \"kafkaBootstrapServers\" },\n    KafkaTopic = \"kafkaTopic\",\n    MaxBatchingWindow = Duration.Minutes(30),\n    MaxRecordAge = Duration.Minutes(30),\n    OnFailure = eventSourceDlq,\n    ParallelizationFactor = 123,\n    ReportBatchItemFailures = false,\n    RetryAttempts = 123,\n    SourceAccessConfigurations = new [] { new SourceAccessConfiguration {\n        Type = sourceAccessConfigurationType,\n        Uri = \"uri\"\n    } },\n    StartingPosition = StartingPosition.TRIM_HORIZON,\n    TumblingWindow = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nIEventSourceDlq eventSourceDlq;\nFunction function_;\nSourceAccessConfigurationType sourceAccessConfigurationType;\n\nEventSourceMapping eventSourceMapping = EventSourceMapping.Builder.create(this, \"MyEventSourceMapping\")\n        .target(function_)\n\n        // the properties below are optional\n        .batchSize(123)\n        .bisectBatchOnError(false)\n        .enabled(false)\n        .eventSourceArn(\"eventSourceArn\")\n        .kafkaBootstrapServers(List.of(\"kafkaBootstrapServers\"))\n        .kafkaTopic(\"kafkaTopic\")\n        .maxBatchingWindow(Duration.minutes(30))\n        .maxRecordAge(Duration.minutes(30))\n        .onFailure(eventSourceDlq)\n        .parallelizationFactor(123)\n        .reportBatchItemFailures(false)\n        .retryAttempts(123)\n        .sourceAccessConfigurations(List.of(SourceAccessConfiguration.builder()\n                .type(sourceAccessConfigurationType)\n                .uri(\"uri\")\n                .build()))\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .tumblingWindow(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const eventSourceDlq: lambda.IEventSourceDlq;\ndeclare const function_: lambda.Function;\ndeclare const sourceAccessConfigurationType: lambda.SourceAccessConfigurationType;\nconst eventSourceMapping = new lambda.EventSourceMapping(this, 'MyEventSourceMapping', {\n  target: function_,\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnError: false,\n  enabled: false,\n  eventSourceArn: 'eventSourceArn',\n  kafkaBootstrapServers: ['kafkaBootstrapServers'],\n  kafkaTopic: 'kafkaTopic',\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  maxRecordAge: cdk.Duration.minutes(30),\n  onFailure: eventSourceDlq,\n  parallelizationFactor: 123,\n  reportBatchItemFailures: false,\n  retryAttempts: 123,\n  sourceAccessConfigurations: [{\n    type: sourceAccessConfigurationType,\n    uri: 'uri',\n  }],\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  tumblingWindow: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.EventSourceMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.EventSourceMapping",
        "@aws-cdk/aws-lambda.EventSourceMappingProps",
        "@aws-cdk/aws-lambda.IEventSourceDlq",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.SourceAccessConfigurationType",
        "@aws-cdk/aws-lambda.StartingPosition",
        "@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const eventSourceDlq: lambda.IEventSourceDlq;\ndeclare const function_: lambda.Function;\ndeclare const sourceAccessConfigurationType: lambda.SourceAccessConfigurationType;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eventSourceMapping = new lambda.EventSourceMapping(this, 'MyEventSourceMapping', {\n  target: function_,\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnError: false,\n  enabled: false,\n  eventSourceArn: 'eventSourceArn',\n  kafkaBootstrapServers: ['kafkaBootstrapServers'],\n  kafkaTopic: 'kafkaTopic',\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  maxRecordAge: cdk.Duration.minutes(30),\n  onFailure: eventSourceDlq,\n  parallelizationFactor: 123,\n  reportBatchItemFailures: false,\n  retryAttempts: 123,\n  sourceAccessConfigurations: [{\n    type: sourceAccessConfigurationType,\n    uri: 'uri',\n  }],\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  tumblingWindow: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 7,
        "75": 47,
        "91": 3,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "dda068fad3448c0bbdd54e434a506ede8db3b3d21d81e6ef999eca52dffcaf20"
    },
    "ed1d06c1f0f38dfaa7c1b60e27f86863bbc1ab33b134e6fd7d9ced1903aa5bd9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# event_source_dlq: lambda.IEventSourceDlq\n# source_access_configuration_type: lambda.SourceAccessConfigurationType\n\nevent_source_mapping_options = lambda.EventSourceMappingOptions(\n    batch_size=123,\n    bisect_batch_on_error=False,\n    enabled=False,\n    event_source_arn=\"eventSourceArn\",\n    kafka_bootstrap_servers=[\"kafkaBootstrapServers\"],\n    kafka_topic=\"kafkaTopic\",\n    max_batching_window=cdk.Duration.minutes(30),\n    max_record_age=cdk.Duration.minutes(30),\n    on_failure=event_source_dlq,\n    parallelization_factor=123,\n    report_batch_item_failures=False,\n    retry_attempts=123,\n    source_access_configurations=[lambda.SourceAccessConfiguration(\n        type=source_access_configuration_type,\n        uri=\"uri\"\n    )],\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON,\n    tumbling_window=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nIEventSourceDlq eventSourceDlq;\nSourceAccessConfigurationType sourceAccessConfigurationType;\nEventSourceMappingOptions eventSourceMappingOptions = new EventSourceMappingOptions {\n    BatchSize = 123,\n    BisectBatchOnError = false,\n    Enabled = false,\n    EventSourceArn = \"eventSourceArn\",\n    KafkaBootstrapServers = new [] { \"kafkaBootstrapServers\" },\n    KafkaTopic = \"kafkaTopic\",\n    MaxBatchingWindow = Duration.Minutes(30),\n    MaxRecordAge = Duration.Minutes(30),\n    OnFailure = eventSourceDlq,\n    ParallelizationFactor = 123,\n    ReportBatchItemFailures = false,\n    RetryAttempts = 123,\n    SourceAccessConfigurations = new [] { new SourceAccessConfiguration {\n        Type = sourceAccessConfigurationType,\n        Uri = \"uri\"\n    } },\n    StartingPosition = StartingPosition.TRIM_HORIZON,\n    TumblingWindow = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nIEventSourceDlq eventSourceDlq;\nSourceAccessConfigurationType sourceAccessConfigurationType;\n\nEventSourceMappingOptions eventSourceMappingOptions = EventSourceMappingOptions.builder()\n        .batchSize(123)\n        .bisectBatchOnError(false)\n        .enabled(false)\n        .eventSourceArn(\"eventSourceArn\")\n        .kafkaBootstrapServers(List.of(\"kafkaBootstrapServers\"))\n        .kafkaTopic(\"kafkaTopic\")\n        .maxBatchingWindow(Duration.minutes(30))\n        .maxRecordAge(Duration.minutes(30))\n        .onFailure(eventSourceDlq)\n        .parallelizationFactor(123)\n        .reportBatchItemFailures(false)\n        .retryAttempts(123)\n        .sourceAccessConfigurations(List.of(SourceAccessConfiguration.builder()\n                .type(sourceAccessConfigurationType)\n                .uri(\"uri\")\n                .build()))\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .tumblingWindow(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const eventSourceDlq: lambda.IEventSourceDlq;\ndeclare const sourceAccessConfigurationType: lambda.SourceAccessConfigurationType;\nconst eventSourceMappingOptions: lambda.EventSourceMappingOptions = {\n  batchSize: 123,\n  bisectBatchOnError: false,\n  enabled: false,\n  eventSourceArn: 'eventSourceArn',\n  kafkaBootstrapServers: ['kafkaBootstrapServers'],\n  kafkaTopic: 'kafkaTopic',\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  maxRecordAge: cdk.Duration.minutes(30),\n  onFailure: eventSourceDlq,\n  parallelizationFactor: 123,\n  reportBatchItemFailures: false,\n  retryAttempts: 123,\n  sourceAccessConfigurations: [{\n    type: sourceAccessConfigurationType,\n    uri: 'uri',\n  }],\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  tumblingWindow: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.EventSourceMappingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.EventSourceMappingOptions",
        "@aws-cdk/aws-lambda.IEventSourceDlq",
        "@aws-cdk/aws-lambda.SourceAccessConfigurationType",
        "@aws-cdk/aws-lambda.StartingPosition",
        "@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const eventSourceDlq: lambda.IEventSourceDlq;\ndeclare const sourceAccessConfigurationType: lambda.SourceAccessConfigurationType;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eventSourceMappingOptions: lambda.EventSourceMappingOptions = {\n  batchSize: 123,\n  bisectBatchOnError: false,\n  enabled: false,\n  eventSourceArn: 'eventSourceArn',\n  kafkaBootstrapServers: ['kafkaBootstrapServers'],\n  kafkaTopic: 'kafkaTopic',\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  maxRecordAge: cdk.Duration.minutes(30),\n  onFailure: eventSourceDlq,\n  parallelizationFactor: 123,\n  reportBatchItemFailures: false,\n  retryAttempts: 123,\n  sourceAccessConfigurations: [{\n    type: sourceAccessConfigurationType,\n    uri: 'uri',\n  }],\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  tumblingWindow: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 6,
        "75": 42,
        "91": 3,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "194": 8,
        "196": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "b7d5116ad4ace1ed3d30d871180842062284b29fe3088c03d072592cd868087f"
    },
    "d0d78137bf87dd831441c5087bd23758e6100c09c9dbbe1eaadc8387c2d7dc0f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# event_source_dlq: lambda.IEventSourceDlq\n# function_: lambda.Function\n# source_access_configuration_type: lambda.SourceAccessConfigurationType\n\nevent_source_mapping_props = lambda.EventSourceMappingProps(\n    target=function_,\n\n    # the properties below are optional\n    batch_size=123,\n    bisect_batch_on_error=False,\n    enabled=False,\n    event_source_arn=\"eventSourceArn\",\n    kafka_bootstrap_servers=[\"kafkaBootstrapServers\"],\n    kafka_topic=\"kafkaTopic\",\n    max_batching_window=cdk.Duration.minutes(30),\n    max_record_age=cdk.Duration.minutes(30),\n    on_failure=event_source_dlq,\n    parallelization_factor=123,\n    report_batch_item_failures=False,\n    retry_attempts=123,\n    source_access_configurations=[lambda.SourceAccessConfiguration(\n        type=source_access_configuration_type,\n        uri=\"uri\"\n    )],\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON,\n    tumbling_window=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nIEventSourceDlq eventSourceDlq;\nFunction function_;\nSourceAccessConfigurationType sourceAccessConfigurationType;\nEventSourceMappingProps eventSourceMappingProps = new EventSourceMappingProps {\n    Target = function_,\n\n    // the properties below are optional\n    BatchSize = 123,\n    BisectBatchOnError = false,\n    Enabled = false,\n    EventSourceArn = \"eventSourceArn\",\n    KafkaBootstrapServers = new [] { \"kafkaBootstrapServers\" },\n    KafkaTopic = \"kafkaTopic\",\n    MaxBatchingWindow = Duration.Minutes(30),\n    MaxRecordAge = Duration.Minutes(30),\n    OnFailure = eventSourceDlq,\n    ParallelizationFactor = 123,\n    ReportBatchItemFailures = false,\n    RetryAttempts = 123,\n    SourceAccessConfigurations = new [] { new SourceAccessConfiguration {\n        Type = sourceAccessConfigurationType,\n        Uri = \"uri\"\n    } },\n    StartingPosition = StartingPosition.TRIM_HORIZON,\n    TumblingWindow = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nIEventSourceDlq eventSourceDlq;\nFunction function_;\nSourceAccessConfigurationType sourceAccessConfigurationType;\n\nEventSourceMappingProps eventSourceMappingProps = EventSourceMappingProps.builder()\n        .target(function_)\n\n        // the properties below are optional\n        .batchSize(123)\n        .bisectBatchOnError(false)\n        .enabled(false)\n        .eventSourceArn(\"eventSourceArn\")\n        .kafkaBootstrapServers(List.of(\"kafkaBootstrapServers\"))\n        .kafkaTopic(\"kafkaTopic\")\n        .maxBatchingWindow(Duration.minutes(30))\n        .maxRecordAge(Duration.minutes(30))\n        .onFailure(eventSourceDlq)\n        .parallelizationFactor(123)\n        .reportBatchItemFailures(false)\n        .retryAttempts(123)\n        .sourceAccessConfigurations(List.of(SourceAccessConfiguration.builder()\n                .type(sourceAccessConfigurationType)\n                .uri(\"uri\")\n                .build()))\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .tumblingWindow(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const eventSourceDlq: lambda.IEventSourceDlq;\ndeclare const function_: lambda.Function;\ndeclare const sourceAccessConfigurationType: lambda.SourceAccessConfigurationType;\nconst eventSourceMappingProps: lambda.EventSourceMappingProps = {\n  target: function_,\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnError: false,\n  enabled: false,\n  eventSourceArn: 'eventSourceArn',\n  kafkaBootstrapServers: ['kafkaBootstrapServers'],\n  kafkaTopic: 'kafkaTopic',\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  maxRecordAge: cdk.Duration.minutes(30),\n  onFailure: eventSourceDlq,\n  parallelizationFactor: 123,\n  reportBatchItemFailures: false,\n  retryAttempts: 123,\n  sourceAccessConfigurations: [{\n    type: sourceAccessConfigurationType,\n    uri: 'uri',\n  }],\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  tumblingWindow: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.EventSourceMappingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.EventSourceMappingProps",
        "@aws-cdk/aws-lambda.IEventSourceDlq",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.SourceAccessConfigurationType",
        "@aws-cdk/aws-lambda.StartingPosition",
        "@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const eventSourceDlq: lambda.IEventSourceDlq;\ndeclare const function_: lambda.Function;\ndeclare const sourceAccessConfigurationType: lambda.SourceAccessConfigurationType;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eventSourceMappingProps: lambda.EventSourceMappingProps = {\n  target: function_,\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnError: false,\n  enabled: false,\n  eventSourceArn: 'eventSourceArn',\n  kafkaBootstrapServers: ['kafkaBootstrapServers'],\n  kafkaTopic: 'kafkaTopic',\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  maxRecordAge: cdk.Duration.minutes(30),\n  onFailure: eventSourceDlq,\n  parallelizationFactor: 123,\n  reportBatchItemFailures: false,\n  retryAttempts: 123,\n  sourceAccessConfigurations: [{\n    type: sourceAccessConfigurationType,\n    uri: 'uri',\n  }],\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  tumblingWindow: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 6,
        "75": 47,
        "91": 3,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 2,
        "193": 2,
        "194": 8,
        "196": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "b593704d2153b380a15b677a11dad60a0c75709bd143c07e84581ff1592c3dca"
    },
    "ac8712ae460d0bde01939295a5bf24dc2c1771089d20c96c9891f4295513934c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new VPC\nvpc = ec2.Vpc(self, \"VPC\")\n\n# create a new Amazon EFS filesystem\nfile_system = efs.FileSystem(self, \"Efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"AccessPoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    create_acl=efs.Acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the POSIX identity so lambda function will access with this identity\n    posix_user=efs.PosixUser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.Function(self, \"MyLambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.FileSystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EFS;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = new FileSystem(this, \"Efs\", new FileSystemProps { Vpc = vpc });\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.AddAccessPoint(\"AccessPoint\", new AccessPointOptions {\n    // set /export/lambda as the root of the access point\n    Path = \"/export/lambda\",\n    // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    CreateAcl = new Acl {\n        OwnerUid = \"1001\",\n        OwnerGid = \"1001\",\n        Permissions = \"750\"\n    },\n    // enforce the POSIX identity so lambda function will access with this identity\n    PosixUser = new PosixUser {\n        Uid = \"1001\",\n        Gid = \"1001\"\n    }\n});\n\nFunction fn = new Function(this, \"MyLambda\", new FunctionProps {\n    // mount the access point to /mnt/msg in the lambda runtime environment\n    Filesystem = FileSystem.FromEfsAccessPoint(accessPoint, \"/mnt/msg\"),\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.efs.*;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = FileSystem.Builder.create(this, \"Efs\").vpc(vpc).build();\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.addAccessPoint(\"AccessPoint\", AccessPointOptions.builder()\n        // set /export/lambda as the root of the access point\n        .path(\"/export/lambda\")\n        // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n        .createAcl(Acl.builder()\n                .ownerUid(\"1001\")\n                .ownerGid(\"1001\")\n                .permissions(\"750\")\n                .build())\n        // enforce the POSIX identity so lambda function will access with this identity\n        .posixUser(PosixUser.builder()\n                .uid(\"1001\")\n                .gid(\"1001\")\n                .build())\n        .build());\n\nFunction fn = Function.Builder.create(this, \"MyLambda\")\n        // mount the access point to /mnt/msg in the lambda runtime environment\n        .filesystem(FileSystem.fromEfsAccessPoint(accessPoint, \"/mnt/msg\"))\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.FileSystem"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPointOptions",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.IAccessPoint",
        "@aws-cdk/aws-efs.PosixUser",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FileSystem#fromEfsAccessPoint",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 41,
        "104": 3,
        "193": 5,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "c3e3c63faab2ca6cec286563f3810d3e779fe15c7101c0ab9177ae22114bcea4"
    },
    "252fe84ad0cba816db163bc9d2eef8d9aecee1098b6b50dbb6a1ee9543a65da2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# connections: ec2.Connections\n# dependable: cdk.IDependable\n# policy_statement: iam.PolicyStatement\n\nfile_system_config = lambda.FileSystemConfig(\n    arn=\"arn\",\n    local_mount_path=\"localMountPath\",\n\n    # the properties below are optional\n    connections=connections,\n    dependency=[dependable],\n    policies=[policy_statement]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nConnections connections;\nIDependable dependable;\nPolicyStatement policyStatement;\nFileSystemConfig fileSystemConfig = new FileSystemConfig {\n    Arn = \"arn\",\n    LocalMountPath = \"localMountPath\",\n\n    // the properties below are optional\n    Connections = connections,\n    Dependency = new [] { dependable },\n    Policies = new [] { policyStatement }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nConnections connections;\nIDependable dependable;\nPolicyStatement policyStatement;\n\nFileSystemConfig fileSystemConfig = FileSystemConfig.builder()\n        .arn(\"arn\")\n        .localMountPath(\"localMountPath\")\n\n        // the properties below are optional\n        .connections(connections)\n        .dependency(List.of(dependable))\n        .policies(List.of(policyStatement))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const connections: ec2.Connections;\ndeclare const dependable: cdk.IDependable;\ndeclare const policyStatement: iam.PolicyStatement;\nconst fileSystemConfig: lambda.FileSystemConfig = {\n  arn: 'arn',\n  localMountPath: 'localMountPath',\n\n  // the properties below are optional\n  connections: connections,\n  dependency: [dependable],\n  policies: [policyStatement],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.FileSystemConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections",
        "@aws-cdk/aws-lambda.FileSystemConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const connections: ec2.Connections;\ndeclare const dependable: cdk.IDependable;\ndeclare const policyStatement: iam.PolicyStatement;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fileSystemConfig: lambda.FileSystemConfig = {\n  arn: 'arn',\n  localMountPath: 'localMountPath',\n\n  // the properties below are optional\n  connections: connections,\n  dependency: [dependable],\n  policies: [policyStatement],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 24,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 2,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ad506b751ab7d6abc0c6cfbc425ab983491a66b1300e7358a3b20e9dd7397255"
    },
    "210a40785680a018a729c1b175118d5224501eef625158bb11476bb258ed3efc": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_signer as signer\n\n\nsigning_profile = signer.SigningProfile(self, \"SigningProfile\",\n    platform=signer.Platform.AWS_LAMBDA_SHA384_ECDSA\n)\n\ncode_signing_config = lambda_.CodeSigningConfig(self, \"CodeSigningConfig\",\n    signing_profiles=[signing_profile]\n)\n\nlambda_.Function(self, \"Function\",\n    code_signing_config=code_signing_config,\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Signer;\n\n\nSigningProfile signingProfile = new SigningProfile(this, \"SigningProfile\", new SigningProfileProps {\n    Platform = Platform.AWS_LAMBDA_SHA384_ECDSA\n});\n\nCodeSigningConfig codeSigningConfig = new CodeSigningConfig(this, \"CodeSigningConfig\", new CodeSigningConfigProps {\n    SigningProfiles = new [] { signingProfile }\n});\n\nnew Function(this, \"Function\", new FunctionProps {\n    CodeSigningConfig = codeSigningConfig,\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.signer.*;\n\n\nSigningProfile signingProfile = SigningProfile.Builder.create(this, \"SigningProfile\")\n        .platform(Platform.AWS_LAMBDA_SHA384_ECDSA)\n        .build();\n\nCodeSigningConfig codeSigningConfig = CodeSigningConfig.Builder.create(this, \"CodeSigningConfig\")\n        .signingProfiles(List.of(signingProfile))\n        .build();\n\nFunction.Builder.create(this, \"Function\")\n        .codeSigningConfig(codeSigningConfig)\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as signer from '@aws-cdk/aws-signer';\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Function"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.CodeSigningConfig",
        "@aws-cdk/aws-lambda.CodeSigningConfigProps",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-signer.Platform",
        "@aws-cdk/aws-signer.Platform#AWS_LAMBDA_SHA384_ECDSA",
        "@aws-cdk/aws-signer.SigningProfile",
        "@aws-cdk/aws-signer.SigningProfileProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as signer from '@aws-cdk/aws-signer';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6f13f17c57d841f51c24088e309fa7dcf8cf1c92c148a413f90a6261fd34a27d"
    },
    "5069ef9612521050bc092572109155ed84959e5ca6bd49904efb766b1cb3e8c7": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function.from_function_attributes(self, \"Function\",\n    function_arn=\"arn:aws:lambda:us-east-1:123456789012:function:MyFn\",\n    # The following are optional properties for specific use cases and should be used with caution:\n\n    # Use Case: imported function is in the same account as the stack. This tells the CDK that it\n    # can modify the function's permissions.\n    same_environment=True,\n\n    # Use Case: imported function is in a different account and user commits to ensuring that the\n    # imported function has the correct permissions outside the CDK.\n    skip_permissions=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IFunction fn = Function.FromFunctionAttributes(this, \"Function\", new FunctionAttributes {\n    FunctionArn = \"arn:aws:lambda:us-east-1:123456789012:function:MyFn\",\n    // The following are optional properties for specific use cases and should be used with caution:\n\n    // Use Case: imported function is in the same account as the stack. This tells the CDK that it\n    // can modify the function's permissions.\n    SameEnvironment = true,\n\n    // Use Case: imported function is in a different account and user commits to ensuring that the\n    // imported function has the correct permissions outside the CDK.\n    SkipPermissions = true\n});",
          "version": "1"
        },
        "java": {
          "source": "IFunction fn = Function.fromFunctionAttributes(this, \"Function\", FunctionAttributes.builder()\n        .functionArn(\"arn:aws:lambda:us-east-1:123456789012:function:MyFn\")\n        // The following are optional properties for specific use cases and should be used with caution:\n\n        // Use Case: imported function is in the same account as the stack. This tells the CDK that it\n        // can modify the function's permissions.\n        .sameEnvironment(true)\n\n        // Use Case: imported function is in a different account and user commits to ensuring that the\n        // imported function has the correct permissions outside the CDK.\n        .skipPermissions(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const fn = lambda.Function.fromFunctionAttributes(this, 'Function', {\n  functionArn: 'arn:aws:lambda:us-east-1:123456789012:function:MyFn',\n  // The following are optional properties for specific use cases and should be used with caution:\n\n  // Use Case: imported function is in the same account as the stack. This tells the CDK that it\n  // can modify the function's permissions.\n  sameEnvironment: true,\n\n  // Use Case: imported function is in a different account and user commits to ensuring that the\n  // imported function has the correct permissions outside the CDK.\n  skipPermissions: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.FunctionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#fromFunctionAttributes",
        "@aws-cdk/aws-lambda.FunctionAttributes",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = lambda.Function.fromFunctionAttributes(this, 'Function', {\n  functionArn: 'arn:aws:lambda:us-east-1:123456789012:function:MyFn',\n  // The following are optional properties for specific use cases and should be used with caution:\n\n  // Use Case: imported function is in the same account as the stack. This tells the CDK that it\n  // can modify the function's permissions.\n  sameEnvironment: true,\n\n  // Use Case: imported function is in a different account and user commits to ensuring that the\n  // imported function has the correct permissions outside the CDK.\n  skipPermissions: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "106": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "a0c7e62a7699cb5f277fc9d60d2c0fd95cd5cd15c7c99481f7a00720055d19b3"
    },
    "94695ca7c204def64d07daa2d64905de87b7e188eab0f9d77e8e297a4eca7f76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codeguruprofiler as codeguruprofiler\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_sqs as sqs\nimport aws_cdk.core as cdk\n\n# architecture: lambda.Architecture\n# code_signing_config: lambda.CodeSigningConfig\n# destination: lambda.IDestination\n# event_source: lambda.IEventSource\n# file_system: lambda.FileSystem\n# key: kms.Key\n# lambda_insights_version: lambda.LambdaInsightsVersion\n# layer_version: lambda.LayerVersion\n# policy_statement: iam.PolicyStatement\n# profiling_group: codeguruprofiler.ProfilingGroup\n# queue: sqs.Queue\n# role: iam.Role\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# topic: sns.Topic\n# vpc: ec2.Vpc\n\nfunction_options = lambda.FunctionOptions(\n    allow_all_outbound=False,\n    allow_public_subnet=False,\n    architecture=architecture,\n    architectures=[architecture],\n    code_signing_config=code_signing_config,\n    current_version_options=lambda.VersionOptions(\n        code_sha256=\"codeSha256\",\n        description=\"description\",\n        max_event_age=cdk.Duration.minutes(30),\n        on_failure=destination,\n        on_success=destination,\n        provisioned_concurrent_executions=123,\n        removal_policy=cdk.RemovalPolicy.DESTROY,\n        retry_attempts=123\n    ),\n    dead_letter_queue=queue,\n    dead_letter_queue_enabled=False,\n    dead_letter_topic=topic,\n    description=\"description\",\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    environment_encryption=key,\n    events=[event_source],\n    filesystem=file_system,\n    function_name=\"functionName\",\n    initial_policy=[policy_statement],\n    insights_version=lambda_insights_version,\n    layers=[layer_version],\n    log_retention=logs.RetentionDays.ONE_DAY,\n    log_retention_retry_options=lambda.LogRetentionRetryOptions(\n        base=cdk.Duration.minutes(30),\n        max_retries=123\n    ),\n    log_retention_role=role,\n    max_event_age=cdk.Duration.minutes(30),\n    memory_size=123,\n    on_failure=destination,\n    on_success=destination,\n    profiling=False,\n    profiling_group=profiling_group,\n    reserved_concurrent_executions=123,\n    retry_attempts=123,\n    role=role,\n    security_group=security_group,\n    security_groups=[security_group],\n    timeout=cdk.Duration.minutes(30),\n    tracing=lambda_.Tracing.ACTIVE,\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeGuruProfiler;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.Logs;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.SQS;\nusing Amazon.CDK;\n\nArchitecture architecture;\nCodeSigningConfig codeSigningConfig;\nIDestination destination;\nIEventSource eventSource;\nFileSystem fileSystem;\nKey key;\nLambdaInsightsVersion lambdaInsightsVersion;\nLayerVersion layerVersion;\nPolicyStatement policyStatement;\nProfilingGroup profilingGroup;\nQueue queue;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTopic topic;\nVpc vpc;\nFunctionOptions functionOptions = new FunctionOptions {\n    AllowAllOutbound = false,\n    AllowPublicSubnet = false,\n    Architecture = architecture,\n    Architectures = new [] { architecture },\n    CodeSigningConfig = codeSigningConfig,\n    CurrentVersionOptions = new VersionOptions {\n        CodeSha256 = \"codeSha256\",\n        Description = \"description\",\n        MaxEventAge = Duration.Minutes(30),\n        OnFailure = destination,\n        OnSuccess = destination,\n        ProvisionedConcurrentExecutions = 123,\n        RemovalPolicy = RemovalPolicy.DESTROY,\n        RetryAttempts = 123\n    },\n    DeadLetterQueue = queue,\n    DeadLetterQueueEnabled = false,\n    DeadLetterTopic = topic,\n    Description = \"description\",\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    EnvironmentEncryption = key,\n    Events = new [] { eventSource },\n    Filesystem = fileSystem,\n    FunctionName = \"functionName\",\n    InitialPolicy = new [] { policyStatement },\n    InsightsVersion = lambdaInsightsVersion,\n    Layers = new [] { layerVersion },\n    LogRetention = RetentionDays.ONE_DAY,\n    LogRetentionRetryOptions = new LogRetentionRetryOptions {\n        Base = Duration.Minutes(30),\n        MaxRetries = 123\n    },\n    LogRetentionRole = role,\n    MaxEventAge = Duration.Minutes(30),\n    MemorySize = 123,\n    OnFailure = destination,\n    OnSuccess = destination,\n    Profiling = false,\n    ProfilingGroup = profilingGroup,\n    ReservedConcurrentExecutions = 123,\n    RetryAttempts = 123,\n    Role = role,\n    SecurityGroup = securityGroup,\n    SecurityGroups = new [] { securityGroup },\n    Timeout = Duration.Minutes(30),\n    Tracing = Tracing.ACTIVE,\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codeguruprofiler.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.logs.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.sqs.*;\nimport software.amazon.awscdk.core.*;\n\nArchitecture architecture;\nCodeSigningConfig codeSigningConfig;\nIDestination destination;\nIEventSource eventSource;\nFileSystem fileSystem;\nKey key;\nLambdaInsightsVersion lambdaInsightsVersion;\nLayerVersion layerVersion;\nPolicyStatement policyStatement;\nProfilingGroup profilingGroup;\nQueue queue;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTopic topic;\nVpc vpc;\n\nFunctionOptions functionOptions = FunctionOptions.builder()\n        .allowAllOutbound(false)\n        .allowPublicSubnet(false)\n        .architecture(architecture)\n        .architectures(List.of(architecture))\n        .codeSigningConfig(codeSigningConfig)\n        .currentVersionOptions(VersionOptions.builder()\n                .codeSha256(\"codeSha256\")\n                .description(\"description\")\n                .maxEventAge(Duration.minutes(30))\n                .onFailure(destination)\n                .onSuccess(destination)\n                .provisionedConcurrentExecutions(123)\n                .removalPolicy(RemovalPolicy.DESTROY)\n                .retryAttempts(123)\n                .build())\n        .deadLetterQueue(queue)\n        .deadLetterQueueEnabled(false)\n        .deadLetterTopic(topic)\n        .description(\"description\")\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .environmentEncryption(key)\n        .events(List.of(eventSource))\n        .filesystem(fileSystem)\n        .functionName(\"functionName\")\n        .initialPolicy(List.of(policyStatement))\n        .insightsVersion(lambdaInsightsVersion)\n        .layers(List.of(layerVersion))\n        .logRetention(RetentionDays.ONE_DAY)\n        .logRetentionRetryOptions(LogRetentionRetryOptions.builder()\n                .base(Duration.minutes(30))\n                .maxRetries(123)\n                .build())\n        .logRetentionRole(role)\n        .maxEventAge(Duration.minutes(30))\n        .memorySize(123)\n        .onFailure(destination)\n        .onSuccess(destination)\n        .profiling(false)\n        .profilingGroup(profilingGroup)\n        .reservedConcurrentExecutions(123)\n        .retryAttempts(123)\n        .role(role)\n        .securityGroup(securityGroup)\n        .securityGroups(List.of(securityGroup))\n        .timeout(Duration.minutes(30))\n        .tracing(Tracing.ACTIVE)\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codeguruprofiler from '@aws-cdk/aws-codeguruprofiler';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const architecture: lambda.Architecture;\ndeclare const codeSigningConfig: lambda.CodeSigningConfig;\ndeclare const destination: lambda.IDestination;\ndeclare const eventSource: lambda.IEventSource;\ndeclare const fileSystem: lambda.FileSystem;\ndeclare const key: kms.Key;\ndeclare const lambdaInsightsVersion: lambda.LambdaInsightsVersion;\ndeclare const layerVersion: lambda.LayerVersion;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const profilingGroup: codeguruprofiler.ProfilingGroup;\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const topic: sns.Topic;\ndeclare const vpc: ec2.Vpc;\nconst functionOptions: lambda.FunctionOptions = {\n  allowAllOutbound: false,\n  allowPublicSubnet: false,\n  architecture: architecture,\n  architectures: [architecture],\n  codeSigningConfig: codeSigningConfig,\n  currentVersionOptions: {\n    codeSha256: 'codeSha256',\n    description: 'description',\n    maxEventAge: cdk.Duration.minutes(30),\n    onFailure: destination,\n    onSuccess: destination,\n    provisionedConcurrentExecutions: 123,\n    removalPolicy: cdk.RemovalPolicy.DESTROY,\n    retryAttempts: 123,\n  },\n  deadLetterQueue: queue,\n  deadLetterQueueEnabled: false,\n  deadLetterTopic: topic,\n  description: 'description',\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentEncryption: key,\n  events: [eventSource],\n  filesystem: fileSystem,\n  functionName: 'functionName',\n  initialPolicy: [policyStatement],\n  insightsVersion: lambdaInsightsVersion,\n  layers: [layerVersion],\n  logRetention: logs.RetentionDays.ONE_DAY,\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  logRetentionRole: role,\n  maxEventAge: cdk.Duration.minutes(30),\n  memorySize: 123,\n  onFailure: destination,\n  onSuccess: destination,\n  profiling: false,\n  profilingGroup: profilingGroup,\n  reservedConcurrentExecutions: 123,\n  retryAttempts: 123,\n  role: role,\n  securityGroup: securityGroup,\n  securityGroups: [securityGroup],\n  timeout: cdk.Duration.minutes(30),\n  tracing: lambda.Tracing.ACTIVE,\n  vpc: vpc,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.FunctionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codeguruprofiler.IProfilingGroup",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FunctionOptions",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.IDestination",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LogRetentionRetryOptions",
        "@aws-cdk/aws-lambda.Tracing",
        "@aws-cdk/aws-lambda.Tracing#ACTIVE",
        "@aws-cdk/aws-lambda.VersionOptions",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_DAY",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codeguruprofiler from '@aws-cdk/aws-codeguruprofiler';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const architecture: lambda.Architecture;\ndeclare const codeSigningConfig: lambda.CodeSigningConfig;\ndeclare const destination: lambda.IDestination;\ndeclare const eventSource: lambda.IEventSource;\ndeclare const fileSystem: lambda.FileSystem;\ndeclare const key: kms.Key;\ndeclare const lambdaInsightsVersion: lambda.LambdaInsightsVersion;\ndeclare const layerVersion: lambda.LayerVersion;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const profilingGroup: codeguruprofiler.ProfilingGroup;\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const topic: sns.Topic;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst functionOptions: lambda.FunctionOptions = {\n  allowAllOutbound: false,\n  allowPublicSubnet: false,\n  architecture: architecture,\n  architectures: [architecture],\n  codeSigningConfig: codeSigningConfig,\n  currentVersionOptions: {\n    codeSha256: 'codeSha256',\n    description: 'description',\n    maxEventAge: cdk.Duration.minutes(30),\n    onFailure: destination,\n    onSuccess: destination,\n    provisionedConcurrentExecutions: 123,\n    removalPolicy: cdk.RemovalPolicy.DESTROY,\n    retryAttempts: 123,\n  },\n  deadLetterQueue: queue,\n  deadLetterQueueEnabled: false,\n  deadLetterTopic: topic,\n  description: 'description',\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentEncryption: key,\n  events: [eventSource],\n  filesystem: fileSystem,\n  functionName: 'functionName',\n  initialPolicy: [policyStatement],\n  insightsVersion: lambdaInsightsVersion,\n  layers: [layerVersion],\n  logRetention: logs.RetentionDays.ONE_DAY,\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  logRetentionRole: role,\n  maxEventAge: cdk.Duration.minutes(30),\n  memorySize: 123,\n  onFailure: destination,\n  onSuccess: destination,\n  profiling: false,\n  profilingGroup: profilingGroup,\n  reservedConcurrentExecutions: 123,\n  retryAttempts: 123,\n  role: role,\n  securityGroup: securityGroup,\n  securityGroups: [securityGroup],\n  timeout: cdk.Duration.minutes(30),\n  tracing: lambda.Tracing.ACTIVE,\n  vpc: vpc,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 10,
        "10": 17,
        "75": 164,
        "91": 5,
        "130": 17,
        "153": 18,
        "169": 18,
        "192": 8,
        "193": 5,
        "194": 16,
        "196": 4,
        "225": 18,
        "242": 18,
        "243": 18,
        "254": 9,
        "255": 9,
        "256": 9,
        "281": 54,
        "290": 1
      },
      "fqnsFingerprint": "6e96ef7e6049a8fb6ea39bd0e4083f1a8fe4c4c27c88987d5599bede89c93eef"
    },
    "e659ef2544adac3061360d17e634888d56a23d587f1f6f44d3dd05f830379530": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.FunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "090df692d43dfce8316152d31f6aaac8c356c9d2b907d0a0e8a513cb47d2fbbc"
    },
    "3ccebff19fc1165c109b07d3f62c529e45a952b393a30c8513725e987522375d": {
      "translations": {
        "python": {
          "source": "layer = lambda_.LayerVersion(stack, \"MyLayer\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"layer-code\")),\n    compatible_runtimes=[lambda_.Runtime.NODEJS_10_X],\n    license=\"Apache-2.0\",\n    description=\"A layer to test the L2 construct\"\n)\n\n# To grant usage by other AWS accounts\nlayer.add_permission(\"remote-account-grant\", account_id=aws_account_id)\n\n# To grant usage to all accounts in some AWS Ogranization\n# layer.grantUsage({ accountId: '*', organizationId });\n\nlambda_.Function(stack, \"MyLayeredLambda\",\n    code=lambda_.InlineCode(\"foo\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_10_X,\n    layers=[layer]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LayerVersion layer = new LayerVersion(stack, \"MyLayer\", new LayerVersionProps {\n    Code = Code.FromAsset(Join(__dirname, \"layer-code\")),\n    CompatibleRuntimes = new [] { Runtime.NODEJS_10_X },\n    License = \"Apache-2.0\",\n    Description = \"A layer to test the L2 construct\"\n});\n\n// To grant usage by other AWS accounts\nlayer.AddPermission(\"remote-account-grant\", new LayerVersionPermission { AccountId = awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nnew Function(stack, \"MyLayeredLambda\", new FunctionProps {\n    Code = new InlineCode(\"foo\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_10_X,\n    Layers = new [] { layer }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion layer = LayerVersion.Builder.create(stack, \"MyLayer\")\n        .code(Code.fromAsset(join(__dirname, \"layer-code\")))\n        .compatibleRuntimes(List.of(Runtime.NODEJS_10_X))\n        .license(\"Apache-2.0\")\n        .description(\"A layer to test the L2 construct\")\n        .build();\n\n// To grant usage by other AWS accounts\nlayer.addPermission(\"remote-account-grant\", LayerVersionPermission.builder().accountId(awsAccountId).build());\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nFunction.Builder.create(stack, \"MyLayeredLambda\")\n        .code(new InlineCode(\"foo\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_10_X)\n        .layers(List.of(layer))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.InlineCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.InlineCode",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionPermission",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\nconst app = new cdk.App();\n\nconst stack = new cdk.Stack(app, 'aws-cdk-layer-version-1');\n\n// Just for the example - granting to the current account is not necessary.\nconst awsAccountId = stack.account;\n\n/// !show\nconst layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 34,
        "192": 2,
        "193": 3,
        "194": 11,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "f214c7ab2e38e22c08133c0efeb43ebca17caade517aa4be86f7b770f03d1ffc"
    },
    "40d5c58065b5d861191e7ecdbfd4f6450f5eb94c79f49296f34937208e33af95": {
      "translations": {
        "python": {
          "source": "layer_arn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\"\nlambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.LambdaInsightsVersion.from_insight_version_arn(layer_arn)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "string layerArn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\";\nnew Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    InsightsVersion = LambdaInsightsVersion.FromInsightVersionArn(layerArn)\n});",
          "version": "1"
        },
        "java": {
          "source": "String layerArn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\";\nFunction.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .insightsVersion(LambdaInsightsVersion.fromInsightVersionArn(layerArn))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const layerArn = 'arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14';\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.fromInsightVersionArn(layerArn),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LambdaInsightsVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion#fromInsightVersionArn",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst layerArn = 'arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14';\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.fromInsightVersionArn(layerArn),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "104": 1,
        "193": 1,
        "194": 8,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "c0d7df8c5882e352be124dcce937ec5292dc840936990320939be1ab3c23cef4"
    },
    "40e34bcc6f1ef735e7e6df9fc37aa6ed8d60891e0e09548c444d97858cbdaa7b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nlambda_runtime_props = lambda.LambdaRuntimeProps(\n    bundling_docker_image=\"bundlingDockerImage\",\n    supports_code_guru_profiling=False,\n    supports_inline_code=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nLambdaRuntimeProps lambdaRuntimeProps = new LambdaRuntimeProps {\n    BundlingDockerImage = \"bundlingDockerImage\",\n    SupportsCodeGuruProfiling = false,\n    SupportsInlineCode = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nLambdaRuntimeProps lambdaRuntimeProps = LambdaRuntimeProps.builder()\n        .bundlingDockerImage(\"bundlingDockerImage\")\n        .supportsCodeGuruProfiling(false)\n        .supportsInlineCode(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst lambdaRuntimeProps: lambda.LambdaRuntimeProps = {\n  bundlingDockerImage: 'bundlingDockerImage',\n  supportsCodeGuruProfiling: false,\n  supportsInlineCode: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LambdaRuntimeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.LambdaRuntimeProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaRuntimeProps: lambda.LambdaRuntimeProps = {\n  bundlingDockerImage: 'bundlingDockerImage',\n  supportsCodeGuruProfiling: false,\n  supportsInlineCode: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a3656ce28d061d37117f58547ccda3d3285346fe983b2b6daa0ab66dcf460a82"
    },
    "fdc90c8c6ccee536bd7d75cc5d9900a1c05805308bae33fe87cac0c85b4e8a59": {
      "translations": {
        "python": {
          "source": "lambda_.LayerVersion(self, \"MyLayer\",\n    removal_policy=RemovalPolicy.RETAIN,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    compatible_architectures=[lambda_.Architecture.X86_64, lambda_.Architecture.ARM_64]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new LayerVersion(this, \"MyLayer\", new LayerVersionProps {\n    RemovalPolicy = RemovalPolicy.RETAIN,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    CompatibleArchitectures = new [] { Architecture.X86_64, Architecture.ARM_64 }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion.Builder.create(this, \"MyLayer\")\n        .removalPolicy(RemovalPolicy.RETAIN)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .compatibleArchitectures(List.of(Architecture.X86_64, Architecture.ARM_64))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LayerVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Architecture#X86_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "a79690697b57dea85bc9f416306d49dadeabb96e3a11b7c1e3f2097d07c67f20"
    },
    "68e3eed8dd67069e22cdb983c8b05cccfb38de85f0a1b52c533806f078c3e4d1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\n# runtime: lambda.Runtime\n\nlayer_version_attributes = lambda.LayerVersionAttributes(\n    layer_version_arn=\"layerVersionArn\",\n\n    # the properties below are optional\n    compatible_runtimes=[runtime]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nRuntime runtime;\n\nLayerVersionAttributes layerVersionAttributes = new LayerVersionAttributes {\n    LayerVersionArn = \"layerVersionArn\",\n\n    // the properties below are optional\n    CompatibleRuntimes = new [] { runtime }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nRuntime runtime;\n\nLayerVersionAttributes layerVersionAttributes = LayerVersionAttributes.builder()\n        .layerVersionArn(\"layerVersionArn\")\n\n        // the properties below are optional\n        .compatibleRuntimes(List.of(runtime))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const runtime: lambda.Runtime;\nconst layerVersionAttributes: lambda.LayerVersionAttributes = {\n  layerVersionArn: 'layerVersionArn',\n\n  // the properties below are optional\n  compatibleRuntimes: [runtime],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LayerVersionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.LayerVersionAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const runtime: lambda.Runtime;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst layerVersionAttributes: lambda.LayerVersionAttributes = {\n  layerVersionArn: 'layerVersionArn',\n\n  // the properties below are optional\n  compatibleRuntimes: [runtime],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7bfdb26a071318dbe3adc5ec9649fb5fc82c5615e793b6c999819c7b0c2936bc"
    },
    "0a14a3b2ef9257a36a88b185e8207776bd51c635cb5ee5e5303cfbfa112b9ca2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\nlayer_version_options = lambda.LayerVersionOptions(\n    description=\"description\",\n    layer_version_name=\"layerVersionName\",\n    license=\"license\",\n    removal_policy=cdk.RemovalPolicy.DESTROY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nLayerVersionOptions layerVersionOptions = new LayerVersionOptions {\n    Description = \"description\",\n    LayerVersionName = \"layerVersionName\",\n    License = \"license\",\n    RemovalPolicy = RemovalPolicy.DESTROY\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nLayerVersionOptions layerVersionOptions = LayerVersionOptions.builder()\n        .description(\"description\")\n        .layerVersionName(\"layerVersionName\")\n        .license(\"license\")\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\nconst layerVersionOptions: lambda.LayerVersionOptions = {\n  description: 'description',\n  layerVersionName: 'layerVersionName',\n  license: 'license',\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LayerVersionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.LayerVersionOptions",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst layerVersionOptions: lambda.LayerVersionOptions = {\n  description: 'description',\n  layerVersionName: 'layerVersionName',\n  license: 'license',\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "792e90bba6d73273f311c7809fad62eafeaec63e5c5e95e8f4231ee34333b6fc"
    },
    "60c509fc00a1ee5f830c1f4c3fa957ae7d13e01d9b93552de92c7d9842abddde": {
      "translations": {
        "python": {
          "source": "layer = lambda_.LayerVersion(stack, \"MyLayer\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"layer-code\")),\n    compatible_runtimes=[lambda_.Runtime.NODEJS_10_X],\n    license=\"Apache-2.0\",\n    description=\"A layer to test the L2 construct\"\n)\n\n# To grant usage by other AWS accounts\nlayer.add_permission(\"remote-account-grant\", account_id=aws_account_id)\n\n# To grant usage to all accounts in some AWS Ogranization\n# layer.grantUsage({ accountId: '*', organizationId });\n\nlambda_.Function(stack, \"MyLayeredLambda\",\n    code=lambda_.InlineCode(\"foo\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_10_X,\n    layers=[layer]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LayerVersion layer = new LayerVersion(stack, \"MyLayer\", new LayerVersionProps {\n    Code = Code.FromAsset(Join(__dirname, \"layer-code\")),\n    CompatibleRuntimes = new [] { Runtime.NODEJS_10_X },\n    License = \"Apache-2.0\",\n    Description = \"A layer to test the L2 construct\"\n});\n\n// To grant usage by other AWS accounts\nlayer.AddPermission(\"remote-account-grant\", new LayerVersionPermission { AccountId = awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nnew Function(stack, \"MyLayeredLambda\", new FunctionProps {\n    Code = new InlineCode(\"foo\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_10_X,\n    Layers = new [] { layer }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion layer = LayerVersion.Builder.create(stack, \"MyLayer\")\n        .code(Code.fromAsset(join(__dirname, \"layer-code\")))\n        .compatibleRuntimes(List.of(Runtime.NODEJS_10_X))\n        .license(\"Apache-2.0\")\n        .description(\"A layer to test the L2 construct\")\n        .build();\n\n// To grant usage by other AWS accounts\nlayer.addPermission(\"remote-account-grant\", LayerVersionPermission.builder().accountId(awsAccountId).build());\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nFunction.Builder.create(stack, \"MyLayeredLambda\")\n        .code(new InlineCode(\"foo\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_10_X)\n        .layers(List.of(layer))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LayerVersionPermission"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.InlineCode",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionPermission",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\nconst app = new cdk.App();\n\nconst stack = new cdk.Stack(app, 'aws-cdk-layer-version-1');\n\n// Just for the example - granting to the current account is not necessary.\nconst awsAccountId = stack.account;\n\n/// !show\nconst layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 34,
        "192": 2,
        "193": 3,
        "194": 11,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "f214c7ab2e38e22c08133c0efeb43ebca17caade517aa4be86f7b770f03d1ffc"
    },
    "551599136aa96644468bdd9eb668a734ef18ea26987f7c3eece82834dba5da8b": {
      "translations": {
        "python": {
          "source": "lambda_.LayerVersion(self, \"MyLayer\",\n    removal_policy=RemovalPolicy.RETAIN,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    compatible_architectures=[lambda_.Architecture.X86_64, lambda_.Architecture.ARM_64]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new LayerVersion(this, \"MyLayer\", new LayerVersionProps {\n    RemovalPolicy = RemovalPolicy.RETAIN,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    CompatibleArchitectures = new [] { Architecture.X86_64, Architecture.ARM_64 }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion.Builder.create(this, \"MyLayer\")\n        .removalPolicy(RemovalPolicy.RETAIN)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .compatibleArchitectures(List.of(Architecture.X86_64, Architecture.ARM_64))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LayerVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Architecture#X86_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "a79690697b57dea85bc9f416306d49dadeabb96e3a11b7c1e3f2097d07c67f20"
    },
    "fff5ab5162a407292dc7180b52a2c9acc6de0d425475ea578e625aee8a7cab94": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.core as cdk\n\n# role: iam.Role\n\nlog_retention = lambda_.LogRetention(self, \"MyLogRetention\",\n    log_group_name=\"logGroupName\",\n    retention=logs.RetentionDays.ONE_DAY,\n\n    # the properties below are optional\n    log_group_region=\"logGroupRegion\",\n    log_retention_retry_options=logs.LogRetentionRetryOptions(\n        base=cdk.Duration.minutes(30),\n        max_retries=123\n    ),\n    role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.Logs;\nusing Amazon.CDK;\n\nRole role;\nLogRetention logRetention = new LogRetention(this, \"MyLogRetention\", new LogRetentionProps {\n    LogGroupName = \"logGroupName\",\n    Retention = RetentionDays.ONE_DAY,\n\n    // the properties below are optional\n    LogGroupRegion = \"logGroupRegion\",\n    LogRetentionRetryOptions = new LogRetentionRetryOptions {\n        Base = Duration.Minutes(30),\n        MaxRetries = 123\n    },\n    Role = role\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.logs.*;\nimport software.amazon.awscdk.core.*;\n\nRole role;\n\nLogRetention logRetention = LogRetention.Builder.create(this, \"MyLogRetention\")\n        .logGroupName(\"logGroupName\")\n        .retention(RetentionDays.ONE_DAY)\n\n        // the properties below are optional\n        .logGroupRegion(\"logGroupRegion\")\n        .logRetentionRetryOptions(LogRetentionRetryOptions.builder()\n                .base(Duration.minutes(30))\n                .maxRetries(123)\n                .build())\n        .role(role)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\nconst logRetention = new lambda.LogRetention(this, 'MyLogRetention', {\n  logGroupName: 'logGroupName',\n  retention: logs.RetentionDays.ONE_DAY,\n\n  // the properties below are optional\n  logGroupRegion: 'logGroupRegion',\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  role: role,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LogRetention"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-lambda.LogRetention",
        "@aws-cdk/aws-lambda.LogRetentionProps",
        "@aws-cdk/aws-logs.LogRetentionRetryOptions",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_DAY",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logRetention = new lambda.LogRetention(this, 'MyLogRetention', {\n  logGroupName: 'logGroupName',\n  retention: logs.RetentionDays.ONE_DAY,\n\n  // the properties below are optional\n  logGroupRegion: 'logGroupRegion',\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  role: role,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 24,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "6ea972e05a50fc076715d3d907a7e431030f98cb48ca6daf20baf89cc2fae4b0"
    },
    "70f80a0fd0afd6ccfa2abfb2fb0e0f5f555ae6956716728ab6a123dddfb6ae35": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.core as cdk\n\n# role: iam.Role\n\nlog_retention_props = lambda.LogRetentionProps(\n    log_group_name=\"logGroupName\",\n    retention=logs.RetentionDays.ONE_DAY,\n\n    # the properties below are optional\n    log_group_region=\"logGroupRegion\",\n    log_retention_retry_options=logs.LogRetentionRetryOptions(\n        base=cdk.Duration.minutes(30),\n        max_retries=123\n    ),\n    role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.Logs;\nusing Amazon.CDK;\n\nRole role;\nLogRetentionProps logRetentionProps = new LogRetentionProps {\n    LogGroupName = \"logGroupName\",\n    Retention = RetentionDays.ONE_DAY,\n\n    // the properties below are optional\n    LogGroupRegion = \"logGroupRegion\",\n    LogRetentionRetryOptions = new LogRetentionRetryOptions {\n        Base = Duration.Minutes(30),\n        MaxRetries = 123\n    },\n    Role = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.logs.*;\nimport software.amazon.awscdk.core.*;\n\nRole role;\n\nLogRetentionProps logRetentionProps = LogRetentionProps.builder()\n        .logGroupName(\"logGroupName\")\n        .retention(RetentionDays.ONE_DAY)\n\n        // the properties below are optional\n        .logGroupRegion(\"logGroupRegion\")\n        .logRetentionRetryOptions(LogRetentionRetryOptions.builder()\n                .base(Duration.minutes(30))\n                .maxRetries(123)\n                .build())\n        .role(role)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\nconst logRetentionProps: lambda.LogRetentionProps = {\n  logGroupName: 'logGroupName',\n  retention: logs.RetentionDays.ONE_DAY,\n\n  // the properties below are optional\n  logGroupRegion: 'logGroupRegion',\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  role: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LogRetentionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-lambda.LogRetentionProps",
        "@aws-cdk/aws-logs.LogRetentionRetryOptions",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_DAY",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logRetentionProps: lambda.LogRetentionProps = {\n  logGroupName: 'logGroupName',\n  retention: logs.RetentionDays.ONE_DAY,\n\n  // the properties below are optional\n  logGroupRegion: 'logGroupRegion',\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  role: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 24,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "a06491433431d1e3eef169dfdc6d49636826fc6bb5016a2d5a43c76253a9bc7a"
    },
    "6f87e7bb2981a6fd6e9d5760ff2eea0ca2474f8c56c0fb46de39ee87e71b605f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\nlog_retention_retry_options = lambda.LogRetentionRetryOptions(\n    base=cdk.Duration.minutes(30),\n    max_retries=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nLogRetentionRetryOptions logRetentionRetryOptions = new LogRetentionRetryOptions {\n    Base = Duration.Minutes(30),\n    MaxRetries = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nLogRetentionRetryOptions logRetentionRetryOptions = LogRetentionRetryOptions.builder()\n        .base(Duration.minutes(30))\n        .maxRetries(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\nconst logRetentionRetryOptions: lambda.LogRetentionRetryOptions = {\n  base: cdk.Duration.minutes(30),\n  maxRetries: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LogRetentionRetryOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.LogRetentionRetryOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logRetentionRetryOptions: lambda.LogRetentionRetryOptions = {\n  base: cdk.Duration.minutes(30),\n  maxRetries: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "206d865a435504723e36e5cc01183b133db936c73209b5d6645c500b3cad0a85"
    },
    "c76133ec5bcfda751b72f45626f595f0a02ef3e3970ff6d1281c4dc87ac39698": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\nprincipal = iam.ServicePrincipal(\"my-service\")\n\nfn.grant_invoke(principal)\n\n# Equivalent to:\nfn.add_permission(\"my-service Invocation\",\n    principal=principal\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nServicePrincipal principal = new ServicePrincipal(\"my-service\");\n\nfn.GrantInvoke(principal);\n\n// Equivalent to:\nfn.AddPermission(\"my-service Invocation\", new Permission {\n    Principal = principal\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nServicePrincipal principal = new ServicePrincipal(\"my-service\");\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission(\"my-service Invocation\", Permission.builder()\n        .principal(principal)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst principal = new iam.ServicePrincipal('my-service');\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: principal,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Permission"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-lambda.FunctionBase#addPermission",
        "@aws-cdk/aws-lambda.FunctionBase#grantInvoke",
        "@aws-cdk/aws-lambda.Permission"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst principal = new iam.ServicePrincipal('my-service');\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: principal,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4e1fc6388103414ef84877f907d737f3f318104d3aed74068677df40478b6da0"
    },
    "d76f9e6c31ebe5b8fa3e4c3326dd50a1622010e0d9d8fef4ee18bea53752ecaa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nresource_bind_options = lambda.ResourceBindOptions(\n    resource_property=\"resourceProperty\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nResourceBindOptions resourceBindOptions = new ResourceBindOptions {\n    ResourceProperty = \"resourceProperty\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nResourceBindOptions resourceBindOptions = ResourceBindOptions.builder()\n        .resourceProperty(\"resourceProperty\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst resourceBindOptions: lambda.ResourceBindOptions = {\n  resourceProperty: 'resourceProperty',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.ResourceBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.ResourceBindOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourceBindOptions: lambda.ResourceBindOptions = {\n  resourceProperty: 'resourceProperty',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d0886bd73c25e929f4e59fffa5d5c84cff75c2bb2c3dd85086550518fadfdee4"
    },
    "dc4a76cb1cb68779b1af59a680f34ee536ef45154c0a5fdf0333a65a7061cc38": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_signer as signer\n\n\nsigning_profile = signer.SigningProfile(self, \"SigningProfile\",\n    platform=signer.Platform.AWS_LAMBDA_SHA384_ECDSA\n)\n\ncode_signing_config = lambda_.CodeSigningConfig(self, \"CodeSigningConfig\",\n    signing_profiles=[signing_profile]\n)\n\nlambda_.Function(self, \"Function\",\n    code_signing_config=code_signing_config,\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Signer;\n\n\nSigningProfile signingProfile = new SigningProfile(this, \"SigningProfile\", new SigningProfileProps {\n    Platform = Platform.AWS_LAMBDA_SHA384_ECDSA\n});\n\nCodeSigningConfig codeSigningConfig = new CodeSigningConfig(this, \"CodeSigningConfig\", new CodeSigningConfigProps {\n    SigningProfiles = new [] { signingProfile }\n});\n\nnew Function(this, \"Function\", new FunctionProps {\n    CodeSigningConfig = codeSigningConfig,\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.signer.*;\n\n\nSigningProfile signingProfile = SigningProfile.Builder.create(this, \"SigningProfile\")\n        .platform(Platform.AWS_LAMBDA_SHA384_ECDSA)\n        .build();\n\nCodeSigningConfig codeSigningConfig = CodeSigningConfig.Builder.create(this, \"CodeSigningConfig\")\n        .signingProfiles(List.of(signingProfile))\n        .build();\n\nFunction.Builder.create(this, \"Function\")\n        .codeSigningConfig(codeSigningConfig)\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as signer from '@aws-cdk/aws-signer';\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Runtime"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.CodeSigningConfig",
        "@aws-cdk/aws-lambda.CodeSigningConfigProps",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-signer.Platform",
        "@aws-cdk/aws-signer.Platform#AWS_LAMBDA_SHA384_ECDSA",
        "@aws-cdk/aws-signer.SigningProfile",
        "@aws-cdk/aws-signer.SigningProfileProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as signer from '@aws-cdk/aws-signer';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6f13f17c57d841f51c24088e309fa7dcf8cf1c92c148a413f90a6261fd34a27d"
    },
    "ac7206e70d1459911af975a09886fd921aa9a2ce7ca9099b6d4919399f9f60ee": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_s3 as s3\n\n# bucket: s3.Bucket\n\ns3_code = lambda_.S3Code(bucket, \"key\", \"objectVersion\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.S3;\n\nBucket bucket;\n\nS3Code s3Code = new S3Code(bucket, \"key\", \"objectVersion\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.s3.*;\n\nBucket bucket;\n\nS3Code s3Code = new S3Code(bucket, \"key\", \"objectVersion\");",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\nconst s3Code = new lambda.S3Code(bucket, 'key', /* all optional props */ 'objectVersion');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.S3Code"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.S3Code",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3Code = new lambda.S3Code(bucket, 'key', /* all optional props */ 'objectVersion');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "fda2437d81979609c5b657a5b59ec6a46f087ba7056fe0c6be91bd1cac8d8551"
    },
    "3849f4c6bc53bab6636d041da5c1e9de2b8752d6b0ad3b70bf1427e49998fe00": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codeguruprofiler as codeguruprofiler\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_sqs as sqs\nimport aws_cdk.core as cdk\n\n# architecture: lambda.Architecture\n# code: lambda.Code\n# code_signing_config: lambda.CodeSigningConfig\n# destination: lambda.IDestination\n# event_source: lambda.IEventSource\n# file_system: lambda.FileSystem\n# key: kms.Key\n# lambda_insights_version: lambda.LambdaInsightsVersion\n# layer_version: lambda.LayerVersion\n# policy_statement: iam.PolicyStatement\n# profiling_group: codeguruprofiler.ProfilingGroup\n# queue: sqs.Queue\n# role: iam.Role\n# runtime: lambda.Runtime\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# topic: sns.Topic\n# vpc: ec2.Vpc\n\nsingleton_function = lambda_.SingletonFunction(self, \"MySingletonFunction\",\n    code=code,\n    handler=\"handler\",\n    runtime=runtime,\n    uuid=\"uuid\",\n\n    # the properties below are optional\n    allow_all_outbound=False,\n    allow_public_subnet=False,\n    architecture=architecture,\n    architectures=[architecture],\n    code_signing_config=code_signing_config,\n    current_version_options=lambda.VersionOptions(\n        code_sha256=\"codeSha256\",\n        description=\"description\",\n        max_event_age=cdk.Duration.minutes(30),\n        on_failure=destination,\n        on_success=destination,\n        provisioned_concurrent_executions=123,\n        removal_policy=cdk.RemovalPolicy.DESTROY,\n        retry_attempts=123\n    ),\n    dead_letter_queue=queue,\n    dead_letter_queue_enabled=False,\n    dead_letter_topic=topic,\n    description=\"description\",\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    environment_encryption=key,\n    events=[event_source],\n    filesystem=file_system,\n    function_name=\"functionName\",\n    initial_policy=[policy_statement],\n    insights_version=lambda_insights_version,\n    lambda_purpose=\"lambdaPurpose\",\n    layers=[layer_version],\n    log_retention=logs.RetentionDays.ONE_DAY,\n    log_retention_retry_options=lambda.LogRetentionRetryOptions(\n        base=cdk.Duration.minutes(30),\n        max_retries=123\n    ),\n    log_retention_role=role,\n    max_event_age=cdk.Duration.minutes(30),\n    memory_size=123,\n    on_failure=destination,\n    on_success=destination,\n    profiling=False,\n    profiling_group=profiling_group,\n    reserved_concurrent_executions=123,\n    retry_attempts=123,\n    role=role,\n    security_group=security_group,\n    security_groups=[security_group],\n    timeout=cdk.Duration.minutes(30),\n    tracing=lambda_.Tracing.ACTIVE,\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeGuruProfiler;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.Logs;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.SQS;\nusing Amazon.CDK;\n\nArchitecture architecture;\nCode code;\nCodeSigningConfig codeSigningConfig;\nIDestination destination;\nIEventSource eventSource;\nFileSystem fileSystem;\nKey key;\nLambdaInsightsVersion lambdaInsightsVersion;\nLayerVersion layerVersion;\nPolicyStatement policyStatement;\nProfilingGroup profilingGroup;\nQueue queue;\nRole role;\nRuntime runtime;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTopic topic;\nVpc vpc;\nSingletonFunction singletonFunction = new SingletonFunction(this, \"MySingletonFunction\", new SingletonFunctionProps {\n    Code = code,\n    Handler = \"handler\",\n    Runtime = runtime,\n    Uuid = \"uuid\",\n\n    // the properties below are optional\n    AllowAllOutbound = false,\n    AllowPublicSubnet = false,\n    Architecture = architecture,\n    Architectures = new [] { architecture },\n    CodeSigningConfig = codeSigningConfig,\n    CurrentVersionOptions = new VersionOptions {\n        CodeSha256 = \"codeSha256\",\n        Description = \"description\",\n        MaxEventAge = Duration.Minutes(30),\n        OnFailure = destination,\n        OnSuccess = destination,\n        ProvisionedConcurrentExecutions = 123,\n        RemovalPolicy = RemovalPolicy.DESTROY,\n        RetryAttempts = 123\n    },\n    DeadLetterQueue = queue,\n    DeadLetterQueueEnabled = false,\n    DeadLetterTopic = topic,\n    Description = \"description\",\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    EnvironmentEncryption = key,\n    Events = new [] { eventSource },\n    Filesystem = fileSystem,\n    FunctionName = \"functionName\",\n    InitialPolicy = new [] { policyStatement },\n    InsightsVersion = lambdaInsightsVersion,\n    LambdaPurpose = \"lambdaPurpose\",\n    Layers = new [] { layerVersion },\n    LogRetention = RetentionDays.ONE_DAY,\n    LogRetentionRetryOptions = new LogRetentionRetryOptions {\n        Base = Duration.Minutes(30),\n        MaxRetries = 123\n    },\n    LogRetentionRole = role,\n    MaxEventAge = Duration.Minutes(30),\n    MemorySize = 123,\n    OnFailure = destination,\n    OnSuccess = destination,\n    Profiling = false,\n    ProfilingGroup = profilingGroup,\n    ReservedConcurrentExecutions = 123,\n    RetryAttempts = 123,\n    Role = role,\n    SecurityGroup = securityGroup,\n    SecurityGroups = new [] { securityGroup },\n    Timeout = Duration.Minutes(30),\n    Tracing = Tracing.ACTIVE,\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codeguruprofiler.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.logs.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.sqs.*;\nimport software.amazon.awscdk.core.*;\n\nArchitecture architecture;\nCode code;\nCodeSigningConfig codeSigningConfig;\nIDestination destination;\nIEventSource eventSource;\nFileSystem fileSystem;\nKey key;\nLambdaInsightsVersion lambdaInsightsVersion;\nLayerVersion layerVersion;\nPolicyStatement policyStatement;\nProfilingGroup profilingGroup;\nQueue queue;\nRole role;\nRuntime runtime;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTopic topic;\nVpc vpc;\n\nSingletonFunction singletonFunction = SingletonFunction.Builder.create(this, \"MySingletonFunction\")\n        .code(code)\n        .handler(\"handler\")\n        .runtime(runtime)\n        .uuid(\"uuid\")\n\n        // the properties below are optional\n        .allowAllOutbound(false)\n        .allowPublicSubnet(false)\n        .architecture(architecture)\n        .architectures(List.of(architecture))\n        .codeSigningConfig(codeSigningConfig)\n        .currentVersionOptions(VersionOptions.builder()\n                .codeSha256(\"codeSha256\")\n                .description(\"description\")\n                .maxEventAge(Duration.minutes(30))\n                .onFailure(destination)\n                .onSuccess(destination)\n                .provisionedConcurrentExecutions(123)\n                .removalPolicy(RemovalPolicy.DESTROY)\n                .retryAttempts(123)\n                .build())\n        .deadLetterQueue(queue)\n        .deadLetterQueueEnabled(false)\n        .deadLetterTopic(topic)\n        .description(\"description\")\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .environmentEncryption(key)\n        .events(List.of(eventSource))\n        .filesystem(fileSystem)\n        .functionName(\"functionName\")\n        .initialPolicy(List.of(policyStatement))\n        .insightsVersion(lambdaInsightsVersion)\n        .lambdaPurpose(\"lambdaPurpose\")\n        .layers(List.of(layerVersion))\n        .logRetention(RetentionDays.ONE_DAY)\n        .logRetentionRetryOptions(LogRetentionRetryOptions.builder()\n                .base(Duration.minutes(30))\n                .maxRetries(123)\n                .build())\n        .logRetentionRole(role)\n        .maxEventAge(Duration.minutes(30))\n        .memorySize(123)\n        .onFailure(destination)\n        .onSuccess(destination)\n        .profiling(false)\n        .profilingGroup(profilingGroup)\n        .reservedConcurrentExecutions(123)\n        .retryAttempts(123)\n        .role(role)\n        .securityGroup(securityGroup)\n        .securityGroups(List.of(securityGroup))\n        .timeout(Duration.minutes(30))\n        .tracing(Tracing.ACTIVE)\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codeguruprofiler from '@aws-cdk/aws-codeguruprofiler';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const architecture: lambda.Architecture;\ndeclare const code: lambda.Code;\ndeclare const codeSigningConfig: lambda.CodeSigningConfig;\ndeclare const destination: lambda.IDestination;\ndeclare const eventSource: lambda.IEventSource;\ndeclare const fileSystem: lambda.FileSystem;\ndeclare const key: kms.Key;\ndeclare const lambdaInsightsVersion: lambda.LambdaInsightsVersion;\ndeclare const layerVersion: lambda.LayerVersion;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const profilingGroup: codeguruprofiler.ProfilingGroup;\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\ndeclare const runtime: lambda.Runtime;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const topic: sns.Topic;\ndeclare const vpc: ec2.Vpc;\nconst singletonFunction = new lambda.SingletonFunction(this, 'MySingletonFunction', {\n  code: code,\n  handler: 'handler',\n  runtime: runtime,\n  uuid: 'uuid',\n\n  // the properties below are optional\n  allowAllOutbound: false,\n  allowPublicSubnet: false,\n  architecture: architecture,\n  architectures: [architecture],\n  codeSigningConfig: codeSigningConfig,\n  currentVersionOptions: {\n    codeSha256: 'codeSha256',\n    description: 'description',\n    maxEventAge: cdk.Duration.minutes(30),\n    onFailure: destination,\n    onSuccess: destination,\n    provisionedConcurrentExecutions: 123,\n    removalPolicy: cdk.RemovalPolicy.DESTROY,\n    retryAttempts: 123,\n  },\n  deadLetterQueue: queue,\n  deadLetterQueueEnabled: false,\n  deadLetterTopic: topic,\n  description: 'description',\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentEncryption: key,\n  events: [eventSource],\n  filesystem: fileSystem,\n  functionName: 'functionName',\n  initialPolicy: [policyStatement],\n  insightsVersion: lambdaInsightsVersion,\n  lambdaPurpose: 'lambdaPurpose',\n  layers: [layerVersion],\n  logRetention: logs.RetentionDays.ONE_DAY,\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  logRetentionRole: role,\n  maxEventAge: cdk.Duration.minutes(30),\n  memorySize: 123,\n  onFailure: destination,\n  onSuccess: destination,\n  profiling: false,\n  profilingGroup: profilingGroup,\n  reservedConcurrentExecutions: 123,\n  retryAttempts: 123,\n  role: role,\n  securityGroup: securityGroup,\n  securityGroups: [securityGroup],\n  timeout: cdk.Duration.minutes(30),\n  tracing: lambda.Tracing.ACTIVE,\n  vpc: vpc,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.SingletonFunction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codeguruprofiler.IProfilingGroup",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.IDestination",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LogRetentionRetryOptions",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.SingletonFunction",
        "@aws-cdk/aws-lambda.SingletonFunctionProps",
        "@aws-cdk/aws-lambda.Tracing",
        "@aws-cdk/aws-lambda.Tracing#ACTIVE",
        "@aws-cdk/aws-lambda.VersionOptions",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_DAY",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codeguruprofiler from '@aws-cdk/aws-codeguruprofiler';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const architecture: lambda.Architecture;\ndeclare const code: lambda.Code;\ndeclare const codeSigningConfig: lambda.CodeSigningConfig;\ndeclare const destination: lambda.IDestination;\ndeclare const eventSource: lambda.IEventSource;\ndeclare const fileSystem: lambda.FileSystem;\ndeclare const key: kms.Key;\ndeclare const lambdaInsightsVersion: lambda.LambdaInsightsVersion;\ndeclare const layerVersion: lambda.LayerVersion;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const profilingGroup: codeguruprofiler.ProfilingGroup;\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\ndeclare const runtime: lambda.Runtime;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const topic: sns.Topic;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst singletonFunction = new lambda.SingletonFunction(this, 'MySingletonFunction', {\n  code: code,\n  handler: 'handler',\n  runtime: runtime,\n  uuid: 'uuid',\n\n  // the properties below are optional\n  allowAllOutbound: false,\n  allowPublicSubnet: false,\n  architecture: architecture,\n  architectures: [architecture],\n  codeSigningConfig: codeSigningConfig,\n  currentVersionOptions: {\n    codeSha256: 'codeSha256',\n    description: 'description',\n    maxEventAge: cdk.Duration.minutes(30),\n    onFailure: destination,\n    onSuccess: destination,\n    provisionedConcurrentExecutions: 123,\n    removalPolicy: cdk.RemovalPolicy.DESTROY,\n    retryAttempts: 123,\n  },\n  deadLetterQueue: queue,\n  deadLetterQueueEnabled: false,\n  deadLetterTopic: topic,\n  description: 'description',\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentEncryption: key,\n  events: [eventSource],\n  filesystem: fileSystem,\n  functionName: 'functionName',\n  initialPolicy: [policyStatement],\n  insightsVersion: lambdaInsightsVersion,\n  lambdaPurpose: 'lambdaPurpose',\n  layers: [layerVersion],\n  logRetention: logs.RetentionDays.ONE_DAY,\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  logRetentionRole: role,\n  maxEventAge: cdk.Duration.minutes(30),\n  memorySize: 123,\n  onFailure: destination,\n  onSuccess: destination,\n  profiling: false,\n  profilingGroup: profilingGroup,\n  reservedConcurrentExecutions: 123,\n  retryAttempts: 123,\n  role: role,\n  securityGroup: securityGroup,\n  securityGroups: [securityGroup],\n  timeout: cdk.Duration.minutes(30),\n  tracing: lambda.Tracing.ACTIVE,\n  vpc: vpc,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 10,
        "10": 21,
        "75": 177,
        "91": 5,
        "104": 1,
        "130": 19,
        "153": 19,
        "169": 19,
        "192": 8,
        "193": 5,
        "194": 17,
        "196": 4,
        "197": 1,
        "225": 20,
        "242": 20,
        "243": 20,
        "254": 9,
        "255": 9,
        "256": 9,
        "281": 59,
        "290": 1
      },
      "fqnsFingerprint": "37b55f41749b49ac0d4744196800556a71428c5f085f8507942eef36bb020bac"
    },
    "ad4ebb043802bd3024d3e96551887b26a229063fda5c3fbd0113de33d1721904": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codeguruprofiler as codeguruprofiler\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_sqs as sqs\nimport aws_cdk.core as cdk\n\n# architecture: lambda.Architecture\n# code: lambda.Code\n# code_signing_config: lambda.CodeSigningConfig\n# destination: lambda.IDestination\n# event_source: lambda.IEventSource\n# file_system: lambda.FileSystem\n# key: kms.Key\n# lambda_insights_version: lambda.LambdaInsightsVersion\n# layer_version: lambda.LayerVersion\n# policy_statement: iam.PolicyStatement\n# profiling_group: codeguruprofiler.ProfilingGroup\n# queue: sqs.Queue\n# role: iam.Role\n# runtime: lambda.Runtime\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# topic: sns.Topic\n# vpc: ec2.Vpc\n\nsingleton_function_props = lambda.SingletonFunctionProps(\n    code=code,\n    handler=\"handler\",\n    runtime=runtime,\n    uuid=\"uuid\",\n\n    # the properties below are optional\n    allow_all_outbound=False,\n    allow_public_subnet=False,\n    architecture=architecture,\n    architectures=[architecture],\n    code_signing_config=code_signing_config,\n    current_version_options=lambda.VersionOptions(\n        code_sha256=\"codeSha256\",\n        description=\"description\",\n        max_event_age=cdk.Duration.minutes(30),\n        on_failure=destination,\n        on_success=destination,\n        provisioned_concurrent_executions=123,\n        removal_policy=cdk.RemovalPolicy.DESTROY,\n        retry_attempts=123\n    ),\n    dead_letter_queue=queue,\n    dead_letter_queue_enabled=False,\n    dead_letter_topic=topic,\n    description=\"description\",\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    environment_encryption=key,\n    events=[event_source],\n    filesystem=file_system,\n    function_name=\"functionName\",\n    initial_policy=[policy_statement],\n    insights_version=lambda_insights_version,\n    lambda_purpose=\"lambdaPurpose\",\n    layers=[layer_version],\n    log_retention=logs.RetentionDays.ONE_DAY,\n    log_retention_retry_options=lambda.LogRetentionRetryOptions(\n        base=cdk.Duration.minutes(30),\n        max_retries=123\n    ),\n    log_retention_role=role,\n    max_event_age=cdk.Duration.minutes(30),\n    memory_size=123,\n    on_failure=destination,\n    on_success=destination,\n    profiling=False,\n    profiling_group=profiling_group,\n    reserved_concurrent_executions=123,\n    retry_attempts=123,\n    role=role,\n    security_group=security_group,\n    security_groups=[security_group],\n    timeout=cdk.Duration.minutes(30),\n    tracing=lambda_.Tracing.ACTIVE,\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeGuruProfiler;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.Logs;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.SQS;\nusing Amazon.CDK;\n\nArchitecture architecture;\nCode code;\nCodeSigningConfig codeSigningConfig;\nIDestination destination;\nIEventSource eventSource;\nFileSystem fileSystem;\nKey key;\nLambdaInsightsVersion lambdaInsightsVersion;\nLayerVersion layerVersion;\nPolicyStatement policyStatement;\nProfilingGroup profilingGroup;\nQueue queue;\nRole role;\nRuntime runtime;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTopic topic;\nVpc vpc;\nSingletonFunctionProps singletonFunctionProps = new SingletonFunctionProps {\n    Code = code,\n    Handler = \"handler\",\n    Runtime = runtime,\n    Uuid = \"uuid\",\n\n    // the properties below are optional\n    AllowAllOutbound = false,\n    AllowPublicSubnet = false,\n    Architecture = architecture,\n    Architectures = new [] { architecture },\n    CodeSigningConfig = codeSigningConfig,\n    CurrentVersionOptions = new VersionOptions {\n        CodeSha256 = \"codeSha256\",\n        Description = \"description\",\n        MaxEventAge = Duration.Minutes(30),\n        OnFailure = destination,\n        OnSuccess = destination,\n        ProvisionedConcurrentExecutions = 123,\n        RemovalPolicy = RemovalPolicy.DESTROY,\n        RetryAttempts = 123\n    },\n    DeadLetterQueue = queue,\n    DeadLetterQueueEnabled = false,\n    DeadLetterTopic = topic,\n    Description = \"description\",\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    EnvironmentEncryption = key,\n    Events = new [] { eventSource },\n    Filesystem = fileSystem,\n    FunctionName = \"functionName\",\n    InitialPolicy = new [] { policyStatement },\n    InsightsVersion = lambdaInsightsVersion,\n    LambdaPurpose = \"lambdaPurpose\",\n    Layers = new [] { layerVersion },\n    LogRetention = RetentionDays.ONE_DAY,\n    LogRetentionRetryOptions = new LogRetentionRetryOptions {\n        Base = Duration.Minutes(30),\n        MaxRetries = 123\n    },\n    LogRetentionRole = role,\n    MaxEventAge = Duration.Minutes(30),\n    MemorySize = 123,\n    OnFailure = destination,\n    OnSuccess = destination,\n    Profiling = false,\n    ProfilingGroup = profilingGroup,\n    ReservedConcurrentExecutions = 123,\n    RetryAttempts = 123,\n    Role = role,\n    SecurityGroup = securityGroup,\n    SecurityGroups = new [] { securityGroup },\n    Timeout = Duration.Minutes(30),\n    Tracing = Tracing.ACTIVE,\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codeguruprofiler.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.logs.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.sqs.*;\nimport software.amazon.awscdk.core.*;\n\nArchitecture architecture;\nCode code;\nCodeSigningConfig codeSigningConfig;\nIDestination destination;\nIEventSource eventSource;\nFileSystem fileSystem;\nKey key;\nLambdaInsightsVersion lambdaInsightsVersion;\nLayerVersion layerVersion;\nPolicyStatement policyStatement;\nProfilingGroup profilingGroup;\nQueue queue;\nRole role;\nRuntime runtime;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTopic topic;\nVpc vpc;\n\nSingletonFunctionProps singletonFunctionProps = SingletonFunctionProps.builder()\n        .code(code)\n        .handler(\"handler\")\n        .runtime(runtime)\n        .uuid(\"uuid\")\n\n        // the properties below are optional\n        .allowAllOutbound(false)\n        .allowPublicSubnet(false)\n        .architecture(architecture)\n        .architectures(List.of(architecture))\n        .codeSigningConfig(codeSigningConfig)\n        .currentVersionOptions(VersionOptions.builder()\n                .codeSha256(\"codeSha256\")\n                .description(\"description\")\n                .maxEventAge(Duration.minutes(30))\n                .onFailure(destination)\n                .onSuccess(destination)\n                .provisionedConcurrentExecutions(123)\n                .removalPolicy(RemovalPolicy.DESTROY)\n                .retryAttempts(123)\n                .build())\n        .deadLetterQueue(queue)\n        .deadLetterQueueEnabled(false)\n        .deadLetterTopic(topic)\n        .description(\"description\")\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .environmentEncryption(key)\n        .events(List.of(eventSource))\n        .filesystem(fileSystem)\n        .functionName(\"functionName\")\n        .initialPolicy(List.of(policyStatement))\n        .insightsVersion(lambdaInsightsVersion)\n        .lambdaPurpose(\"lambdaPurpose\")\n        .layers(List.of(layerVersion))\n        .logRetention(RetentionDays.ONE_DAY)\n        .logRetentionRetryOptions(LogRetentionRetryOptions.builder()\n                .base(Duration.minutes(30))\n                .maxRetries(123)\n                .build())\n        .logRetentionRole(role)\n        .maxEventAge(Duration.minutes(30))\n        .memorySize(123)\n        .onFailure(destination)\n        .onSuccess(destination)\n        .profiling(false)\n        .profilingGroup(profilingGroup)\n        .reservedConcurrentExecutions(123)\n        .retryAttempts(123)\n        .role(role)\n        .securityGroup(securityGroup)\n        .securityGroups(List.of(securityGroup))\n        .timeout(Duration.minutes(30))\n        .tracing(Tracing.ACTIVE)\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codeguruprofiler from '@aws-cdk/aws-codeguruprofiler';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const architecture: lambda.Architecture;\ndeclare const code: lambda.Code;\ndeclare const codeSigningConfig: lambda.CodeSigningConfig;\ndeclare const destination: lambda.IDestination;\ndeclare const eventSource: lambda.IEventSource;\ndeclare const fileSystem: lambda.FileSystem;\ndeclare const key: kms.Key;\ndeclare const lambdaInsightsVersion: lambda.LambdaInsightsVersion;\ndeclare const layerVersion: lambda.LayerVersion;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const profilingGroup: codeguruprofiler.ProfilingGroup;\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\ndeclare const runtime: lambda.Runtime;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const topic: sns.Topic;\ndeclare const vpc: ec2.Vpc;\nconst singletonFunctionProps: lambda.SingletonFunctionProps = {\n  code: code,\n  handler: 'handler',\n  runtime: runtime,\n  uuid: 'uuid',\n\n  // the properties below are optional\n  allowAllOutbound: false,\n  allowPublicSubnet: false,\n  architecture: architecture,\n  architectures: [architecture],\n  codeSigningConfig: codeSigningConfig,\n  currentVersionOptions: {\n    codeSha256: 'codeSha256',\n    description: 'description',\n    maxEventAge: cdk.Duration.minutes(30),\n    onFailure: destination,\n    onSuccess: destination,\n    provisionedConcurrentExecutions: 123,\n    removalPolicy: cdk.RemovalPolicy.DESTROY,\n    retryAttempts: 123,\n  },\n  deadLetterQueue: queue,\n  deadLetterQueueEnabled: false,\n  deadLetterTopic: topic,\n  description: 'description',\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentEncryption: key,\n  events: [eventSource],\n  filesystem: fileSystem,\n  functionName: 'functionName',\n  initialPolicy: [policyStatement],\n  insightsVersion: lambdaInsightsVersion,\n  lambdaPurpose: 'lambdaPurpose',\n  layers: [layerVersion],\n  logRetention: logs.RetentionDays.ONE_DAY,\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  logRetentionRole: role,\n  maxEventAge: cdk.Duration.minutes(30),\n  memorySize: 123,\n  onFailure: destination,\n  onSuccess: destination,\n  profiling: false,\n  profilingGroup: profilingGroup,\n  reservedConcurrentExecutions: 123,\n  retryAttempts: 123,\n  role: role,\n  securityGroup: securityGroup,\n  securityGroups: [securityGroup],\n  timeout: cdk.Duration.minutes(30),\n  tracing: lambda.Tracing.ACTIVE,\n  vpc: vpc,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.SingletonFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codeguruprofiler.IProfilingGroup",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.IDestination",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LogRetentionRetryOptions",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.SingletonFunctionProps",
        "@aws-cdk/aws-lambda.Tracing",
        "@aws-cdk/aws-lambda.Tracing#ACTIVE",
        "@aws-cdk/aws-lambda.VersionOptions",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_DAY",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codeguruprofiler from '@aws-cdk/aws-codeguruprofiler';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const architecture: lambda.Architecture;\ndeclare const code: lambda.Code;\ndeclare const codeSigningConfig: lambda.CodeSigningConfig;\ndeclare const destination: lambda.IDestination;\ndeclare const eventSource: lambda.IEventSource;\ndeclare const fileSystem: lambda.FileSystem;\ndeclare const key: kms.Key;\ndeclare const lambdaInsightsVersion: lambda.LambdaInsightsVersion;\ndeclare const layerVersion: lambda.LayerVersion;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const profilingGroup: codeguruprofiler.ProfilingGroup;\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\ndeclare const runtime: lambda.Runtime;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const topic: sns.Topic;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst singletonFunctionProps: lambda.SingletonFunctionProps = {\n  code: code,\n  handler: 'handler',\n  runtime: runtime,\n  uuid: 'uuid',\n\n  // the properties below are optional\n  allowAllOutbound: false,\n  allowPublicSubnet: false,\n  architecture: architecture,\n  architectures: [architecture],\n  codeSigningConfig: codeSigningConfig,\n  currentVersionOptions: {\n    codeSha256: 'codeSha256',\n    description: 'description',\n    maxEventAge: cdk.Duration.minutes(30),\n    onFailure: destination,\n    onSuccess: destination,\n    provisionedConcurrentExecutions: 123,\n    removalPolicy: cdk.RemovalPolicy.DESTROY,\n    retryAttempts: 123,\n  },\n  deadLetterQueue: queue,\n  deadLetterQueueEnabled: false,\n  deadLetterTopic: topic,\n  description: 'description',\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentEncryption: key,\n  events: [eventSource],\n  filesystem: fileSystem,\n  functionName: 'functionName',\n  initialPolicy: [policyStatement],\n  insightsVersion: lambdaInsightsVersion,\n  lambdaPurpose: 'lambdaPurpose',\n  layers: [layerVersion],\n  logRetention: logs.RetentionDays.ONE_DAY,\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  logRetentionRole: role,\n  maxEventAge: cdk.Duration.minutes(30),\n  memorySize: 123,\n  onFailure: destination,\n  onSuccess: destination,\n  profiling: false,\n  profilingGroup: profilingGroup,\n  reservedConcurrentExecutions: 123,\n  retryAttempts: 123,\n  role: role,\n  securityGroup: securityGroup,\n  securityGroups: [securityGroup],\n  timeout: cdk.Duration.minutes(30),\n  tracing: lambda.Tracing.ACTIVE,\n  vpc: vpc,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 10,
        "10": 20,
        "75": 177,
        "91": 5,
        "130": 19,
        "153": 20,
        "169": 20,
        "192": 8,
        "193": 5,
        "194": 16,
        "196": 4,
        "225": 20,
        "242": 20,
        "243": 20,
        "254": 9,
        "255": 9,
        "256": 9,
        "281": 59,
        "290": 1
      },
      "fqnsFingerprint": "19c16685f938a1f717707a73ec9c940941d2ba161fa25c068d3a3d1974ca022c"
    },
    "d1c1f672173c9a7d51e4f2434da7be97ebed01732ebacb18606bb9765d80622c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\n# source_access_configuration_type: lambda.SourceAccessConfigurationType\n\nsource_access_configuration = lambda.SourceAccessConfiguration(\n    type=source_access_configuration_type,\n    uri=\"uri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nSourceAccessConfigurationType sourceAccessConfigurationType;\n\nSourceAccessConfiguration sourceAccessConfiguration = new SourceAccessConfiguration {\n    Type = sourceAccessConfigurationType,\n    Uri = \"uri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nSourceAccessConfigurationType sourceAccessConfigurationType;\n\nSourceAccessConfiguration sourceAccessConfiguration = SourceAccessConfiguration.builder()\n        .type(sourceAccessConfigurationType)\n        .uri(\"uri\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const sourceAccessConfigurationType: lambda.SourceAccessConfigurationType;\nconst sourceAccessConfiguration: lambda.SourceAccessConfiguration = {\n  type: sourceAccessConfigurationType,\n  uri: 'uri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.SourceAccessConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.SourceAccessConfiguration",
        "@aws-cdk/aws-lambda.SourceAccessConfigurationType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const sourceAccessConfigurationType: lambda.SourceAccessConfigurationType;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceAccessConfiguration: lambda.SourceAccessConfiguration = {\n  type: sourceAccessConfigurationType,\n  uri: 'uri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "01e66d5e2d7be803d9cad1c1cd4f0faf221cd28529d0c843ef978123fb1a0f7c"
    },
    "840f22a81d07add1fa74d495a304983284cad97f3d6eb784ca2b5e4af07b0ebe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\nsource_access_configuration_type = lambda_.SourceAccessConfigurationType.BASIC_AUTH",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nSourceAccessConfigurationType sourceAccessConfigurationType = SourceAccessConfigurationType.BASIC_AUTH;",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nSourceAccessConfigurationType sourceAccessConfigurationType = SourceAccessConfigurationType.BASIC_AUTH;",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nconst sourceAccessConfigurationType = lambda.SourceAccessConfigurationType.BASIC_AUTH;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.SourceAccessConfigurationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.SourceAccessConfigurationType",
        "@aws-cdk/aws-lambda.SourceAccessConfigurationType#BASIC_AUTH"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceAccessConfigurationType = lambda.SourceAccessConfigurationType.BASIC_AUTH;\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "4c522300a06e0f88203c6bf3cc61f0e351c9996570f3940819895e609c867662"
    },
    "94a70f17abb7e861361c41c72fae3e4ffb5058a27bf076a4bfabdd3748e44aae": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_secretsmanager import Secret\nfrom aws_cdk.aws_lambda_event_sources import SelfManagedKafkaEventSource\n\n# The secret that allows access to your self hosted Kafka cluster\n# secret: Secret\n\n# my_function: lambda.Function\n\n\n# The list of Kafka brokers\nbootstrap_servers = [\"kafka-broker:9092\"]\n\n# The Kafka topic you want to subscribe to\ntopic = \"some-cool-topic\"\nmy_function.add_event_source(SelfManagedKafkaEventSource(\n    bootstrap_servers=bootstrap_servers,\n    topic=topic,\n    secret=secret,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\n// The secret that allows access to your self hosted Kafka cluster\nSecret secret;\n\nFunction myFunction;\n\n\n// The list of Kafka brokers\nstring[] bootstrapServers = new [] { \"kafka-broker:9092\" };\n\n// The Kafka topic you want to subscribe to\nstring topic = \"some-cool-topic\";\nmyFunction.AddEventSource(new SelfManagedKafkaEventSource(new SelfManagedKafkaEventSourceProps {\n    BootstrapServers = bootstrapServers,\n    Topic = topic,\n    Secret = secret,\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.secretsmanager.Secret;\nimport software.amazon.awscdk.services.lambda.eventsources.SelfManagedKafkaEventSource;\n\n// The secret that allows access to your self hosted Kafka cluster\nSecret secret;\n\nFunction myFunction;\n\n\n// The list of Kafka brokers\nString[] bootstrapServers = List.of(\"kafka-broker:9092\");\n\n// The Kafka topic you want to subscribe to\nString topic = \"some-cool-topic\";\nmyFunction.addEventSource(SelfManagedKafkaEventSource.Builder.create()\n        .bootstrapServers(bootstrapServers)\n        .topic(topic)\n        .secret(secret)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.StartingPosition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSource",
        "@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSourceProps",
        "@aws-cdk/aws-lambda.FunctionBase#addEventSource",
        "@aws-cdk/aws-lambda.IEventSource",
        "@aws-cdk/aws-lambda.StartingPosition",
        "@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 23,
        "130": 2,
        "153": 1,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "7a6ad1a9db00a64a7ae0bfbe9cfb5c5c7710f2108ae245f27580e06c3bdd564c"
    },
    "69c78d8f67ec20076d54ffdd942f45b0ff3b73c1333e0c41a3f254ae93fb5822": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    tracing=lambda_.Tracing.ACTIVE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    Tracing = Tracing.ACTIVE\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"))\n        .tracing(Tracing.ACTIVE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  tracing: lambda.Tracing.ACTIVE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Tracing"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Tracing",
        "@aws-cdk/aws-lambda.Tracing#ACTIVE",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  tracing: lambda.Tracing.ACTIVE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "104": 1,
        "193": 1,
        "194": 7,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "848a46206b94093782ac94599502f26864f20b0dbb9d2757d9629ed9ef7fc142"
    },
    "180367490e0f9035516b53d1b5c30a5251b2cac4110038f51a7f63e1c3d894bb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn: lambda.Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.UtilizationScalingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "0ea66cd73350dd04fa60fb95f619ffa144703b4f32f4ea774929d05b574b59ad"
    },
    "9afe4bcc5658991e0b6533c4f8ffa5a3e8a5d232cb26ec96c862ed074df547e6": {
      "translations": {
        "python": {
          "source": "lambda_code = lambda_.Code.from_cfn_parameters()\nfunc = lambda_.Function(self, \"Lambda\",\n    code=lambda_code,\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n# used to make sure each CDK synthesis produces a different Version\nversion = func.add_version(\"NewVersion\")\nalias = lambda_.Alias(self, \"LambdaAlias\",\n    alias_name=\"Prod\",\n    version=version\n)\n\ncodedeploy.LambdaDeploymentGroup(self, \"DeploymentGroup\",\n    alias=alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CfnParametersCode lambdaCode = Code.FromCfnParameters();\nFunction func = new Function(this, \"Lambda\", new FunctionProps {\n    Code = lambdaCode,\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n// used to make sure each CDK synthesis produces a different Version\nVersion version = func.AddVersion(\"NewVersion\");\nAlias alias = new Alias(this, \"LambdaAlias\", new AliasProps {\n    AliasName = \"Prod\",\n    Version = version\n});\n\nnew LambdaDeploymentGroup(this, \"DeploymentGroup\", new LambdaDeploymentGroupProps {\n    Alias = alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnParametersCode lambdaCode = Code.fromCfnParameters();\nFunction func = Function.Builder.create(this, \"Lambda\")\n        .code(lambdaCode)\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n// used to make sure each CDK synthesis produces a different Version\nVersion version = func.addVersion(\"NewVersion\");\nAlias alias = Alias.Builder.create(this, \"LambdaAlias\")\n        .aliasName(\"Prod\")\n        .version(version)\n        .build();\n\nLambdaDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .alias(alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const lambdaCode = lambda.Code.fromCfnParameters();\nconst func = new lambda.Function(this, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n// used to make sure each CDK synthesis produces a different Version\nconst version = func.addVersion('NewVersion');\nconst alias = new lambda.Alias(this, 'LambdaAlias', {\n  aliasName: 'Prod',\n  version,\n});\n\nnew codedeploy.LambdaDeploymentGroup(this, 'DeploymentGroup', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Version"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.CfnParametersCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromCfnParameters",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Version",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaCode = lambda.Code.fromCfnParameters();\nconst func = new lambda.Function(this, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n// used to make sure each CDK synthesis produces a different Version\nconst version = func.addVersion('NewVersion');\nconst alias = new lambda.Alias(this, 'LambdaAlias', {\n  aliasName: 'Prod',\n  version,\n});\n\nnew codedeploy.LambdaDeploymentGroup(this, 'DeploymentGroup', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 29,
        "104": 3,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2
      },
      "fqnsFingerprint": "63ba1a39b0dd4018fe6cfb2921cbdee9fd6ca362c19a815fd9dc39bfdebc6534"
    },
    "82c278930d777750549c3bee4a5a506b962230af205799a3e900d943d05bdfcf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\n# function_: lambda.Function\n\nversion_attributes = lambda.VersionAttributes(\n    lambda_=function_,\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nFunction function_;\n\nVersionAttributes versionAttributes = new VersionAttributes {\n    Lambda = function_,\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nFunction function_;\n\nVersionAttributes versionAttributes = VersionAttributes.builder()\n        .lambda(function_)\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const function_: lambda.Function;\nconst versionAttributes: lambda.VersionAttributes = {\n  lambda: function_,\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.VersionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.VersionAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const function_: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst versionAttributes: lambda.VersionAttributes = {\n  lambda: function_,\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a43d29b45b323949593e605d95aab766960eea711d9d44cd036dee9083c2d9a1"
    },
    "3fe74ed1d13df4f0355e1ede672bf301b9b6c034a6de3e6c823cb49ad2c71a67": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    current_version_options=lambda.VersionOptions(\n        removal_policy=RemovalPolicy.RETAIN,  # retain old versions\n        retry_attempts=1\n    ),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n\nfn.current_version.add_alias(\"live\")",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    CurrentVersionOptions = new VersionOptions {\n        RemovalPolicy = RemovalPolicy.RETAIN,  // retain old versions\n        RetryAttempts = 1\n    },\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});\n\nfn.CurrentVersion.AddAlias(\"live\");",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .currentVersionOptions(VersionOptions.builder()\n                .removalPolicy(RemovalPolicy.RETAIN) // retain old versions\n                .retryAttempts(1)\n                .build())\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();\n\nfn.currentVersion.addAlias(\"live\");",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  currentVersionOptions: {\n    removalPolicy: RemovalPolicy.RETAIN, // retain old versions\n    retryAttempts: 1,                   // async retry attempts\n  },\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nfn.currentVersion.addAlias('live');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.VersionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Version#addAlias",
        "@aws-cdk/aws-lambda.VersionOptions",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  currentVersionOptions: {\n    removalPolicy: RemovalPolicy.RETAIN, // retain old versions\n    retryAttempts: 1,                   // async retry attempts\n  },\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nfn.currentVersion.addAlias('live');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 23,
        "104": 1,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "80761530fa4dd89c0bba6c3f16d59a728ab4402b26cd2230afb500422a43a9b7"
    },
    "a30764a08c9b420dcf017f8500c3ea2053e13f94064727131521eecca4c7334d": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\nversion = lambda_.Version(self, \"MyVersion\",\n    lambda_=fn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nVersion version = new Version(this, \"MyVersion\", new VersionProps {\n    Lambda = fn\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nVersion version = Version.Builder.create(this, \"MyVersion\")\n        .lambda(fn)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst version = new lambda.Version(this, 'MyVersion', {\n  lambda: fn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.VersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Version",
        "@aws-cdk/aws-lambda.VersionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst version = new lambda.Version(this, 'MyVersion', {\n  lambda: fn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "3e7982280317272404140dfa01541b1aa7a22fabe3876baa59d3dda10043e6ee"
    },
    "38df8da8e9fb802f04c15a2ef0aa7c2b9a2e07fae40b3b150025adc695158074": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\n\n# version: lambda.Version\n\nversion_weight = lambda.VersionWeight(\n    version=version,\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\n\nVersion version;\n\nVersionWeight versionWeight = new VersionWeight {\n    Version = version,\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\n\nVersion version;\n\nVersionWeight versionWeight = VersionWeight.builder()\n        .version(version)\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const version: lambda.Version;\nconst versionWeight: lambda.VersionWeight = {\n  version: version,\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.VersionWeight"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.VersionWeight"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const version: lambda.Version;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst versionWeight: lambda.VersionWeight = {\n  version: version,\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "694264f6121822de9f0dd91d2b47c22cc1c6e0138aaa9fdcee7fd8066412d671"
    }
  }
}
